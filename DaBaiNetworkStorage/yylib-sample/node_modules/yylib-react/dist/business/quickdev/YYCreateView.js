'use strict';

/**
 * Created by Dio on 2016/9/3.
 */
var React = require('react');
var _ = require('lodash');
var DefaultParams = require('./DefaultParams');
var DefaultParser = require('./DefaultParser');
var DefaultHandler = require('./DefaultHandler');
var DefaultActions = require('./DefaultActions');
var TreeUtils = require('../../utils/TreeUtils');
var ViewMeta = require('./ViewMeta');
var DataUtil = require('../../utils/DataUtil');
var RUN_MODE_DESIGN = 'design';

//是否存在运行参数表达式
var hasParamPatten = function hasParamPatten(str) {
    var patten = new RegExp('!\{.+}', 'gm');
    return patten.test(str);
};

//缓存权限按钮
var authorityButtons = function authorityButtons(appCode, pageCode) {
    if (!window.top || !window.top.getAuthorityButtons) return [];
    //getAuthorityButtons内部做了缓存
    var buttons = window.top.getAuthorityButtons(appCode, pageCode);
    return buttons;
    //var cache = DataUtil.getCache("YYCreateView_authorityButtons_"+appCode+"_"+pageCode);
    //if(cache){
    //  return cache;
    //}else{
    //  DataUtil.setCache("YYCreateView_authorityButtons_"+appCode+"_"+pageCode,buttons?buttons:[]);//存入缓存(内存级)
    //}
};

var YYCreateView = React.createClass({
    displayName: 'YYCreateView',

    statics: {
        RUN_MODE_DESIGN: RUN_MODE_DESIGN //运行设计态
    },
    getDefaultProps: function getDefaultProps() {
        return {
            appCode: null,
            pageCode: null,
            billTypeCode: null,
            uiMeta: null, //UI元数据
            uiParser: null, //UI组件解析器
            uiEvent: null, //UI事件处理器
            uiParams: null, //UI参数解析器
            uiRunMode: null //运行模式，默认为运行态，设计态-"design"
        };
    },
    getInitialState: function getInitialState() {
        var uiParams = this._processUIParams(this.props.uiParams);
        var uiParser = this._processUIParser(this.props.uiParser);
        var uiEvent = this._processUIEvent(this.props.uiEvent);
        var uiMeta = this._processUIMeta(this.props.uiMeta);
        return {
            uiParams: uiParams, uiMeta: uiMeta, uiParser: uiParser, uiEvent: uiEvent,
            refreshTime: 0 //记录刷新次数
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('uiParams' in nextProps || 'uiParser' in nextProps || 'uiEvent' in nextProps || 'uiMeta' in nextProps) {
            var uiParams = this._processUIParams(nextProps.uiParams);
            var uiParser = this._processUIParser(nextProps.uiParser);
            var uiEvent = this._processUIEvent(nextProps.uiEvent);
            var uiMeta = this._processUIMeta(nextProps.uiMeta);
            this.setState({
                uiParams: uiParams, uiMeta: uiMeta, uiParser: uiParser, uiEvent: uiEvent,
                refreshTime: this.state.refreshTime + 1
            });
        }
    }
    //性能优化，只有当refreshTime发生变更时才触发执行render方法
    ,
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return this.state.refreshTime != nextState.refreshTime;
    },
    componentWillMount: function componentWillMount() {
        //console.log('YYCreateView will mount');
        var _state = this.state,
            uiMeta = _state.uiMeta,
            uiEvent = _state.uiEvent;

        this._callEvent('onViewWillMount', { uiMeta: uiMeta, uiEvent: uiEvent });
    },
    componentDidMount: function componentDidMount() {
        //console.log('YYCreateView did mount');
        var _state2 = this.state,
            uiMeta = _state2.uiMeta,
            uiEvent = _state2.uiEvent;

        this._callEvent('onViewDidMount', { uiMeta: uiMeta, uiEvent: uiEvent });
    },
    componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
        //console.log('YYCreateView will update');
        var uiMeta = nextState.uiMeta,
            uiEvent = nextState.uiEvent;

        this._callEvent('onViewWillUpdate', { uiMeta: uiMeta, uiEvent: uiEvent });
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        //console.log('YYCreateView did update');
        var uiMeta = prevState.uiMeta,
            uiEvent = prevState.uiEvent;

        this._callEvent('onViewDidUpdate', { uiMeta: uiMeta, uiEvent: uiEvent });
    }
    //回调指定的事件
    , _callEvent: function _callEvent(eventName, _ref) {
        var uiMeta = _ref.uiMeta,
            uiEvent = _ref.uiEvent;

        if (!uiMeta || !uiEvent) return;
        for (var uikey in uiEvent) {
            var itemEvents = uiEvent[uikey];
            if (itemEvents && _.isFunction(itemEvents[eventName])) {
                var itemUI = this._findUI({ uiMeta: uiMeta, uikey: uikey }); //匹配到组件才调用事件
                if (itemUI) {
                    try {
                        var _itemUI = itemEvents[eventName].call(this, { uiMeta: uiMeta, item: itemUI });
                        if (_itemUI) itemUI = _itemUI;
                    } catch (err) {
                        console.error('[事件回调失败]' + uikey + '.' + eventName, err);
                    }
                }
            }
        }
    }
    ////处理onReady回调
    //,_processOnReady:function(){
    //    //console.log('on processOnReady');
    //    //执行onReady回调
    //    var {uiMeta,uiEvent} = this.state;
    //    if(!uiMeta||!uiEvent)return;
    //    for(var uikey in uiEvent){
    //        var itemEvents = uiEvent[uikey];
    //        if(itemEvents&&_.isFunction(itemEvents['onViewReady'])){
    //            var itemUI = this.findUI(uikey);
    //            if(itemUI)itemEvents['onViewReady'].call(this,itemUI);
    //        }
    //    }
    //}
    //,_processOnViewDidMount:function(){
    //    var that = this;
    //    var {uiMeta,uiEvent} = this.state;
    //TreeUtils.loopAll([uiMeta],function(item,index,pos){
    //    //解析视图事件
    //    var itemEvents = null;
    //    if(item&&item.uikey&&uiEvent){
    //        itemEvents = uiEvent[item.uikey];
    //    }
    //    //解析时的回调事件-onViewInit
    //    if(itemEvents&&_.isFunction(itemEvents['onViewInit'])){
    //        var _itemUI = itemEvents['onViewInit'].call(that,item);
    //        if(_itemUI)item = _itemUI;
    //    }
    //});
    //var {uiMeta,uiEvent} = this.state;
    //if(!uiMeta||!uiEvent)return;
    //for(var uikey in uiEvent){
    //    var itemEvents = uiEvent[uikey];
    //    if(itemEvents&&_.isFunction(itemEvents['onViewInit'])){
    //        var itemUI = this.findUI(uikey);
    //        if(itemUI)itemEvents['onViewInit'].call(this,itemUI);
    //    }
    //}
    //}
    //环境参数助手方法
    , _processUIParams: function _processUIParams(uiParams) {
        var _uiParams = _.assign({}, DefaultParams, uiParams);
        for (var key in _uiParams) {
            var param = _uiParams[key];
            if (_.isFunction(param)) {
                //处理函数类型的动态参数
                _uiParams[key] = param.call(this);
            }
        }
        return _uiParams;
    }
    //元数据助手方法
    , _processUIMeta: function _processUIMeta(uiMeta) {
        var _uiMeta = uiMeta;
        return _uiMeta;
    }
    //解析器助手方法
    , _processUIParser: function _processUIParser(uiParser) {
        var _uiParser = _.assign({}, DefaultParser, uiParser);
        return _uiParser;
    }
    //事件助手方法
    , _processUIEvent: function _processUIEvent(uiEvent) {
        //注意此次需要克隆，以防止引用共享
        var copyDefault = _.cloneDeep(DefaultHandler);
        var copyUiEvent = _.cloneDeep(uiEvent);
        var _uiEvent = _.assign(copyDefault, copyUiEvent);
        for (var uikey in _uiEvent) {
            var itemEvents = _uiEvent[uikey];
            for (var name in itemEvents) {
                try {
                    itemEvents[name] = itemEvents[name].bind(this);
                } catch (err) {
                    console.error('[绑定事件失败]' + uikey + '.' + name + ',检查是否为有效的Function', err);
                }
            }
        }
        return _uiEvent;
    }
    /**
     * 刷新重绘页面
     */
    , refresh: function refresh(callback, state) {
        this.setState(_.assign({ refreshTime: this.state.refreshTime + 1 }, state), callback);
    }
    /**
     * 获取当前页面
     */
    , getPage: function getPage() {
        var that = this;
        return that;
    }
    /**
     * 获取应用编码
     */
    , getAppCode: function getAppCode() {
        return this.props.appCode;
    }
    /**
     * 获取页面编码
     */
    , getPageCode: function getPageCode() {
        return this.props.pageCode;
    }
    /**
    * 获取页面单据类型
    */
    , getBillTypeCode: function getBillTypeCode() {
        return this.props.billTypeCode;
    }
    /**
     * 路由到指定页面
     * @param url   路由路径
     * @param query URL附加的参数（显示参数）
     * @param state 路由附加的参数（隐藏参数）
     */
    , routeTo: function routeTo(url, query, state) {
        if (!this.props.router) {
            console.error('调用routeTo失败,router不存在');return;
        }
        var location = {};
        if (url) location.pathname = url;
        if (query) location.query = query;
        if (state) location.state = state;
        //this.props.history.push(url,_params);
        // this.props.history.push(location);
        this.props.router.push(location); // Router版本升级修改
    }
    /**
     * 获取路由传递的参数值（隐藏参数）
     */
    , getRouteParams: function getRouteParams() {
        if (!this.props.location && !this.props.params) {
            console.error('调用getRouteParams失败,location和params均不存在');return;
        }
        return _.isEmpty(this.props.location.state) ? _.isEmpty(this.props.params) ? null : this.props.params : this.props.location.state;
    }
    /**
     * 获取路由传递的URL参数值（直接链接在URL的?后面的参数列表）（显示参数）
     */
    , getRouteQuery: function getRouteQuery() {
        if (!this.props.location) {
            console.error('调用getRouteQuery失败,location不存在');return;
        }
        return _.isEmpty(this.props.location.query) ? null : this.props.location.query;
    }
    /**
     * 后退上一个页面
     */
    , goBack: function goBack() {
        if (!this.props.router) {
            console.error('调用goBack失败,router不存在');return;
        }
        this.props.router.goBack();
    }
    /**
     * 前进下一个页面
     */
    , goForward: function goForward() {
        if (!this.props.router) {
            console.error('调用goForward失败,router不存在');return;
        }
        this.props.router.goForward();
    }
    /**
     * 后退或前进到第N个页面
     * @param to n为正数则为前进，n为负数则为后退
     */
    , goTo: function goTo(to) {
        if (!this.props.router) {
            console.error('调用goTo失败,router不存在');return;
        }
        this.props.router.go(to);
    }
    /**
     * 通过键值查找UI对象模型
     * @param uikey
     */
    , findUI: function findUI(uikey) {
        if (this.state.uiMeta) {
            var result = this._findUI({ uiMeta: this.state.uiMeta, uikey: uikey });
            if (!result) console.warn('[api.findUI]找不到：' + uikey);
            return result;
        }
        return null;
    },
    _findUI: function _findUI(options) {
        var uiMeta = options.uiMeta,
            uikey = options.uikey;

        var _uiMeta = _.isArray(uiMeta) ? uiMeta : [uiMeta];
        var results = TreeUtils.findWithPropName(_uiMeta, 'uikey', uikey, true, true);
        if (results && results.length > 0) {
            results[0].api = this._findByRef(results[0].nid); //扩展API对象
            return results[0];
        }
        return null;
    }
    /**
     * 通过类型查找UI数据模型
     * @param uitype 解析器名称
     */
    , findUIByType: function findUIByType(uitype) {
        if (this.state.uiMeta) {
            var _uiMeta = _.isArray(this.state.uiMeta) ? this.state.uiMeta : [this.state.uiMeta];
            var results = TreeUtils.findWithPropName(_uiMeta, 'uitype', uitype, true, false);
            if (results && results.length > 0) {
                var that = this;
                _.forEach(results, function (item, index) {
                    results[index].api = that._findByRef(item.nid); //扩展API对象
                });
                return results;
            }
        }
        return null;
    }
    //ref值指向nid值
    , _findByRef: function _findByRef(ref) {
        //TODO 目前存在缺陷，在折叠卡片页签第一次未展开时，无法通过refs获取内部组件
        return ref && this.refs[ref] ? this.refs[ref] : null;
    }
    /**
     * 通过键值查找UI组件实例
     * @param uikey
     */
    , findComp: function findComp(uikey) {
        if (this.state.uiMeta) {
            var _uiMeta = _.isArray(this.state.uiMeta) ? this.state.uiMeta : [this.state.uiMeta];
            var results = TreeUtils.findWithPropName(_uiMeta, 'uikey', uikey, true, true);
            return this._findByRef(results.length > 0 ? results[0].nid : null);
        }
        return null;
    }
    //环境参数替换
    , _processParams: function _processParams(node) {
        var uiParams = this.state.uiParams;
        if (_.isEmpty(uiParams)) return;
        if (!node) return;
        var keys = [];
        //过滤出包含运行参数的属性
        for (var key in node) {
            var value = node[key];
            if (value && _.isString(value) && hasParamPatten(value)) {
                keys.push(key);
            };
        }
        //进行运行参数替换
        if (keys.length == 0) return;
        for (var idx in keys) {
            var propName = keys[idx];
            var propValue = node[propName];
            if (!propValue) break;
            for (var paramKey in uiParams) {
                node[propName] = propValue.replace(new RegExp('!\{' + paramKey + '}', 'gm'), uiParams[paramKey]);
                if (!hasParamPatten(node[propName])) break; //性能优化，如果替换一次后，就不存在需要替换的参数则跳过本次。
            }
        }
    }
    //获取解析后的视图
    , _getViewContent: function _getViewContent(options) {
        //console.log('第'+this.state.refreshTime+'次进行视图解析');
        var uiMeta = options.uiMeta,
            uiEvent = options.uiEvent,
            uiParser = options.uiParser;

        var views = null;
        if (uiMeta) {
            if (_.isArray(uiMeta)) {
                views = this._processViews(uiMeta, uiEvent, uiParser);
            } else {
                views = this._processViews([uiMeta], uiEvent, uiParser);
            }
        }
        if (views && views.length > 0) {
            return _.isArray(uiMeta) ? views : views[0];
        } else {
            return null;
        }
    }
    //解析视图
    , _processViews: function _processViews(items, uiEvent, uiParser) {
        if (!_.isArray(items)) return null;
        var views = [];
        var _props = this.props,
            uiRunMode = _props.uiRunMode,
            appCode = _props.appCode,
            pageCode = _props.pageCode,
            billTypeCode = _props.billTypeCode;

        var that = this;
        var pageCode = this.props.pageCode;

        for (var i = 0; i < items.length; i++) {
            var itemUI = items[i];
            if (!itemUI || _.isEmpty(itemUI)) continue;
            //解析子视图
            var childView = itemUI.children;
            var doEachChild = _.isArray(itemUI.children);
            if (doEachChild) {
                childView = this._processViews(itemUI.children, uiEvent, uiParser);
            }
            //解析视图事件
            var itemEvents = null;
            if (itemUI.uikey && uiEvent) {
                itemEvents = uiEvent[itemUI.uikey];
            }
            //解析事件动作
            if (itemUI.uievents) {
                if (!itemEvents) itemEvents = {};
                //解析绑定的所有事件
                _.forEach(itemUI.uievents, function (uiactions, uievent) {
                    //解析对应事件下的动作列表
                    itemEvents[uievent] = function (ui, event, actions) {
                        for (var actSeq = 0; actSeq < actions.length; actSeq++) {
                            var action = actions[actSeq];
                            //获取动作函数
                            var actionFunc = DefaultActions[action.uiaction];
                            //执行动作处理
                            if (typeof actionFunc == 'function') {
                                actionFunc.call(this, { event: event, action: action, ui: ui });
                            }
                        }
                    }.bind(that, itemUI, uievent, uiactions);
                });
            }
            ////解析前的回调事件
            //if(itemEvents&&_.isFunction(itemEvents['onParserBefore'])){
            //    var _itemUI = itemEvents['onParserBefore'].call(that,itemUI);
            //    if(_itemUI)itemUI = _itemUI;
            //}
            //解析当前组件
            var UIComponent = itemUI.uitype ? uiParser[itemUI.uitype] : null;
            //清理掉API对象
            delete itemUI.api;
            //当前组件属性
            var itemProps = _.assign({
                //为所有组件追加uiorigin属性，本属性提供了界面设计器解析构建页面时的特有属性
                uiorigin: { appCode: appCode, pageCode: pageCode, billTypeCode: billTypeCode }
            }, itemUI);
            //环境参数替换
            this._processParams(itemProps);
            //标识运行模式
            if (uiRunMode) itemProps.uiRunMode = uiRunMode;
            //添加到视图集合，当uidisabled==true时，则不进行组件解析，返回原始数据。
            if (itemUI.uidisabled == true) {
                //不进行组件解析
                views.push(itemProps);
            } else if (UIComponent) {
                //存在相关组件解析器
                //将当前UI元数据绑定到组件的ui属性
                var privateProps = {};
                if (itemUI.nid) {
                    privateProps.ref = itemUI.nid;
                    if (!itemUI.key) {
                        privateProps.key = pageCode + "_" + itemUI.nid;
                    }
                }
                var itemView = React.createElement(UIComponent, _.assign({}, itemProps, privateProps, itemEvents), childView);
                //var itemView= <UIComponent {...itemProps} ref={itemUI.nid} key={itemKey} {...itemEvents} children={childView} />;
                ////解析后的回调事件
                //if(itemEvents&&_.isFunction(itemEvents['onParserAfter'])){
                //    var _itemView = itemEvents['onParserAfter'].call(that,itemUI,itemView);
                //    if(_itemView)itemView = _itemView;
                //}
                //处理视图是否拥有权限
                var hasAuth = this.isHasAuthorityView(itemUI.uikey);
                if (hasAuth) {
                    views.push(itemView);
                }
            } else {
                //不存在相关组件解析器则返回包含元数据的空视图组件
                var viewMeta = React.createElement(ViewMeta, itemProps);
                views.push(viewMeta);
            }
        }
        return views;
    }
    //指定uikey键值的视图组件是否有权限
    , isHasAuthorityView: function isHasAuthorityView(uikey) {
        var _props2 = this.props,
            appCode = _props2.appCode,
            pageCode = _props2.pageCode;

        var buttons = authorityButtons(appCode, pageCode);
        var btn = buttons && buttons.length > 0 ? _.find(buttons, ['btnCode', uikey]) : null;
        return btn ? btn.enable : true;
    },
    render: function render() {
        var _state3 = this.state,
            uiMeta = _state3.uiMeta,
            uiParser = _state3.uiParser,
            uiEvent = _state3.uiEvent;
        //获取解析后的视图

        var viewContent = this._getViewContent({ uiMeta: uiMeta, uiParser: uiParser, uiEvent: uiEvent });
        return viewContent;
    }
});
module.exports = YYCreateView;