'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/9/3.
 */
var React = require('react');
var _ = require('lodash');
var YYCreateView = require('./YYCreateView');
var DefaultParser = require('./DefaultParser');
var DataUtil = require('../../utils/DataUtil');
var ajax = require('../../utils/ajax');
var AuthToken = require('../../utils/AuthToken');

var _require = require('yylib-ui'),
    YYSpin = _require.YYSpin;

var _require2 = require('./Resturl'),
    GET_PAGE_DATA = _require2.GET_PAGE_DATA;

var API = require('./api.all');
var CACHE_KEY = "YYCreatePage_"; //缓存的键值前缀
var YYCreatePage = React.createClass({
    displayName: 'YYCreatePage',

    statics: {
        API: API //通用API
    },
    getDefaultProps: function getDefaultProps() {
        return {
            appCode: null, //应用编码
            pageCode: null, //页面编码
            uiParser: null, //UI组件解析器
            uiEvent: null, //UI事件处理器
            uiParams: null, //UI参数处理器
            mode: null, // publish:发布状态 debug:调试状态（默认）
            serverUrl: GET_PAGE_DATA,
            enableOrg: true, //是否获取当前组织
            enableCache: false, //是否启用缓存
            enableLoading: true //是否启用加载中
        };
    },
    getInitialState: function getInitialState() {
        return {
            appCode: this.props.appCode,
            pageCode: this.props.pageCode,
            billTypeCode: null,
            uiMeta: undefined,
            uiParser: this.props.uiParser,
            uiEvent: this.props.uiEvent,
            uiParams: this.props.uiParams
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('uiParams' in nextProps) {
            this.setState({
                uiParser: nextProps.uiParams
            });
        }
        if ('uiParser' in nextProps) {
            this.setState({
                uiParser: nextProps.uiParser
            });
        }
        if ('uiEvent' in nextProps) {
            this.setState({
                uiEvent: nextProps.uiEvent
            });
        }
        if ('appCode' in nextProps && 'pageCode' in nextProps) {
            //当应用编码或页面编码变更时重新加载刷新页面
            if (this.props.appCode !== nextProps.appCode || this.props.pageCode !== nextProps.pageCode) {
                this.refreshPage(nextProps.appCode, nextProps.pageCode, null, null);
            }
        }
        if ('location' in nextProps) {
            var query = this.props.location ? this.props.location.query : {};
            var nextQuery = nextProps.location ? nextProps.location.query : {};
            if (query.appCode !== nextQuery.appCode || query.pageCode !== nextQuery.pageCode) {
                this.refreshPage(nextProps.appCode, nextProps.pageCode, nextProps.location, null);
            }
        }
        if ('routeParams' in nextProps) {
            var query = this.props.routeParams ? this.props.routeParams : {};
            var nextQuery = nextProps.routeParams ? nextProps.routeParams : {};
            if (query.appCode !== nextQuery.appCode || query.pageCode !== nextQuery.pageCode) {
                this.refreshPage(nextProps.appCode, nextProps.pageCode, null, nextProps.routeParams);
            }
        }
    },
    refreshPage: function refreshPage(appCode, pageCode, location, routeParams) {
        var query = location ? location.query : {};
        if (routeParams) query = routeParams;
        //如果属性不存在则取路由URL参数
        var _appCode = appCode ? appCode : query.appCode;
        var _pageCode = pageCode ? pageCode : query.pageCode;
        this.setState({ appCode: _appCode, pageCode: _pageCode }); //更新appCode|pageCode
        this._loadPageData(_appCode, _pageCode);
    }
    //加载页面元数据
    , _loadPageData: function _loadPageData(appCode, pageCode) {
        var self = this;
        if (!appCode || !pageCode) return;
        var _props2 = this.props,
            serverUrl = _props2.serverUrl,
            enableOrg = _props2.enableOrg,
            mode = _props2.mode,
            enableCache = _props2.enableCache;

        var params = {
            appCode: appCode,
            pageCode: pageCode,
            mode: mode
        };
        //是否启用自动获取当前组织
        if (enableOrg) {
            params.orgId = AuthToken.getOrgaId();
        }
        //读取缓存(内存级)
        var metaData = enableCache === false ? null : DataUtil.getCache(CACHE_KEY + appCode + "_" + pageCode);
        if (metaData) {
            self.setState({ uiMeta: _.cloneDeep(metaData), billTypeCode: metaData.billTypeCode });
        } else {
            ajax.getJSON(serverUrl, params, function (result) {
                var data = null;
                if (result.success && result.backData && result.backData.data) {
                    data = JSON.parse(result.backData.data);
                    if (result.backData.orgId) {
                        console.info('[加载页面]' + result.backData.orgId.name + '(' + result.backData.id + ')/' + appCode + '/' + pageCode);
                    }
                    self.setState({ uiMeta: _.isEmpty(data) ? null : data, billTypeCode: result.backData.billTypeCode });
                    DataUtil.setCache(CACHE_KEY + appCode + "_" + pageCode, _.isEmpty(data) ? null : _.cloneDeep(data)); //存入缓存(内存级)
                } else {
                    console.warn('[加载页面]' + appCode + '/' + pageCode + '/空页面');
                }
            });
        }
    },
    componentDidMount: function componentDidMount() {
        var _props3 = this.props,
            appCode = _props3.appCode,
            pageCode = _props3.pageCode,
            location = _props3.location,
            routeParams = _props3.routeParams;

        this.refreshPage(appCode, pageCode, location, routeParams);
    },
    render: function render() {
        var _props4 = this.props,
            router = _props4.router,
            location = _props4.location,
            params = _props4.params,
            route = _props4.route,
            routeParams = _props4.routeParams,
            routes = _props4.routes,
            enableLoading = _props4.enableLoading;
        var _state = this.state,
            appCode = _state.appCode,
            pageCode = _state.pageCode,
            billTypeCode = _state.billTypeCode;

        var _props = { router: router, location: location, params: params, route: route, routeParams: routeParams, routes: routes };
        _props.uiParams = this.state.uiParams;
        _props.uiMeta = this.state.uiMeta;
        _props.uiParser = this.state.uiParser;
        _props.uiEvent = this.state.uiEvent;
        return this.state.uiMeta !== undefined ? React.createElement(YYCreateView, _extends({}, _props, { appCode: appCode, pageCode: pageCode, billTypeCode: billTypeCode })) : enableLoading ? React.createElement(YYSpin, { style: { height: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center' } }) : null;
    }
});
module.exports = YYCreatePage;