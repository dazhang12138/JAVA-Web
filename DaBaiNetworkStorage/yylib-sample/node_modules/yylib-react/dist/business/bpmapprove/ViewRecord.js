'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactCustomScrollbars = require('react-custom-scrollbars');

var _bpm = require('./bpm/actions/bpm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } //滚动条


var _require = require('yylib-ui'),
    YYModal = _require.YYModal,
    YYTimeline = _require.YYTimeline,
    YYTimelineItem = _require.YYTimelineItem;
//mapStateToProps是一个函数，返回值表示的是需要merge进props的state。


var mapStateToProps = function mapStateToProps(state) {
	return {
		bpm: state.bpm
	};
};
//规范属性类型
var propTypes = {
	dispatch: _react2.default.PropTypes.func
};

var ViewRecord = function (_React$Component) {
	_inherits(ViewRecord, _React$Component);

	function ViewRecord(props) {
		_classCallCheck(this, ViewRecord);

		var _this = _possibleConstructorReturn(this, (ViewRecord.__proto__ || Object.getPrototypeOf(ViewRecord)).call(this, props));

		_this.state = {
			title: null,
			userId: null,
			visible: false,
			historyContent: null
		};
		_this.hideModal = _this.hideModal.bind(_this);
		_this.handleOk = _this.handleOk.bind(_this);
		return _this;
	}

	_createClass(ViewRecord, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _props = this.props,
			    viewRecord = _props.viewRecord,
			    userId = _props.userId,
			    bpmId = _props.bpmId,
			    serUrl = _props.serUrl,
			    dispatch = _props.dispatch;

			this.setState({
				visible: viewRecord,
				userId: userId,
				bpmId: bpmId,
				serUrl: serUrl
			});
			var param = {
				bpmId: bpmId,
				userId: userId,
				serUrl: serUrl
			};
			dispatch((0, _bpm.bpmViewapproveal)(serUrl, param));
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			var bpm = nextProps.bpm;

			if (bpm.type != null && bpm.type == "bpmviewapproveal") {
				var history = bpm.view;
				if (history.success) {
					console.log(history);
					var data = history.data.array;
					var title = history.data.processDefinitionName;
					this.setState({
						historyContent: data,
						title: title
					});
				}
			}
		}
	}, {
		key: 'hideModal',
		value: function hideModal(e) {
			this.props.closeRecord(e);
		}
	}, {
		key: 'handleOk',
		value: function handleOk(e) {
			this.hideModal();
		}
	}, {
		key: 'render',
		value: function render() {
			var _state = this.state,
			    historyContent = _state.historyContent,
			    title = _state.title;

			var historyDatas = [];
			if (historyContent) {
				for (var i = 0; i < historyContent.length; i++) {
					historyDatas.push({
						key: i,
						activityName: historyContent[i].activityName,
						taskStartTime: historyContent[i].taskStartTime,
						approveState: historyContent[i].approveState,
						approveDatetime: historyContent[i].approveDatetime,
						approveDuration: historyContent[i].approveDuration,
						approveComment: historyContent[i].approveComment,
						approveUserName: historyContent[i].approveUserName,
						state: historyContent[i].state
					});
				}
			}
			title = title != null ? "-----" + title : "";
			var modalName = "查看审批记录" + title;
			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					YYModal,
					{ style: { top: 50 }, title: modalName, closable: false, width: 650, visible: this.state.visible, onCancel: this.hideModal, onOk: this.handleOk },
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							_reactCustomScrollbars.Scrollbars,
							{ style: { height: 400 } },
							_react2.default.createElement(
								YYTimeline,
								null,
								historyDatas.map(function (s, i) {
									return s.approveState == "审批中" ? _react2.default.createElement(
										YYTimelineItem,
										{ color: 'blue', className: 'yyui-bpm-view-approving' },
										_react2.default.createElement(
											'p',
											null,
											s.taskStartTime,
											'   ',
											"历时" + s.approveDuration
										),
										_react2.default.createElement(
											'p',
											null,
											s.approveUserName + " 在【" + s.activityName + "】环节，当前状态为：" + s.approveState
										)
									) : _react2.default.createElement(
										YYTimelineItem,
										{ color: '#c1c1c1', className: 'yyui-bpm-view-approved' },
										_react2.default.createElement(
											'p',
											null,
											s.taskStartTime,
											'   ',
											"历时" + s.approveDuration
										),
										_react2.default.createElement(
											'p',
											null,
											s.approveUserName + " 在【" + s.activityName + "】环节，当前状态为：" + (s.state == "" ? s.approveState : s.state) + "，审批意见【" + s.approveComment + "】。"
										)
									);
								})
							)
						)
					)
				)
			);
		}
	}]);

	return ViewRecord;
}(_react2.default.Component);

module.exports = (0, _reactRedux.connect)(mapStateToProps)(ViewRecord);