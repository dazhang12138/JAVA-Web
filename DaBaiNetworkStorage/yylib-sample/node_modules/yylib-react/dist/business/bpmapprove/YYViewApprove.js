'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./bpm/styles/less/bpmviewapproveal.less');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _antd = require('antd');

var _BPMURL = require('./bpm/url/BPMURL');

var _BPMURL2 = _interopRequireDefault(_BPMURL);

var _reactCustomScrollbars = require('react-custom-scrollbars');

var _reactRedux = require('react-redux');

var _bpm = require('./bpm/actions/bpm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _require = require('yylib-ui'),
    YYSelect = _require.YYSelect;

var ajax = require('yylib-utils/ajax');
var Step = _antd.Timeline.Item;
var pageSize = 5;
var _this = null;
var mapStateToProps = function mapStateToProps(state) {
  return {
    bpm: state.bpm
  };
};
//规范属性类型
var propTypes = {
  bpmObject: _react2.default.PropTypes.object,
  dispatch: _react2.default.PropTypes.func
};

var YYViewApprove = function (_React$Component) {
  _inherits(YYViewApprove, _React$Component);

  function YYViewApprove(props) {
    _classCallCheck(this, YYViewApprove);

    var _this2 = _possibleConstructorReturn(this, (YYViewApprove.__proto__ || Object.getPrototypeOf(YYViewApprove)).call(this, props));

    _this2.handleOk = _this2.handleOk.bind(_this2);
    _this2.count = 0;
    _this2.bpmIdList = [];
    _this2.countItems = [];
    _this2.state = {
      visible: false,
      viewapprovealData: null,
      showHistory: null,
      bpmId: null
    };
    return _this2;
  }

  _createClass(YYViewApprove, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          dispatch = _props.dispatch,
          showViewApprove = _props.showViewApprove,
          userId = _props.userId,
          bpmId = _props.bpmId,
          billId = _props.billId,
          serUrl = _props.serUrl,
          bpmIdList = _props.bpmIdList,
          count = _props.count,
          countItems = _props.countItems;

      _this = this;
      this.setState({
        visible: showViewApprove,
        userId: userId,
        bpmId: bpmId,
        billId: billId,
        serUrl: serUrl
      });
      var url = serUrl + "/icop-bpmcenter-web/bpm/getBpmIds";
      var params = {
        billId: billId
      };
      if (billId) {
        ajax.getJSON(url, params, null, null, function (data) {
          if (data != null && data.status == 200) {
            var backData = eval("(" + data.text + ")");
            _this.bpmIdList = backData.bpmIdList;
            if (_this.bpmIdList.length >= 1) {
              _this.setState({
                bpmId: _this.bpmIdList[0]
              });
              _this.count = _this.bpmIdList.length;
              for (var i = _this.count; i >= 1; i--) {
                var countItem = {};
                countItem.text = i;
                countItem.value = _this.count - i;
                _this.countItems.push(countItem);
              }
              var _data = {
                userId: userId ? userId : null,
                bpmId: bpmId ? bpmId : null,
                billId: billId,
                isFinish: false
              };
              dispatch((0, _bpm.bpmSingleViewapproveal)(serUrl, _data));
            } else {
              _antd.message.info("没有审批历史", 2);
            }
          } else {
            _antd.message.info("服务不通，请检查网络问题", 2);
          }
        });
      } else if (bpmId) {
        this.count = 1;
        this.bpmIdList[0] = bpmId;
        this.countItems.push({ value: 1, text: 1 });
        var data = {
          userId: userId ? userId : null,
          bpmId: bpmId ? bpmId : null,
          isFinish: false
        };
        dispatch((0, _bpm.bpmSingleViewapproveal)(serUrl, data));
      }
    }

    //数据更新后通知此方法

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var bpm = nextProps.bpm;

      var data = null;
      var type = null;
      if (bpm && bpm.type && bpm.view) {
        type = bpm.type;
        data = bpm.view;
      }

      if (data) {
        if (data.success != undefined) {
          if (data.success) {
            if (type != null && type == "bpmviewapproveal") {
              //查看审批流
              var viewapprovealData = [];
              viewapprovealData['processInstanceId'] = this.state.bpmId;
              viewapprovealData['approveHistorys'] = data.data.array;
              viewapprovealData['total'] = data.data.total;
              viewapprovealData['processDefinitionName'] = data.data.processDefinitionName;
              this.setState({ viewapprovealData: viewapprovealData });
            }
          }
        }
      }
    }
  }, {
    key: 'handleOk',
    value: function handleOk() {
      this.props.closeMethod();
    }
  }, {
    key: 'handleCancel',
    value: function handleCancel() {
      this.props.closeMethod();
    }

    //审批历史

  }, {
    key: 'operateHistory',
    value: function operateHistory(e) {
      var flag = !this.state.showHistory;
      this.setState({ showHistory: flag });
    }
  }, {
    key: 'selectOnchange',
    value: function selectOnchange(e) {
      if (!e) {

        var data = {
          userId: _this.props.userId,
          bpmId: _this.bpmIdList[e],
          isFinish: false
        };

        _this.props.dispatch((0, _bpm.bpmSingleViewapproveal)(_this.props.serUrl, data));
      } else {
        var _data2 = {
          userId: _this.props.userId,
          bpmId: _this.bpmIdList[e],
          isFinish: true
        };

        _this.props.dispatch((0, _bpm.bpmSingleViewapproveal)(_this.props.serUrl, _data2));
      }

      _this.setState({

        bpmId: _this.bpmIdList[e]

      });
    }
  }, {
    key: 'render',
    value: function render() {
      var viewdata = this.state.viewapprovealData ? this.state.viewapprovealData : null;
      var diagramSrc = null;
      var _props2 = this.props,
          userId = _props2.userId,
          serUrl = _props2.serUrl;

      var historyContent = null;
      var processInstanceId = null;
      var total = 0;
      var processDefinitionName = '流程名称';
      if (viewdata) {
        processInstanceId = viewdata.processInstanceId;
        if (processInstanceId) {
          diagramSrc = serUrl + _BPMURL2.default.BPM_VIEWAPPROVEAL_VIEWURL + "/index.html?" + "processInstanceId=" + _this.state.bpmId + "&userId=" + userId;
        }

        historyContent = viewdata.approveHistorys;
        total = viewdata.total;
        processDefinitionName = viewdata.processDefinitionName;
      }
      var title = "查看审批流 -- " + processDefinitionName;
      var histData = [];
      if (historyContent) {
        for (var i = 0; i < historyContent.length; i++) {
          var item = null;
          switch (historyContent[i].state) {
            case "completed":
              item = [_react2.default.createElement(
                Step,
                { color: 'black', className: 'yyui-bpm-view-effective' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "，审批意见【" + historyContent[i].approveComment + "】。"
                )
              )];
              console.log(historyContent[i].state);
              break;
            case "delete":
              item = [_react2.default.createElement(
                Step,
                { color: '#c1c1c1', className: 'yyui-bpm-view-invalid' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + (historyContent[i].approveComment == "" ? "。" : "，审批意见【" + historyContent[i].approveComment + "】。")
                )
              )];
              break;
            case "ACTIVITI_DELETED":
              item = [_react2.default.createElement(
                Step,
                { color: 'black', className: 'yyui-bpm-view-effective' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "，审批意见【" + historyContent[i].approveComment + "】。"
                )
              )];
              break;
            case "disagree_continue":
              item = [_react2.default.createElement(
                Step,
                { color: 'black', className: 'yyui-bpm-view-effective' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "，审批意见【" + historyContent[i].approveComment + "】。"
                )
              )];
              break;
            case "deleted":
              item = [_react2.default.createElement(
                Step,
                { color: '#c1c1c1', className: 'yyui-bpm-view-invalid' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "。"
                )
              )];
              break;
            case "reject":
              item = [_react2.default.createElement(
                Step,
                { color: '#c1c1c1', className: 'yyui-bpm-view-invalid' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "，审批意见【" + historyContent[i].approveComment + "】。"
                )
              )];
              break;
            case "withdraw":
              item = [_react2.default.createElement(
                Step,
                { color: '#c1c1c1', className: 'yyui-bpm-view-invalid' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "。"
                )
              )];
              break;
            case "stop":
              item = [_react2.default.createElement(
                Step,
                { color: 'black', className: 'yyui-bpm-view-effective' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "，审批意见【" + historyContent[i].approveComment + "】。"
                )
              )];
              break;
            case "callback":
              item = [_react2.default.createElement(
                Step,
                { color: 'black', className: 'yyui-bpm-view-effective' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "。"
                )
              )];
              break;
            default:
              item = [_react2.default.createElement(
                Step,
                { color: 'blue', className: 'yyui-bpm-view-approving' },
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].taskStartTime,
                  '   ',
                  "历时" + historyContent[i].approveDuration
                ),
                _react2.default.createElement(
                  'p',
                  null,
                  historyContent[i].approveUserName + " 在【" + historyContent[i].activityName + "】环节，当前状态为：" + historyContent[i].approveState + "。"
                )
              )];
              break;
          }
          histData.push(item);
        }
      }
      var bpmId = null;
      bpmId = this.state.bpmId ? this.state.bpmId : null;

      var closable = false;
      return _react2.default.createElement(
        'div',
        { className: 'bpmviewapproveal-comp' },
        _react2.default.createElement(
          _antd.Modal,
          { width: '900', className: 'bpmviewapproveal-modal', title: title, closable: closable, visible: this.state.visible, onOk: this.handleOk.bind(this),
            footer: [_react2.default.createElement(
              _antd.Button,
              { key: 'submit', type: 'primary', size: 'large', onClick: this.handleOk.bind(this) },
              '\u5173\u95ED'
            )]
          },
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(
              'span',
              null,
              '\u7B2C',
              _react2.default.createElement(YYSelect, { onChange: this.selectOnchange, items: this.countItems, style: { width: 20, marginLeft: 5, marginRight: 5 }, defaultValue: this.count }),
              '\u6B21\u5BA1\u6279\u8BB0\u5F55'
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'bpmvoewapproveal-content', style: { marginTop: 10 } },
            _react2.default.createElement(
              _antd.Row,
              null,
              _react2.default.createElement(
                _antd.Col,
                null,
                _react2.default.createElement(
                  'div',
                  { className: '' },
                  _react2.default.createElement('iframe', { className: 'bpmvoewapproveal-iframe', frameborder: '1', scrolling: 'yes', src: diagramSrc })
                )
              )
            ),
            _react2.default.createElement(
              _antd.Row,
              null,
              _react2.default.createElement(
                _antd.Col,
                null,
                _react2.default.createElement(
                  'div',
                  { className: '' },
                  _react2.default.createElement(
                    _reactCustomScrollbars.Scrollbars,
                    { style: { height: 200 } },
                    _react2.default.createElement(
                      _antd.Timeline,
                      null,
                      histData.map(function (s, i) {
                        return _react2.default.createElement(
                          'div',
                          { className: 'selectItem' + i },
                          s
                        );
                      })
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return YYViewApprove;
}(_react2.default.Component);
//export default ViewapprovealComp;


YYViewApprove.propTypes = propTypes;
module.exports = (0, _reactRedux.connect)(mapStateToProps)(YYViewApprove);