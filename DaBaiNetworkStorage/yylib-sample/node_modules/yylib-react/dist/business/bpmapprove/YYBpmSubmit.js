'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _antd = require('antd');

var _reactCustomScrollbars = require('react-custom-scrollbars');

var _reactRedux = require('react-redux');

require('./bpm/styles/less/yyapproveuser.less');

var _bpm = require('./bpm/actions/bpm');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by gaoyangk on 2017/2/10.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var _require = require('yylib-ui'),
    YYButton = _require.YYButton,
    YYModal = _require.YYModal,
    YYTable = _require.YYTable,
    YYMessage = _require.YYMessage,
    YYForm = _require.YYForm,
    YYFormItem = _require.YYFormItem,
    YYInput = _require.YYInput;

var ajax = require('yylib-utils/ajax');
var TabPane = _antd.Tabs.TabPane;
var mapStateToProps = function mapStateToProps(state) {
	return {
		bpm: state.bpm
	};
};
//规范属性类型
var propTypes = {
	dispatch: _react2.default.PropTypes.func
};
var pageSize = 5;

var YYBpmSubmit = function (_React$Component) {
	_inherits(YYBpmSubmit, _React$Component);

	function YYBpmSubmit(props) {
		_classCallCheck(this, YYBpmSubmit);

		var _this2 = _possibleConstructorReturn(this, (YYBpmSubmit.__proto__ || Object.getPrototypeOf(YYBpmSubmit)).call(this, props));

		_this2.state = {
			visible: false,
			title: null,
			showTab: false,

			options: false,
			assginable: false,
			currentPage: 1,
			userId: null,
			billTypeId: null,
			activeKey: null,
			selectedItem: [],
			comfirmAble: false
		};
		_this2.cancel = _this2.cancel.bind(_this2);
		_this2.close = _this2.close.bind(_this2);
		_this2.comfirm = _this2.comfirm.bind(_this2);
		_this2.nextStep = _this2.nextStep.bind(_this2);

		_this2.onTableClick = _this2.onTableClick.bind(_this2);
		_this2.getProcData = _this2.getProcData.bind(_this2);

		_this2.renderItem = _this2.renderItem.bind(_this2);
		_this2.handleChange = _this2.handleChange.bind(_this2);
		_this2.onChangeTab = _this2.onChangeTab.bind(_this2);
		_this2.onSelectTable = _this2.onSelectTable.bind(_this2);
		return _this2;
	}

	_createClass(YYBpmSubmit, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _props = this.props,
			    subParam = _props.subParam,
			    serUrl = _props.serUrl,
			    dispatch = _props.dispatch;

			var userId = subParam.userId;
			var billTypeId = subParam.billtypeId;
			var orgId = subParam.bill.companyId;
			var billId = subParam.bill.billId;
			this.setState({
				userId: userId
			});
			var params = {
				orgId: subParam.bill.companyId,
				billTypeId: subParam.billtypeId,
				billTypeCode: subParam.billTypeCode,
				userId: subParam.userId,
				billId: billId
			};
			var _this = this;
			var url = serUrl + "/icop-bpmcenter-web/bpm/beforeSubmit";
			ajax.postJSON(url, params, null, function (error) {
				YYMessage.error("网络异常，稍后重试！");
				var data = {
					method: "close",
					success: false,
					msg: "网络异常，稍后重试！"
				};
				_this.close(data);
			}, function (data) {
				if (data != null && data.status == 200) {
					var param = eval("(" + data.text + ")");
					var title = "";
					if (param != null) {
						var showTab = param.data.showTab ? param.data.showTab : false;
						var visible = param.show;
						var prokey = param.data.prokey != null ? param.data.prokey : "";
						var procInstName = param.procInstName;
						var subable = param.subable;
						if (subable == false) {
							YYMessage.error(param.msg);
							var _data = {
								method: "close",
								success: false,
								msg: param.msg
							};
							_this.close(_data);
							return;
						}
						// if (!visible) {
						// 	let backData ={
						// 		prokey:prokey,
						// 		subable:subable,
						// 		procInstName:procInstName
						// 	};
						// 	_this.setState({
						// 		subable:subable,
						// 		prokey:prokey,
						// 		procInstName:procInstName
						// 	});
						//
						// 	_this.comfirm(backData);
						// 	return;
						// }
						// if(showTab == true){
						//     title="选择下一个环节的参与者"
						//   	let param = {
						// 			userId:userId,
						// 			prockey:prokey,
						// 		};
						// 		dispatch(getAssignByProckey(serUrl,param));
						// }else{
						title = "提交";
						var proc = {
							size: pageSize,
							page: 1,
							userId: userId,
							billTypeId: billTypeId,
							orgId: orgId,
							searchText: ""

						};
						dispatch((0, _bpm.getConfigList)(serUrl, proc));
						// }
						_this.setState({
							visible: visible,
							title: title,
							billTypeId: billTypeId,
							serUrl: serUrl,
							showTab: false,
							prokey: prokey,
							subable: subable,
							procInstName: procInstName
						});
					}
				}
			});
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			var bpm = nextProps.bpm;

			if (bpm != null && bpm.config != null && bpm.config.data != null && bpm.type == "getConfigList") {
				var configData = bpm.config.data;
				if (configData.length == 1) {
					var dispatch = this.props.dispatch;

					var param = {
						userId: this.state.userId,
						prockey: configData[0].prokey
					};
					dispatch((0, _bpm.getAssignByProckey)(this.state.serUrl, param));
				}
			}
			if (bpm != null && bpm.user != null) {
				if (bpm.user.data != null && bpm.user.data.length > 0) {
					this.setState({
						activeKey: bpm.user.data[0].activityId
					});
					var keys = [];
					for (var i = 0; i < bpm.user.data.length; i++) {
						var activeKey = bpm.user.data[i].activityId;
						var item = {
							activeKey: activeKey
						};
						keys.push(item);
					}
					this.setState({
						selectedItem: keys
					});
				}
			}
			if (bpm != null && bpm.data != null) {
				if (bpm.type == "dosubmit") {
					var backdata = bpm.data;
					if (backdata.success == true) {
						YYMessage.success(backdata.msg);
						var data = {
							method: "close",
							success: true,
							msg: backdata.msg
						};
						this.close(data);
					} else {
						YYMessage.error(backdata.msg);
						var _data2 = {
							method: "close",
							success: false,
							msg: backdata.msg
						};
						this.close(_data2);
					}
				}
			}
		}
	}, {
		key: 'cancel',
		value: function cancel() {
			var data = {
				method: "cancel",
				success: false,
				msg: "关闭窗体"
			};
			this.props.close(data);
		}
	}, {
		key: 'close',
		value: function close(data) {
			this.props.close(data);
		}
	}, {
		key: 'comfirm',
		value: function comfirm(e) {
			var _state = this.state,
			    prokey = _state.prokey,
			    selectedItem = _state.selectedItem,
			    subable = _state.subable,
			    serUrl = _state.serUrl,
			    procInstName = _state.procInstName;

			var procInst = this.props.form.getFieldsValue();
			if (procInst && procInst.procInstName) {
				procInstName = procInst.procInstName;
			} else {
				_antd.message.info("请输入流程主题！");
				return;
			}
			var configData = this.props.bpm.config.data;

			if (configData.length == 1) {
				prokey = configData[0].prokey;
			}
			if (prokey == null || prokey == "") {
				_antd.message.info('请选择需要提交的流程！');
				return;
			}

			if (!serUrl) {
				serUrl = this.props.serUrl;
			}
			var assignAble = false;
			if (prokey == null || prokey == "") {
				prokey = e.prokey;
			}
			var bpm = this.props.bpm;

			if (bpm != null && bpm.user != null && bpm.user.data != null && bpm.user.data.length > 0) {
				for (var i = 0; i < selectedItem.length; i++) {
					if (selectedItem[i].targetKeys == null || selectedItem[i].targetKeys < 1) {
						_antd.message.info('请选择下一个环节的参与者！');
						assignAble = false;
						return;
					}
				}
				assignAble = true;
			}

			var _props2 = this.props,
			    subParam = _props2.subParam,
			    dispatch = _props2.dispatch;

			subParam.prockey = prokey;
			subParam.assign = selectedItem;
			subParam.assignAble = assignAble;
			if (procInstName && procInstName != "") {
				subParam.procInstName = procInstName;
			}
			this.setState({
				comfirmAble: true
			});
			dispatch((0, _bpm.doSubmit)(serUrl, subParam));

			// this.props.comfirm(data);
		}
	}, {
		key: 'nextStep',
		value: function nextStep() {
			var procInst = this.props.form.getFieldsValue();
			if (procInst && procInst.procInstName) {} else {
				_antd.message.info("请输入流程主题！");
				return;
			}
			if (this.state.activeKey) {
				this.setState({
					showTab: true,
					title: "选择下一个环节的参与者"
				});
			}
		}
	}, {
		key: 'getProcData',
		value: function getProcData(current) {
			this.setState({
				currentPage: current
			});
			var _state2 = this.state,
			    billTypeId = _state2.billTypeId,
			    serUrl = _state2.serUrl,
			    userId = _state2.userId;
			var _props3 = this.props,
			    dispatch = _props3.dispatch,
			    subParam = _props3.subParam;

			var proc = {
				size: pageSize,
				page: current,
				userId: userId,
				billTypeId: billTypeId,
				orgId: subParam.bill.companyId,
				searchText: ""

			};
			this.setState({
				selectedRowKeys: null
			});
			dispatch((0, _bpm.getConfigList)(serUrl, proc));
		}
	}, {
		key: 'onTableClick',
		value: function onTableClick(record, index) {
			var _state3 = this.state,
			    serUrl = _state3.serUrl,
			    userId = _state3.userId;
			var dispatch = this.props.dispatch;

			var data = [index];
			this.setState({
				selectedRowKeys: data,
				prokey: record.prokey,
				showTab: false,
				activeKey: null
			});

			var param = {
				userId: userId,
				prockey: record.prokey
			};
			dispatch((0, _bpm.getAssignByProckey)(serUrl, param));
		}

		//指派相关

	}, {
		key: 'renderItem',
		value: function renderItem(item) {
			var customLabel = _react2.default.createElement(
				'span',
				{ className: 'yyui-bpm-custom-item', title: item.title },
				item.title,
				'\xA0\xA0\xA0\xA0\xA0\xA0',
				item.description
			);

			return {
				label: customLabel, // for displayed item
				value: item.title // for title and filter matching
			};
		}
	}, {
		key: 'handleChange',
		value: function handleChange(targetKeys, direction, moveKeys) {
			var _state4 = this.state,
			    activeKey = _state4.activeKey,
			    selectedItem = _state4.selectedItem;

			if (selectedItem.length > 0) {
				for (var i = 0; i < selectedItem.length; i++) {
					if (activeKey == selectedItem[i].activeKey) {
						selectedItem[i].targetKeys = targetKeys;
					}
				}
			}
			this.setState({
				selectedItem: selectedItem
			});
		}
	}, {
		key: 'onChangeTab',
		value: function onChangeTab(activeKey) {
			this.setState({ activeKey: activeKey });
		}
	}, {
		key: 'onSelectTable',
		value: function onSelectTable(record, selected, selectedRows) {
			this.onTableClick(record, record.indexForSort);
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this,
			    _React$createElement;

			//选择流程
			var data = [];
			var getFieldProps = this.props.form.getFieldProps;

			var tableTotal = 0;
			var columns = [{
				title: '流程编号',
				dataIndex: 'prokey'
			}, {
				title: '流程名称',
				dataIndex: 'processName'
			}, {
				title: '流程设计组织',
				// color:'#f00',//自定义文本颜色
				dataIndex: 'orgName'
			}, {
				title: '流程目录',
				// color:'#f00',//自定义文本颜色
				dataIndex: 'categoryName'
			}];
			var selectedRowKeys = this.state.selectedRowKeys;

			var rowSelection = {
				selectedRowKeys: selectedRowKeys,
				onSelect: this.onSelectTable
			};
			var bpm = this.props.bpm;

			if (bpm != null && bpm.config != null) {
				data = bpm.config.data;
				tableTotal = bpm.config.total;
			}
			var pagination = {
				total: tableTotal,
				showSizeChanger: false,
				pageSize: 5,
				current: this.state.currentPage,
				onChange: this.getProcData
			};

			//指派信息
			var titles = ["待选审批人", "已选审批人"];
			var assignList = [];
			if (bpm != null && bpm.user != null) {
				var assign = bpm.user;
				if (assign.assignAble) {
					assignList = assign.data;
				}
			}

			for (var i = 0; i < assignList.length; i++) {
				var participants = assignList[i].participants;
				var mockData = [];
				for (var j = 0; j < participants.length; j++) {
					var _data3 = {
						key: participants[j].id,
						title: participants[j].name,
						description: participants[j].code

					};
					mockData.push(_data3);
				}
				assignList[i].mockData = mockData;
				var _state5 = this.state,
				    activeKey = _state5.activeKey,
				    selectedItem = _state5.selectedItem;

				for (var m = 0; m < selectedItem.length; m++) {
					if (selectedItem[m].activeKey == assignList[i].activityId) {
						if (typeof selectedItem[m].targetKeys != "undefined") {
							assignList[i].selectKey = selectedItem[m].targetKeys;
						} else {
							assignList[i].selectKey = [];
						}
					}
				}
			}
			var footerButton = [];
			if (this.state.activeKey != null) {
				footerButton = [_react2.default.createElement(
					YYButton,
					{ onClick: this.cancel },
					'\u53D6\u6D88'
				), _react2.default.createElement(
					YYButton,
					{ type: 'primary', onClick: this.nextStep },
					'\u4E0B\u4E00\u6B65'
				)];
			} else {
				footerButton = [_react2.default.createElement(
					YYButton,
					{ onClick: this.cancel },
					'\u53D6\u6D88'
				), _react2.default.createElement(
					YYButton,
					{ type: 'primary', disabled: this.state.comfirmAble, onClick: this.comfirm },
					'\u786E\u5B9A'
				)];
			}
			if (this.state.showTab) {
				footerButton = [_react2.default.createElement(
					YYButton,
					{ onClick: this.cancel },
					'\u53D6\u6D88'
				), _react2.default.createElement(
					YYButton,
					{ type: 'primary', disabled: this.state.comfirmAble, onClick: this.comfirm },
					'\u786E\u5B9A'
				)];
			}
			var subInstName = "";
			if (this.props.subParam && this.props.subParam.procInstName) {
				subInstName = this.props.subParam.procInstName;
			}

			var procInstName = getFieldProps('procInstName', {
				initialValue: this.state.procInstName != null && this.state.procInstName != "" ? this.state.procInstName : subInstName
			});
			var formItemLayout = {
				labelCol: { span: 4 },
				wrapperCol: { span: 20 }
			};
			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					YYModal,
					(_React$createElement = { ref: 'modal',
						visible: this.state.visible,
						closable: false,
						width: 580,
						title: this.state.title
					}, _defineProperty(_React$createElement, 'closable', true), _defineProperty(_React$createElement, 'onCancel', this.cancel), _defineProperty(_React$createElement, 'footer', footerButton), _React$createElement),
					!this.state.showTab ? _react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							'div',
							{ className: 'yyui-bpm-submit-subject' },
							_react2.default.createElement(
								YYForm,
								{ inline: true },
								_react2.default.createElement(
									YYFormItem,
									_extends({
										label: '\u4E3B\u9898'
									}, formItemLayout),
									_react2.default.createElement(YYInput, _extends({ placeholder: '\u8BF7\u8F93\u5165\u4E3B\u9898' }, procInstName))
								)
							)
						),
						_react2.default.createElement(
							_reactCustomScrollbars.Scrollbars,
							{ style: { height: 350 } },
							_react2.default.createElement(YYTable, { rowSelection: rowSelection, dataSource: data, onSelect: this.onSelectTable, pagination: pagination, columns: columns })
						)
					) : null,
					this.state.showTab ? _react2.default.createElement(
						'div',
						null,
						_react2.default.createElement(
							_antd.Tabs,
							{
								ref: 'tabs',
								type: 'card',
								onChange: this.onChangeTab },
							assignList.map(function (pane) {
								return _react2.default.createElement(
									TabPane,
									{ tab: pane.activityName, key: pane.activityId },
									_react2.default.createElement(_antd.Transfer, {
										className: 'yyui-bpm-custom',
										dataSource: pane.mockData,
										listStyle: {
											width: 250,
											height: 300
										},
										'data-id': pane.activityId,
										titles: titles,
										targetKeys: pane.selectKey,
										onChange: _this3.handleChange,
										render: _this3.renderItem })
								);
							})
						)
					) : null
				)
			);
		}
	}]);

	return YYBpmSubmit;
}(_react2.default.Component);

YYBpmSubmit = YYForm.create()(YYBpmSubmit);
YYBpmSubmit.propTypes = propTypes;
module.exports = (0, _reactRedux.connect)(mapStateToProps)(YYBpmSubmit);