'use strict';

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('yylib-ui'),
    YYClass = _require2.YYClass,
    YYForm = _require2.YYForm,
    YYPage = _require2.YYPage,
    YYAccordion = _require2.YYAccordion,
    YYRow = _require2.YYRow;

var _require3 = require('yylib-business/templates/compact'),
    CPCardHeader = _require3.CPCardHeader,
    CPCardBody = _require3.CPCardBody,
    CPDropdownButton = _require3.CPDropdownButton,
    CPCardTitle = _require3.CPCardTitle;

var MDPrintAudit = require('./MDPrintAudit');
var _ = require('lodash');
var BaseForm = require('./MDCardForm');
var EditTable = require('./MDCardEditTable');
var PrintCardForm = require('./PrintCardForm');

var _require4 = require('./MDHandler'),
    PageHandler = _require4.PageHandler,
    getHandler = _require4.getHandler,
    getCardfeatureMeta = _require4.getCardfeatureMeta,
    getContentMeta = _require4.getContentMeta;

require('./mdprintpage.less');
var api = {
    esstore: require('yylib-business/quickdev/api.esstore')
};
/** 预览页面从redux和传参中取值，
 使用页面从props中取值 */
var mapStateToProps = function mapStateToProps(state, props) {
    var resourceData = state.ide.resourceData ? state.ide.resourceData : props.uiResource;
    return {
        resourceData: resourceData,
        lastTime: state.ide.lastTime,
        billType: resourceData.billType ? resourceData.billType.toLowerCase() : null,
        primaryKey: resourceData.uikey,
        cardfeatureMeta: getCardfeatureMeta(resourceData), //卡片特性配置
        contentMeta: getContentMeta(resourceData), //模型字段配置
        resourceCode: props.resourceCode.toLowerCase(),
        appCode: props.appCode.toLowerCase(),
        mdindex: resourceData.mdindex ? resourceData.mdindex : props.resourceCode.toLowerCase()
    };
};

var MDPrintCardPage = YYClass.create({
    getInitialState: function getInitialState() {
        return {
            hidePrintBtn: false
        };
    },
    _renderCardTitle: function _renderCardTitle() {
        return React.createElement(
            YYRow,
            { className: 'card-header' },
            this.props.cardfeatureMeta.cardtitle
        );
        // return <CPCardTitle title={this.props.cardfeatureMeta.cardtitle}/>
    },
    _renderToolbar: function _renderToolbar() {
        var _this = this;

        return React.createElement(
            YYRow,
            { className: 'card-toolbar' },
            [React.createElement(CPDropdownButton, { text: '\u6253\u5370', onClick: function onClick() {
                    _this.setState({ hidePrintBtn: true }, function () {
                        window.print();
                        _this.setState({ hidePrintBtn: false });
                    });
                } })]
        );
    },
    _getAccordionMetas: function _getAccordionMetas(contentMeta) {
        var formMetas = { baseform: { children: [] } };
        _.forEach(contentMeta, function (meta) {
            if (meta.uisubtype == 'accordion') {
                formMetas[meta.uikey] = meta;
            } else {
                formMetas['baseform'].children.push(meta);
                formMetas['baseform'].uisubtype = 'accordion';
                formMetas['baseform'].uititle = '基本信息';
                formMetas['baseform'].uikey = 'baseform';
            }
        });
        return formMetas;
    },
    _renderAccordion: function _renderAccordion(accordionMeta) {
        var tables = [];
        //解析一个分组中的编辑表格
        _.forEach(accordionMeta.children, function (field, index) {
            if (field.uisubtype == 'edittable') {
                tables.push(React.createElement(EditTable, { isPrint: true, ref: '__edittable__' + field.uikey, fields: field.children }));
            }
        });
        //排除掉分组中的编辑表格meta
        var formMetas = _.filter(accordionMeta.children, function (field) {
            return field.uisubtype !== 'edittable';
        });
        var accordions = [];
        accordions.push(React.createElement(
            YYRow,
            { className: 'card-title' },
            accordionMeta.uititle
        ));
        accordions.push(React.createElement(
            YYRow,
            null,
            formMetas && formMetas.length ? React.createElement(PrintCardForm, { fields: formMetas, ref: '__form__' + accordionMeta.uikey }) : null,
            tables
        ));
        // return <YYAccordion header={accordionMeta.uititle} isOpen={true} key={accordionMeta.uikey}>
        //     {/*{formMetas && formMetas.length ? <BaseForm fields={formMetas} ref={`${accordionMeta.uikey}_form`}/> : null}*/}
        //     {formMetas && formMetas.length ? <PrintCardForm fields={formMetas} ref={`__form__${accordionMeta.uikey}`}/> : null}
        //     {tables}
        // </YYAccordion>
        return accordions;
    },
    // 审计组件
    _renderAuditView: function _renderAuditView() {
        var accordions = [];
        accordions.push(React.createElement(
            YYRow,
            { className: 'card-title' },
            '\u5BA1\u8BA1'
        ));
        accordions.push(React.createElement(
            YYRow,
            { className: 'md-print-audit' },
            React.createElement(MDPrintAudit, { ref: '__form__mdaudit', primaryKey: this.props.primaryKey, billType: this.props.billType })
        ));
        // return <div header="审计" isOpen={true} key='audit'>
        //     <CPAuditInfo primaryKey={this.props.primaryKey} billType={this.props.billType}/>
        // </div>
        return accordions;
    },
    _renderContentView: function _renderContentView() {
        var _this2 = this;

        var accordionMetas = this._getAccordionMetas(this.props.cardfeatureMeta.children);
        // var accordionMetas = this._getAccordionMetas(this.props.contentMeta.children)
        var accordions = [];
        _.forEach(accordionMetas, function (accordionMeta) {
            accordions.push(_this2._renderAccordion(accordionMeta));
        });
        //增加审计组件
        if (this.props.cardfeatureMeta.enableaudit) {
            accordions.push(this._renderAuditView());
        }
        return accordions;
    },
    componentDidMount: function componentDidMount() {
        var query = this.props.router.location.query;
        console.log('query', query);
        // api.esstore.getOne({
        //     "index":this.props.mdindex,
        //     "type":this.props.billType,
        //     "id":query.id,
        //     success: result => {
        //         console.log('result', result)
        //     }
        // })
        PageHandler.loadWithId.call(this, { id: query.id });
    },
    render: function render() {
        var query = this.props.router ? this.props.router.location.query : {};
        return React.createElement(
            YYPage,
            { className: 'md-print-page' },
            !this.state.hidePrintBtn ? this._renderToolbar() : null,
            this._renderCardTitle(),
            this._renderContentView()
        );
    }
});

BaseForm = YYForm.create()(BaseForm);
PrintCardForm = YYForm.create()(PrintCardForm);
module.exports = connect(mapStateToProps)(MDPrintCardPage);