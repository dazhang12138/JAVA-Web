'use strict';

var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYForm = _require.YYForm,
    YYPage = _require.YYPage,
    YYAccordion = _require.YYAccordion;

var _require2 = require('yylib-business/templates/compact'),
    CPCardHeader = _require2.CPCardHeader,
    CPCardBody = _require2.CPCardBody,
    CPGoBack = _require2.CPGoBack,
    CPDropdownButton = _require2.CPDropdownButton,
    CPCardTitle = _require2.CPCardTitle,
    CPBpmSubmit = _require2.CPBpmSubmit,
    CPBpmApprove = _require2.CPBpmApprove,
    CPAttachMgr = _require2.CPAttachMgr,
    CPAuditInfo = _require2.CPAuditInfo;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');
var api = { esstore: require('yylib-business/quickdev/api.esstore') };
var BaseForm = require('./MDCardForm');
var EditTable = require('./MDCardEditTable');
var ReduxUtils = require('yylib-utils/ReduxUtils');

var _require3 = require('./MDHandler'),
    PageHandler = _require3.PageHandler,
    getHandler = _require3.getHandler,
    getCardfeatureMeta = _require3.getCardfeatureMeta,
    getContentMeta = _require3.getContentMeta;

var MDPrintCardPage = require('./MDPrintCardPage');

/** 预览页面从redux和传参中取值，
    使用页面从props中取值 */
var mapStateToProps = function mapStateToProps(state, props) {
    var resourceData = state.ide.resourceData ? state.ide.resourceData : props.uiResource;

    return {
        resourceData: resourceData,
        lastTime: state.ide.lastTime,
        billType: resourceData.billType ? resourceData.billType.toLowerCase() : null,
        primaryKey: resourceData.uikey,
        cardfeatureMeta: getCardfeatureMeta(resourceData), //卡片特性配置
        contentMeta: getContentMeta(resourceData), //模型字段配置
        resourceCode: props.resourceCode.toLowerCase(),
        appCode: props.appCode.toLowerCase(),
        mdindex: resourceData.mdindex ? resourceData.mdindex : props.resourceCode.toLowerCase()
    };
};

//定义META
var uiMeta = {
    name: 'md-card-page',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('uiResource', null, PropTypes.object, true, '资源模型对象'), field('isView', false, PropTypes.bool, true, '是否预览状态')]
};

var MDCardPage = YYClass.create({
    uiMeta: uiMeta,
    _getAccordionMetas: function _getAccordionMetas(contentMeta) {
        var formMetas = { baseform: { children: [] } };
        _.forEach(contentMeta, function (meta) {
            if (meta.uisubtype == 'accordion') {
                formMetas[meta.uikey] = meta;
            } else {
                formMetas['baseform'].children.push(meta);
                formMetas['baseform'].uisubtype = 'accordion';
                formMetas['baseform'].uititle = '基本信息';
                formMetas['baseform'].uikey = 'baseform';
            }
        });
        return formMetas;
    },
    _renderAccordion: function _renderAccordion(accordionMeta) {
        var tables = [];
        //解析一个分组中的编辑表格
        _.forEach(accordionMeta.children, function (field, index) {
            if (field.uisubtype == 'edittablew') {
                tables.push(React.createElement(EditTable, { ref: '__edittable__' + field.uikey, fields: field.children, conf: field }));
            }
        });
        //排除掉分组中的编辑表格meta
        var formMetas = _.filter(accordionMeta.children, function (field) {
            return field.uisubtype !== 'edittablew';
        });
        //如果没有表单和编辑表格 不渲染此分组
        if (!formMetas.length && !tables.length) {
            return React.createElement('div', null);
        } else {
            return React.createElement(
                YYAccordion,
                { header: accordionMeta.uititle, isOpen: true, key: accordionMeta.uikey },
                formMetas && formMetas.length ? React.createElement(BaseForm, { fields: formMetas, ref: '__form__' + accordionMeta.uikey }) : null,
                tables
            );
        }
    },
    // 审计组件
    _renderAuditView: function _renderAuditView() {
        return React.createElement(
            YYAccordion,
            { header: '\u5BA1\u8BA1', isOpen: true, key: 'mdaudit' },
            React.createElement(CPAuditInfo, { ref: '__form__mdaudit', primaryKey: this.props.primaryKey, billType: this.props.billType })
        );
    },
    // 表单区域
    _renderContentView: function _renderContentView() {
        var _this = this;

        var accordionMetas = this._getAccordionMetas(this.props.cardfeatureMeta.children);
        var accordions = [];
        _.forEach(accordionMetas, function (accordionMeta) {
            accordions.push(_this._renderAccordion(accordionMeta));
        });
        //增加审计组件
        if (this.props.cardfeatureMeta.enableaudit) {
            accordions.push(this._renderAuditView());
        }
        return React.createElement(
            CPCardBody,
            null,
            accordions
        );
    },
    // 页面特性
    _renderToolbarView: function _renderToolbarView() {
        var toolbarBtns = [];
        var cardfeatureMeta = this.props.cardfeatureMeta;

        var query = this.props.router ? this.props.router.location.query : {};

        if (cardfeatureMeta.goBackBtn !== false) {
            toolbarBtns.push(React.createElement(CPGoBack, { title: '\u8FD4\u56DE', onClick: getHandler.call(this, 'back') }));
        }
        if (cardfeatureMeta.saveBtn !== false) {
            toolbarBtns.push(React.createElement(CPDropdownButton, { text: '\u4FDD\u5B58', onClick: getHandler.call(this, 'save', { id: query.id || null }) }));
        }
        if (cardfeatureMeta.copyBtn !== false) {
            toolbarBtns.push();
        }
        if (cardfeatureMeta.bpmSubmit !== false) {
            toolbarBtns.push(React.createElement(CPBpmSubmit, { uititle: '\u63D0\u4EA4' }));
        }
        if (cardfeatureMeta.bpmApprove !== false) {
            toolbarBtns.push(React.createElement(CPBpmApprove, { uititle: '\u5BA1\u6279' }));
        }
        if (cardfeatureMeta.printBtn !== false) {
            toolbarBtns.push(React.createElement(CPDropdownButton, { text: '\u6253\u5370\u9884\u89C8', onClick: getHandler.call(this, 'print', { id: query.id || null }) }));
        }
        if (cardfeatureMeta.attachMgr !== false) {
            toolbarBtns.push(React.createElement(CPAttachMgr, null));
        }

        toolbarBtns.push();
        return React.createElement(
            CPCardHeader,
            null,
            toolbarBtns
        );
    },
    _renderCardTitle: function _renderCardTitle() {
        return React.createElement(CPCardTitle, { title: this.props.cardfeatureMeta.cardtitle });
    },
    componentDidMount: function componentDidMount() {
        if (!this.props.isView) {
            var query = this.props.router.location.query;
            //加载详情
            if (query.id) {
                PageHandler.loadWithId.call(this, { id: query.id });
            }
            //新增时 设置默认值
            else {
                    // this.refs.form.setFieldsValue({})
                    PageHandler.setDefaultAuditFields.call(this, { id: query.id });
                }
        }
    },
    render: function render() {
        return React.createElement(
            YYPage,
            null,
            this._renderToolbarView(),
            this._renderCardTitle(),
            this._renderContentView()
        );
    }
});
BaseForm = YYForm.create()(BaseForm);
module.exports = ReduxUtils.connect(MDCardPage, mapStateToProps);