'use strict';

var api = {
    esstore: require('yylib-business/quickdev/api.esstore')
};

var _require = require('yylib-ui'),
    YYMessage = _require.YYMessage;

var TreeUtils = require('yylib-utils/TreeUtils');
var _ = require('lodash');
var AuthToken = require('yylib-utils/AuthToken');
var formatUtils = require('yylib-utils/formatUtils');
//取出卡片特性配置
var getCardfeatureMeta = function getCardfeatureMeta(uiResource) {
    var cardfeatureMeta = TreeUtils.findWithPropName(uiResource.children, 'uitype', 'cardfeature', true, true);
    return cardfeatureMeta[0] ? cardfeatureMeta[0] : {};
};

//模型字段配置
var getContentMeta = function getContentMeta(uiResource) {
    var contentMeta = TreeUtils.findWithPropName(uiResource.children, 'uitype', 'resmd', true, true);
    return contentMeta[0] ? contentMeta[0] : {};
};
//取出列表特性配置
var getListfeatureMeta = function getListfeatureMeta(uiResource) {
    var listfeatureMeta = TreeUtils.findWithPropName(uiResource.children, 'uitype', 'listfeature', true, true);
    return listfeatureMeta[0] ? listfeatureMeta[0] : {};
};

var PageHandler = {
    save: function save(options) {
        var _this = this;

        var values = {};
        _.forEach(this.refs, function (ref, key) {
            //取编辑表格的值
            if (key.indexOf('__edittable__') == 0) {
                values[key.substring('__edittable__'.length)] = ref.refs.edittable.getDataSource();
            }
            //取表单的值
            else if (key.indexOf('__form__') == 0) {
                    values[key.substring('__form__'.length)] = ref.getFieldsValue();
                }
            //取审计表单的值
            var fieldsValue = _this.refs.__form__mdaudit.getFieldsValue();
            var auditValues = _.assign({}, fieldsValue, { createtime: formatUtils.formatAntDate(fieldsValue['createtime']) });
            values['mdaudit'] = auditValues;
        });
        if (options.id) {
            api.esstore.update({
                "index": this.props.mdindex,
                "type": this.props.billType,
                "data": values,
                "id": options.id,
                "success": function success(result) {
                    if (result.success) {
                        YYMessage.success('保存成功');
                    } else {
                        YYMessage.error(result.backMsg);
                    }
                    _this.props.router.push('/pages/resource/MDListPage/' + _this.props.appCode + '/' + _this.props.resourceCode);
                }
            });
        } else {
            api.esstore.save({
                "index": this.props.mdindex,
                "type": this.props.billType,
                "data": values,
                "success": function success(result) {
                    if (result.success) {
                        YYMessage.success('保存成功');
                    } else {
                        YYMessage.error(result.backMsg);
                    }

                    _this.props.router.push('/pages/resource/MDListPage/' + _this.props.appCode + '/' + _this.props.resourceCode);
                }
            });
        }
    },
    loadList: function loadList() {
        var _this2 = this;

        api.esstore.queryList({
            "pageNumber": 0,
            "pageSize": 10,
            "index": this.props.mdindex,
            "type": this.props.billType,
            "success": function success(result) {
                if (result && result.success) {
                    if (result.backData) {
                        //便利结果集
                        var formObjects = _.map(result.backData.content, function (formObjects) {
                            var formObject = {};
                            //排除子表等不是对象类型的元素
                            _.forEach(formObjects, function (item, key) {
                                if (_.isPlainObject(item)) {
                                    formObject[key] = item;
                                }
                                if (key == 'id') {
                                    formObject[key] = item;
                                }
                            });

                            var rowData = {};
                            //因为分了多个form， 合并每个item对象的属性值到一个rowData对象上
                            _.forEach(formObject, function (item, key) {
                                if (key == 'id') {
                                    rowData[key] = item;
                                } else {
                                    rowData = _.assign(rowData, formObject[key]);
                                }
                            });
                            return rowData;
                        });
                        _this2.setState({ dataSource: formObjects });
                    }
                } else if (result && !result.success) {
                    YYMessage.error(result.backMsg);
                }
            },
            "error": function error(result) {
                console.log('error', result);
            }
        });
    },
    loadWithId: function loadWithId(options) {
        var _this3 = this;

        api.esstore.getOne({
            "index": this.props.mdindex,
            "type": this.props.billType,
            "id": options.id,
            success: function success(result) {
                if (result.success) {
                    _.forEach(result.backData, function (item, key) {
                        if (_.isPlainObject(item)) {
                            if (key == 'mdaudit') {
                                // item['createtime'] = new Date(item.createtime)
                            }
                            key = '__form__' + key;
                            if (_this3.refs[key]) {
                                _this3.refs[key].setFieldsValue(item);
                            }
                        } else if (_.isArray(item)) {
                            key = '__edittable__' + key;
                            if (_this3.refs[key]) {
                                _this3.refs[key].setDataSource(item);
                            }
                        }
                    });
                }
            }
        });
    },
    setDefaultAuditFields: function setDefaultAuditFields(options) {
        console.log('date ', formatUtils.formatAntDate(new Date()));
        this.refs.__form__mdaudit.setFieldsValue({
            createtime: new Date(),
            creator: AuthToken.getStaffName(),
            creatorid: AuthToken.getStaffId()
        });
    },
    back: function back() {
        this.props.router.push('/pages/resource/MDListPage/' + this.props.appCode + '/' + this.props.resourceCode);
    },
    print: function print(options) {
        this.props.router.push({ pathname: '/pages/resource/MDPrintCardPage/' + this.props.appCode + '/' + this.props.resourceCode, query: { id: options.id } });
    },
    editLineBtn: function editLineBtn(options) {
        this.props.router.push({ pathname: '/pages/resource/MDCardPage/' + this.props.appCode + '/' + this.props.resourceCode, query: { id: options.id } });
    },
    delLineBtn: function delLineBtn(options) {
        var _this4 = this;

        api.esstore.deleteOne({
            "index": this.props.mdindex,
            "type": this.props.billType,
            "id": options.id,
            success: function success(result) {
                if (result && result.success) {
                    YYMessage.success('删除成功');
                } else {
                    YYMessage.error(result.backMsg);
                }
                PageHandler.loadList.call(_this4);
            },
            error: function error() {
                YYMessage.error('请求错误');
            }
        });
    },
    delBtn: function delBtn() {
        var _this5 = this;

        api.esstore.deleteBatch({
            "index": this.props.mdindex,
            "type": this.props.billType,
            "ids": this.refs.listTable.getSelectedRowKeys(),
            success: function success(result) {
                if (result && result.success) {
                    YYMessage.success('删除成功');
                } else {
                    YYMessage.error(result.backMsg);
                }
                PageHandler.loadList.call(_this5);
            },
            error: function error() {
                YYMessage.error('请求错误');
            }
        });
    },
    addBtn: function addBtn() {
        this.props.router.push({ pathname: '/pages/resource/MDCardPage/' + this.props.appCode + '/' + this.props.resourceCode });
    },
    onSearch: function onSearch(value) {
        api.esstore.queryList({
            "index": this.props.mdindex,
            "type": this.props.billType,
            "searchText": value,
            success: function success(result) {
                console.log('result', result);
            },
            error: function error(result) {
                console.log('result', result);
            }
        });
    }
};

var getHandler = function getHandler(key, options) {
    if (this.props.isView) {
        return null;
    } else {
        return PageHandler[key].bind(this, _.assign({}, options));
    }
};

module.exports = {
    PageHandler: PageHandler,
    getHandler: getHandler,
    getContentMeta: getContentMeta,
    getCardfeatureMeta: getCardfeatureMeta,
    getListfeatureMeta: getListfeatureMeta
};