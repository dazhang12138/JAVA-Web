'use strict';

var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass;

var _require2 = require('yylib-business/widgets'),
    FormItemWidget = _require2.FormItemWidget,
    FormWidget = _require2.FormWidget;

var _ = require('lodash');

// 运行计算公式
function mathFormulaResult(mathFormula, rowData, defaultValue) {
    var formula = '' + mathFormula;
    _.forIn(rowData, function (value, key) {
        formula = formula.replace(new RegExp('{' + escape(key) + '}', 'gm'), value ? escape(value) : 0);
    });
    try {
        var result = eval(formula);
        return isNaN(result) ? null : result;
    } catch (error) {
        console.error('[公式计算出错]', { formula: formula, mathFormula: mathFormula, rowData: rowData, error: error });
    }
    return defaultValue;
};

var BaseForm = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            fields: null
        };
    },
    _getFactorFromFormula: function _getFactorFromFormula(mathFormula) {
        var r = new RegExp("\\{(.+?)\\}", "igm");
        return mathFormula.match(r);
    },
    render: function render() {
        var _this = this;

        var _props$form = this.props.form,
            getFieldProps = _props$form.getFieldProps,
            setFieldsValue = _props$form.setFieldsValue,
            getFieldsValue = _props$form.getFieldsValue;
        //获取计算公式处理

        var formulas = {};
        _.forEach(this.props.fields, function (field, index) {
            //计算公式处理
            if (field && field.mathFormula) {
                _.forEach(_this._getFactorFromFormula(field.mathFormula), function (fieldName) {
                    var formulaInfo = {
                        formula: field.mathFormula,
                        resultkey: field.uikey
                    };
                    formulas[fieldName.substring(1, fieldName.length - 1)] = formulaInfo;
                });
            }
        });
        // 页面字段
        var fieldCmps = [];
        _.forEach(this.props.fields, function (field, index) {
            //组件属性
            var _props = _.assign({}, field, { props: field.props }, getFieldProps(field.uikey), { label: field.uititle });
            if (_props.uisubtype == 'currency') {
                _props.type = 'currency';
            }
            // console.log('_props', _props)
            //如果有相关公式
            if (formulas[field.uikey]) {
                _props.onChange = function (value) {
                    var fieldsValue = getFieldsValue();
                    fieldsValue[field.uikey] = value;
                    fieldsValue[formulas[field.uikey].resultkey] = mathFormulaResult(formulas[field.uikey].formula, fieldsValue, 0);
                    setFieldsValue(fieldsValue);
                };
            }
            fieldCmps.push(React.createElement(FormItemWidget, _props));
        });
        return React.createElement(
            FormWidget,
            { colnumber: '2' },
            fieldCmps
        );
    }
});

module.exports = BaseForm;