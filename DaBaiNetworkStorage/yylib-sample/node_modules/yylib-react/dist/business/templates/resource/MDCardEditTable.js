'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYToolbar = _require.YYToolbar,
    YYButton = _require.YYButton,
    YYTablecol = _require.YYTablecol;

var _require2 = require('yylib-business/widgets'),
    EditTableWidget = _require2.EditTableWidget;

var _ = require('lodash');

var EditTable = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            fields: [],
            dataSource: [],
            isPrint: false //打印预览状态
        };
    },
    getInitialState: function getInitialState() {
        return {
            fields: this.props.fields,
            dataSource: this.props.dataSource
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('dataSource' in nextProps) {
            // console.log('state', nextProps)
            this.setState({ dataSource: nextProps.dataSource });
        }
    },
    setDataSource: function setDataSource(dataSource) {
        _.map(dataSource, function (item) {
            delete item.isEdit;
            delete item.rowState;
        });
        this.setState({ dataSource: dataSource });
    },
    _renderToolbar: function _renderToolbar() {
        var _this = this;

        return React.createElement(
            YYToolbar,
            null,
            React.createElement(
                YYButton,
                { type: 'primary', onClick: function onClick() {
                        _this.refs.edittable.addRow();
                    } },
                '\u589E\u884C'
            ),
            React.createElement(
                YYButton,
                { type: 'error', onClick: function onClick() {
                        _this.refs.edittable.delRow(_this.ref.edittbale.getSelectedRowKeys(), function () {
                            _this.refs.edittable.dataSource = _this.refs.edittable.getDataSource();
                        });
                    } },
                '\u5220\u884C'
            )
        );
    },
    render: function render() {
        var columns = [];
        _.forEach(this.props.fields, function (column) {
            columns.push(React.createElement(YYTablecol, _extends({ title: column.uititle, key: column.uikey, dataIndex: column.uikey, uisubtype: column.uisubtype }, column)));
        });
        return React.createElement(
            'div',
            null,
            !this.props.isPrint ? this._renderToolbar() : null,
            React.createElement(
                EditTableWidget,
                { ref: 'edittable',
                    dataSource: this.state.dataSource,
                    enableRowClickEdit: true },
                columns
            )
        );
    }
});

module.exports = EditTable;