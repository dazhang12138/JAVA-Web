'use strict';

var React = require('react');

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('yylib-ui'),
    YYClass = _require2.YYClass,
    YYPage = _require2.YYPage,
    YYButton = _require2.YYButton,
    YYIcon = _require2.YYIcon,
    YYPopconfirm = _require2.YYPopconfirm,
    YYEditTable = _require2.YYEditTable,
    YYTable = _require2.YYTable,
    YYInputTag = _require2.YYInputTag;

var _require3 = require('yylib-business/templates/compact'),
    CPListToolbar = _require3.CPListToolbar,
    CPListHeader = _require3.CPListHeader;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');

var _require4 = require('./MDHandler'),
    PageHandler = _require4.PageHandler,
    getHandler = _require4.getHandler,
    getListfeatureMeta = _require4.getListfeatureMeta,
    getContentMeta = _require4.getContentMeta;

/** 预览页面从redux和传参中取值，
 使用页面从props中取值 */


var mapStateToProps = function mapStateToProps(state, props) {
    var resourceData = state.ide.resourceData ? state.ide.resourceData : props.uiResource;
    return {
        resourceData: resourceData,
        lastTime: state.ide.lastTime,
        billType: resourceData.billType ? resourceData.billType.toLowerCase() : null,
        primaryKey: resourceData.uikey,
        listfeatureMeta: getListfeatureMeta(resourceData), //卡片特性配置
        contentMeta: getContentMeta(resourceData), //模型字段配置
        resourceCode: props.resourceCode.toLowerCase(),
        appCode: props.appCode.toLowerCase(),
        mdindex: resourceData.mdindex ? resourceData.mdindex : props.resourceCode.toLowerCase()
    };
};

//定义META
var uiMeta = {
    name: 'md-list-page',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('uiResource', null, PropTypes.object, true, '资源模型对象'), field('dataSource', null, PropTypes.array, true, '页面数据'), field('isView', false, PropTypes.bool, false, '是否预览状态')]
};

/** 组件 */
var MDListPage = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            dataSource: []
        };
    },
    // 列表区域
    _getContentView: function _getContentView() {
        var _this = this;

        var listfeatureMeta = this.props.listfeatureMeta;
        // 列表行操作处理

        var getLineBtns = function getLineBtns(cell, rowData, index) {
            var lineBtns = [];
            if (listfeatureMeta.edit !== false) {
                lineBtns.push(React.createElement(YYIcon, { type: 'edit', title: '\u7F16\u8F91', onClick: getHandler.call(_this, 'editLineBtn', { id: rowData['id'] }) }));
            }
            if (listfeatureMeta.view !== false) {
                lineBtns.push(React.createElement(
                    YYPopconfirm,
                    { title: '\u786E\u5B9A\u8981\u5220\u9664\u8FD9\u4E2A\u4EFB\u52A1\u5417\uFF1F', onConfirm: getHandler.call(_this, 'delLineBtn', { id: rowData['id'] }) },
                    React.createElement(YYIcon, { type: 'delete', title: '\u5220\u9664' })
                ));
            }
            return lineBtns;
        };
        // 渲染表格列
        var columns = [];
        var addColumn = function addColumn(colMeta) {
            columns.push(_.assign({}, {
                title: colMeta.uititle,
                dataIndex: colMeta.uikey
            }, colMeta));
        };
        _.forEach(listfeatureMeta.children, function (colMeta, index) {
            var render = null;
            if (colMeta.children && colMeta.children.length) {
                _.forEach(colMeta.children, function (colItem) {
                    addColumn(colItem);
                });
            } else {
                addColumn(colMeta);
            }
        });
        columns.push({
            title: '操作',
            dataIndex: 'oper',
            render: function render(cell, rowData, index) {
                //表格行相关操作
                return getLineBtns(cell, rowData, index);
            }
        });
        return React.createElement(YYTable, { ref: 'listTable', columns: columns, dataSource: this.state.dataSource });
    },
    // 工具栏
    _getToolbar: function _getToolbar() {
        var buttons = [];
        if (this.props.listfeatureMeta.addBtn !== false) {
            buttons.push(React.createElement(
                YYButton,
                { icon: 'plus', type: 'warning', onClick: getHandler.call(this, 'addBtn') },
                '\u65B0\u589E'
            ));
        }
        if (this.props.listfeatureMeta.delBtn !== false) {
            buttons.push(React.createElement(
                YYButton,
                { icon: 'delete', type: 'error', onClick: getHandler.call(this, 'delBtn') },
                '\u5220\u9664'
            ));
        }

        return React.createElement(
            CPListToolbar,
            null,
            buttons
        );
    },
    _getSearchCondition: function _getSearchCondition(metas) {
        var _this2 = this;

        var conditions = [];
        _.forEach(metas, function (meta) {
            if (meta.children && meta.children.length) {
                conditions = conditions.concat(_this2._getSearchCondition(meta.children));
            } else {
                if (meta.enablesearch) {
                    conditions.push({
                        fieldKey: meta.uikey,
                        fieldName: meta.uititle
                    });
                }
            }
        });
        return conditions;
    },
    _onSearch: function _onSearch(value) {
        PageHandler.onSearch.call(this, value);
    },
    _getHeader: function _getHeader() {
        return React.createElement(
            CPListHeader,
            null,
            [React.createElement(YYInputTag, { align: 'right', searchFields: this._getSearchCondition(this.props.listfeatureMeta.children), onChange: this._onSearch })]
        );
    },
    componentDidMount: function componentDidMount() {
        if (!this.props.isView) {
            PageHandler.loadList.call(this, 'loadList');
        }
    },
    render: function render() {
        return React.createElement(
            YYPage,
            null,
            this._getHeader(),
            this._getToolbar(),
            this._getContentView()
        );
    }
});
module.exports = connect(mapStateToProps)(MDListPage);