'use strict';

/**
 * 搜索排序组件
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYEditTable = _require.YYEditTable,
    YYToolbar = _require.YYToolbar,
    YYButton = _require.YYButton,
    YYSelect = _require.YYSelect,
    YYOption = _require.YYOption,
    YYIcon = _require.YYIcon;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');

var EditTableEvents = {

    // 删除当前行
    onDelRow: function onDelRow(rowData, index) {
        var _this = this;
        this.refs.sortTable.delRow(rowData.rowKey, function (allRows) {
            _this.setState({ dataSource: allRows });
        });
    },
    // 编辑表格单元格值变化
    onCellChange: function onCellChange(rowData, index, dataIndex, event, datestr) {
        var _this = this;
        var newVal = event.target ? event.target.value : event;
        this.refs.sortTable.saveCellData(rowData.rowKey, dataIndex, newVal, function (allRows) {
            _this.setState({ dataSource: allRows });
        });
    },
    // 上移
    onMoveUp: function onMoveUp(rowData, rowIndex) {
        var rows = this.refs.sortTable.getDataSource();
        _.forEach(rows, function (row, index) {
            if (rowIndex - 1 === index) {
                rows[index] = rowData;
                rows[rowIndex] = row;
                return false;
            }
        });
        this.setState({
            dataSource: rows
        });
    },
    // 下移
    onMoveDown: function onMoveDown(rowData, rowIndex) {
        var rows = this.refs.sortTable.getDataSource();
        _.forEach(rows, function (row, index) {
            if (rowIndex + 1 === index) {
                rows[index] = rowData;
                rows[rowIndex] = row;
                return false;
            }
        });
        this.setState({
            dataSource: rows
        });
    }
    //定义META
};var uiMeta = {
    name: 'searchsort',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('fields', [], PropTypes.array, true, '排序字段集合')]
};
var YYSearchSort = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            options: [],
            dataSource: []
        };
    },

    componentDidMount: function componentDidMount() {
        var fields = this.props.fields;
        if (_.isArray(fields) && fields.length > 0) {
            var options = [];
            _.forEach(fields, function (field) {
                if (field.enableOrder != false) {
                    var option = {};
                    option.text = field.title;
                    option.value = field.fieldkey;
                    option.disabled = field.disabled || false;
                    option.style = field.style || {};
                    options.push(option);
                }
            });

            this.setState({
                options: options
            });
            var sort = this.props.sort;
            if (sort && !_.isObject(sort)) {
                sort = JSON.parse(sort);
            }
            if (_.isArray(sort) && sort.length > 0) {
                var sortFields = this.filterSortFields(fields);
                this.initDataSource(sortFields, sort);
            }
        }
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps && this.props.sort != nextProps.sort) {
            var fields = this.props.fields;
            if (_.isArray(fields) && fields.length > 0) {
                var sort = nextProps.sort;
                if (sort && !_.isObject(sort)) {
                    sort = JSON.parse(sort);
                }
                var sortFields = this.filterSortFields(fields);
                this.initDataSource(sortFields, sort);
            }
        }
    },


    initDataSource: function initDataSource(fields, sort) {
        var dataSource = [];
        _.forEach(sort, function (sortItem) {
            _.forEach(fields, function (field) {
                if (sortItem.field === field.fieldkey) {
                    var newRow = {
                        field: sortItem.field,
                        sort: sortItem.sort,
                        rowKey: YYClass.uuid32(),
                        rowState: "add"
                    };
                    dataSource.push(newRow);
                }
            });
        });
        this.setState({
            dataSource: dataSource
        });
    },

    filterSortFields: function filterSortFields(fields) {
        fields = fields.filter(function (field) {
            var enableOrder = field.enableOrder === undefined ? true : field.enableOrder;
            return enableOrder === true;
        });
        return fields;
    },

    addRowClick: function addRowClick() {
        var fields = this.filterSortFields(this.props.fields);
        var newRow = {
            field: fields && fields.length > 0 ? fields[0].fieldkey : null,
            sort: "asc"
        };
        var _this = this;
        this.refs.sortTable.addRowLast(newRow, function (allRows) {
            _this.setState({ dataSource: allRows });
        });
    },
    delRowClick: function delRowClick() {
        var selectedKeys = this.refs.sortTable.getSelectedRowKeys();
        var _this = this;
        this.refs.sortTable.delRow(selectedKeys, function (allRows) {
            _this.setState({ dataSource: allRows });
        });
    },
    _getSort: function _getSort() {
        var allRows = this.refs.sortTable.getRowData();
        var sorts = _.map(allRows, function (row) {
            return row.field + ':' + row.sort;
        });
    },
    render: function render() {
        var _this2 = this;

        var _this = this;
        var dataSource = this.state.dataSource;
        var containerId = this.props.containerId;
        var columns = [{
            title: '字段',
            dataIndex: 'field',
            width: 200,
            render: function render(value, record, index) {
                var options = _this2.state.options;
                var defaultValue = options && options.length > 0 ? options[0].value : undefined;
                value = value ? value : defaultValue;
                if (containerId) {
                    return React.createElement(YYSelect, { items: options,
                        getPopupContainer: function getPopupContainer() {
                            return document.getElementById(containerId);
                        },
                        defaultValue: value, style: { width: 200 },
                        onChange: EditTableEvents.onCellChange.bind(_this2, record, index, 'field') });
                } else {
                    return React.createElement(YYSelect, { items: options,
                        defaultValue: value, style: { width: 200 },
                        onChange: EditTableEvents.onCellChange.bind(_this2, record, index, 'field') });
                }
            }
        }, {
            title: '排序',
            dataIndex: 'sort',
            width: 200,
            render: function render(value, record, index) {
                value = value ? value : 'asc';
                if (containerId) {
                    return React.createElement(
                        YYSelect,
                        { defaultValue: value,
                            style: { width: 200 }, getPopupContainer: function getPopupContainer() {
                                return document.getElementById(containerId);
                            },
                            onChange: EditTableEvents.onCellChange.bind(_this2, record, index, 'sort') },
                        React.createElement(
                            YYOption,
                            { value: 'asc' },
                            '\u5347\u5E8F'
                        ),
                        React.createElement(
                            YYOption,
                            { value: 'desc' },
                            '\u964D\u5E8F'
                        )
                    );
                } else {
                    return React.createElement(
                        YYSelect,
                        { defaultValue: value,
                            style: { width: 200 },
                            onChange: EditTableEvents.onCellChange.bind(_this2, record, index, 'sort') },
                        React.createElement(
                            YYOption,
                            { value: 'asc' },
                            '\u5347\u5E8F'
                        ),
                        React.createElement(
                            YYOption,
                            { value: 'desc' },
                            '\u964D\u5E8F'
                        )
                    );
                }
            }
        }, {
            title: '操作',
            dataIndex: 'opr',
            width: 70,
            render: function render(text, record, index) {
                var btns = [];
                btns.push(React.createElement(YYIcon, { type: 'up', title: '\u4E0A\u79FB',
                    onClick: EditTableEvents.onMoveUp.bind(_this, record, index) }));
                btns.push(React.createElement(YYIcon, { type: 'down', title: '\u4E0B\u79FB',
                    onClick: EditTableEvents.onMoveDown.bind(_this, record, index) }));
                btns.push(React.createElement(YYIcon, { type: 'delete', title: '\u5220\u9664',
                    onClick: EditTableEvents.onDelRow.bind(_this, record, index) }));
                return btns;
            }
        }];
        return React.createElement(
            'div',
            null,
            React.createElement(
                YYToolbar,
                null,
                React.createElement(
                    YYButton,
                    { type: 'primary', icon: 'plus', onClick: this.addRowClick },
                    '\u6DFB\u52A0'
                ),
                React.createElement(
                    YYButton,
                    { type: 'error', icon: 'delete', ghost: true, onClick: this.delRowClick },
                    '\u5220\u9664'
                )
            ),
            React.createElement(YYEditTable, { ref: 'sortTable', rowKey: 'rowKey', style: { width: 614 }, scroll: { y: 274 }, columns: columns,
                dataSource: dataSource, pagination: false })
        );
    }
});
module.exports = YYSearchSort;