'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Administrator on 2016/5/11.
 * 上传附件组件
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYButton = _require.YYButton,
    YYDropdownButton = _require.YYDropdownButton,
    YYMenu = _require.YYMenu,
    YYMenuItem = _require.YYMenuItem,
    YYIcon = _require.YYIcon;

var _require2 = require("./printaction"),
    loadTplList = _require2.loadTplList,
    templateUrl = _require2.templateUrl;

var ADDR = require('../BaseHost');
var AuthToken = require("../../utils/AuthToken");

var PrintButton = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            serverUrl: ADDR,
            billType: '',
            busiType: '',
            enableOrg: false,
            orgId: '',
            onClickMenu: null,
            title: '打印',
            disable: false,
            _type: 'YYPage',

            btnCls: null, // 用于更改样式
            menuCls: null, // 用于更改样式
            menuItemCls: null, // 用于更改样式
            dropdownCls: null // 用于更改样式
        };
    },
    getInitialState: function getInitialState() {
        return { hashLoad: false, templateList: [] };
    },
    _loadList: function _loadList(billType, busiType, orgId) {
        //添加单据判断
        if (billType) {
            var url = this.props.serverUrl + templateUrl;
            var that = this;
            loadTplList(url, { billType: billType, busiType: busiType, orgId: orgId }, function (data) {
                if (data) {
                    that.setState({ templateList: data });
                }
            });
        }
    },
    componentDidMount: function componentDidMount() {
        if (this.state.hashLoad == false) {
            this.setState({ hashLoad: true });

            var billType = this.props.billType;
            var busiType = this.props.busiType;
            var orgId = this.props.orgId;
            if (this.props.enableOrg) {
                orgId = AuthToken.getOrgaId();
            }
            this._loadList(billType, busiType, orgId);
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        //console.log("componentWillReceiveProps",111111);
        var newBillType = nextProps.billType;
        var newEnableOrg = nextProps.enableOrg;
        var newOrgId = nextProps.orgId;
        var newBusiType = nextProps.busiType;
        if (newBillType == this.props.billType && newEnableOrg == this.props.enableOrg && newOrgId == this.props.orgId && newBusiType == this.props.busiType) {
            return;
        }
        //console.log("componentWillReceiveProps",222222);
        if (newEnableOrg === true) {
            newOrgId = AuthToken.getOrgaId();
        }
        this._loadList(newBillType, newBusiType, newOrgId);
    },
    handleMenuClick: function handleMenuClick(e) {
        this.handleClick(e.key);
    },
    handleClick: function handleClick(templateCode) {
        var eventHandler = this.props.onClickMenu;
        if (eventHandler) {
            eventHandler(templateCode);
        }
    },

    getMenu: function getMenu(data) {
        var _this = this;
        return React.createElement(
            YYMenu,
            { className: this.props.menuCls, onClick: this.handleMenuClick },
            data.map(function (item, index) {
                var templateName = item.templateName;
                if (!templateName) {
                    templateName = "模板" + index;
                }
                return React.createElement(
                    YYMenuItem,
                    { className: _this.props.menuItemCls, key: item.templateCode, disabled: false },
                    templateName
                );
            })
        );
    },

    render: function render() {
        var title = this.props.title;
        if (!title) {
            title = '打印';
        }
        var data = this.state.templateList;
        //console.log("data",data);
        var _props = this.props,
            dropdownCls = _props.dropdownCls,
            btnCls = _props.btnCls,
            className = _props.className;

        var defaultProps = {};
        defaultProps.disabled = this.props.disabled;
        if (this.props._type == 'YYPage') {
            defaultProps.type = "primary";
        }

        btnCls = (btnCls ? btnCls : '') + (className ? ' ' + className : '');
        dropdownCls = (dropdownCls ? dropdownCls : '') + (className ? ' ' + className : '');

        if (!data || data.length == 0) {
            return React.createElement(
                YYButton,
                _extends({}, defaultProps, { className: btnCls }),
                title
            );
        } else if (data.length == 1) {
            var item = data[0];
            return React.createElement(
                YYButton,
                _extends({}, defaultProps, { onClick: this.handleClick.bind(null, item.templateCode), className: btnCls }),
                title
            );
        } else {
            var menus = this.getMenu(data);
            return React.createElement(
                YYDropdownButton,
                _extends({ className: dropdownCls, overlay: menus }, defaultProps),
                title
            );
        }
    }
});

module.exports = PrintButton;