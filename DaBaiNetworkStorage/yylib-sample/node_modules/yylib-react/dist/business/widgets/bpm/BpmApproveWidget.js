'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYDropdownButton = _require.YYDropdownButton,
    YYMenu = _require.YYMenu,
    YYMenuItem = _require.YYMenuItem,
    YYMessage = _require.YYMessage;

var YYApprove = require('../../bpmapprove/YYApprove');
var YYViewApprove = require('../../bpmapprove/YYViewApprove');
var ajax = require('yylib-utils/ajax');
var ADDR = require('../../BaseHost');
var EnvUtils = require('yylib-utils/EnvUtils').default;
var field = YYClass.field;
var PropTypes = YYClass.PropTypes;

//单据类型 参照（bill_001）-> billTypeId = '666666'
//服务地址 文本 默认空   -> serUrl = 'http://localhost:8080'
//当前用户 开关 默认true -> enableUser = true (userId，内部调用EnvUtils.getValue(EnvUtils.KEYS.USER_ID))
//当前组织 开关 默认true -> enableOrg = true （orgId，内部调用EnvUtils.getValue(EnvUtils.KEYS.ORGA_ID)）

var uiMetaFields = [
/**必填参数 */
field('serUrl', ADDR, PropTypes.string, true, '审批服务URL'), field('refUrl', ADDR, PropTypes.string, true, '参照服务URL'), field('billTypeId', null, PropTypes.string, true, '单据类型id'), field('billId', null, PropTypes.string, true, '单据id'),
/**非必填参数 */
field('onClick', null, PropTypes.func, false, '点击审批后的回调'), field('viewBench', false, PropTypes.bool, false, '消息组件里的所需的，正常单据不需要，或者传false'), field('onApproveClose', false, PropTypes.func, false, '关闭审批窗口回调'), field('onHistoryClose', false, PropTypes.func, false, '关闭审批历史窗口回调'), field('disabled', false, PropTypes.Bool, false, '禁用挂件'), field('visible', true, PropTypes.Bool, false, '是否显示'), field('disableApprove', false, PropTypes.bool, false, '禁用审批按钮'), field('disableUnapprove', false, PropTypes.bool, false, '禁用弃审按钮'), field('disableViewApprove', false, PropTypes.bool, false, '禁用查看审批按钮'), field('onClickBefore', null, PropTypes.func, false, '按钮提交之前的回调方法'), field('onUnApproveSuccess', null, PropTypes.func, false, '弃审成功的回调'), field('onUnApproveError', null, PropTypes.func, false, '弃审失败的回调'), field('_type', 'YYPage', PropTypes.string, false, '组件类型')];
//定义META
var uiMeta = {
    name: 'bpmApproveWidget',
    fields: uiMetaFields
};
var BpmSubmitWidget = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return { showApprove: false, showHistory: false };
    },
    _getBillParam: function _getBillParam(props) {
        var _props = this.props,
            billTypeId = _props.billTypeId,
            billId = _props.billId,
            formurl = _props.formurl,
            processInsName = _props.processInsName,
            recvTime = _props.recvTime;

        var bill = {
            billTypeId: billTypeId, billId: billId, formurl: formurl, processInsName: processInsName, recvTime: recvTime
        };
        return bill;
    },
    render: function render() {
        var dropdownClass = this.props._type == 'CPCardPage' ? 'cp2-dropdown-button' : '';
        var menuClass = this.props._type == 'CPCardPage' ? 'cp2-dropdown-menu' : '';

        var _props2 = this.props,
            serUrl = _props2.serUrl,
            refUrl = _props2.refUrl,
            billId = _props2.billId,
            disabled = _props2.disabled,
            visible = _props2.visible,
            disableApprove = _props2.disableApprove,
            disableUnapprove = _props2.disableUnapprove,
            disableViewApprove = _props2.disableViewApprove;

        var orgId = EnvUtils.getValue(EnvUtils.Keys.ORGA_ID);
        var userId = EnvUtils.getValue(EnvUtils.Keys.USER_ID);
        var dropdownMenus = React.createElement(
            YYMenu,
            { menuClass: menuClass, style: { width: 100 }, onClick: this._onMenuClick },
            React.createElement(
                YYMenuItem,
                { key: 'approve', disabled: disableApprove },
                '\u6267\u884C\u5BA1\u6279'
            ),
            React.createElement(
                YYMenuItem,
                { key: 'unapprove', disabled: disableUnapprove },
                '\u6267\u884C\u5F03\u5BA1'
            ),
            React.createElement(
                YYMenuItem,
                { key: 'viewApprove', disabled: disableViewApprove },
                '\u5BA1\u6279\u5386\u53F2'
            )
        );
        var visibleStyle = visible ? {} : { display: 'none' }; //是否显示
        return React.createElement(
            'span',
            { style: visibleStyle, className: this.props.className },
            React.createElement(
                YYDropdownButton,
                { disabled: disabled, trigger: 'click', overlay: dropdownMenus, className: dropdownClass, onClick: this._onSubmitClick.bind(this, true) },
                this.props.uititle
            ),
            this.state.showApprove ? React.createElement(YYApprove, { key: 'bpmapprove',
                showApprove: this.state.showApprove,
                bill: this._getBillParam(this.props),
                serUrl: serUrl,
                refUrl: refUrl,
                orgId: orgId,
                viewBench: false,
                userId: userId,
                closeApprove: this._onApproveClose }) : null,
            this.state.showHistory ? React.createElement(YYViewApprove, {
                showViewApprove: this.state.showHistory,
                userId: userId,
                serUrl: serUrl,
                billId: billId,
                closeMethod: this._onHistoryClose }) : null
        );
    },
    _onMenuClick: function _onMenuClick(item) {
        var isValid = true;
        if (_.isFunction(this.props.onClickBefore)) {
            isValid = this.props.onClickBefore(item.key);
        }
        if (isValid == false) return;
        // 审批
        if (item.key == 'approve') {
            this._onSubmitClick(false);
        }
        // 弃审
        else if (item.key == 'unapprove') {
                var params = {
                    userId: EnvUtils.getValue(EnvUtils.Keys.USER_ID),
                    billTypeId: this.props.billTypeId,
                    billId: this.props.billId
                };
                var _this = this;
                ajax.postText(ADDR + '/icop-bpmcenter-web/bpm/unapprove', params, function (result) {
                    var resultObj = JSON.parse(result);
                    if (resultObj.success) {
                        YYMessage.success(resultObj.msg);
                        if (_.isFunction(_this.props.onUnApproveSuccess)) {
                            _this.props.onUnApproveSuccess(result);
                        }
                    } else {
                        YYMessage.error(resultObj.msg);
                        if (_.isFunction(_this.props.onUnApproveError)) {
                            _this.props.onUnApproveError(result);
                        }
                    }
                });
            }
            // 审批历史
            else if (item.key == 'viewApprove') {
                    this.setState({ showHistory: true });
                }
    }
    // 执行审批
    ,
    _onSubmitClick: function _onSubmitClick(triggerClickBefore) {
        if (this.props.disableApprove) {
            YYMessage.info('执行审批已被禁用');
            return false;
        }
        var isValid = true;
        if (triggerClickBefore && _.isFunction(this.props.onClickBefore)) {
            isValid = this.props.onClickBefore('approve');
        }
        if (isValid) {
            this.setState({ showApprove: true }, function () {
                if (_.isFunction(this.props.onClick)) {
                    this.props.onClick(this.key);
                }
            });
        } else {
            return false;
        }
    }
    // 关闭审批窗口
    ,
    _onApproveClose: function _onApproveClose(data) {
        this.setState({ showApprove: false }, function () {
            if (_.isFunction(this.props.onApproveClose)) {
                this.props.onApproveClose(data);
            }
        });
    }
    // 关闭审批历史窗口
    ,
    _onHistoryClose: function _onHistoryClose() {
        this.setState({ showHistory: false }, function () {
            if (_.isFunction(this.props.onHistoryClose)) {
                this.props.onHistoryClose();
            }
        });
    }
});

module.exports = BpmSubmitWidget;