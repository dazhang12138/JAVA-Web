'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYDropdownButton = _require.YYDropdownButton,
    YYMenu = _require.YYMenu,
    YYMenuItem = _require.YYMenuItem,
    YYMessage = _require.YYMessage;

var YYBpmSubmit = require('../../bpmapprove/YYBpmSubmit');
var ADDR = require('../../BaseHost');
var EnvUtils = require('yylib-utils/EnvUtils').default;
var field = YYClass.field;
var PropTypes = YYClass.PropTypes;
var ajax = require('yylib-utils/ajax');

//单据类型 参照（bill_001）-> billTypeId = 'BM04' 和 billId:'8a8389935a7d2e05015a7d3f5b3b0000' 解析为 bill.billTypeId和bill.billId
//链接地址 文本 默认空 -> formurl:"1221221"  解析为 bill.formurl
//审批服务 文本 默认空 -> serUrl
//参照服务 文本 默认空 -> refUrl
//当前用户 开关 默认true -> enableUser = true (userId，内部调用EnvUtils.getValue(EnvUtils.KEYS.USER_ID))
//当前组织 开关 默认true -> enableOrg = true （orgId，内部调用EnvUtils.getValue(EnvUtils.KEYS.ORGA_ID)）
//定义META
var uiMeta = {
    name: 'bpmSubmitWidget',
    fields: [
    /**必填参数 */
    field('serUrl', ADDR, PropTypes.string, true, '审批服务URL'), field('refUrl', ADDR, PropTypes.string, true, '参照服务URL'), field('billTypeId', null, PropTypes.string, true, '单据类型id'), field('billId', null, PropTypes.string, true, '单据id'), field('businessKey', null, PropTypes.string, true, '业务主键'), field('billCode', null, PropTypes.string, true, '业务主键'), field('bill', undefined, PropTypes.object, false, '业务单据的字段信息'), field('procInstName', null, PropTypes.string, true, '流程实例名'), field('enableUser', true, PropTypes.string, true, '启用当前用户'), field('enableOrg', true, PropTypes.string, true, '启用当前组织'),
    /**非必填参数 */
    field('visible', true, PropTypes.Bool, false, '是否显示'), field('disabled', false, PropTypes.Bool, false, '禁用挂件'), field('disableSubmit', false, PropTypes.Bool, false, '禁用提交审批按钮'), field('disableRecover', false, PropTypes.Bool, false, '禁用审批收回按钮'), field('formurl', "unknown", PropTypes.string, false, '单据的链接地址'), field('onClose', null, PropTypes.func, false, '关闭审批窗口后的回调'), field('viewBench', false, PropTypes.bool, false, '消息组件里的所需的，正常单据不需要，或者传false'), field('onClickBefore', null, PropTypes.func, false, '按钮提交之前的回调方法'), field('onSubmitClick', null, PropTypes.func, false, '按钮提交点击的回调方法'), field('onRecoverDone', null, PropTypes.func, false, '收回审批的回调'), field('userId', null, PropTypes.string, false, '当前登录用户id'), field('_type', 'YYPage', PropTypes.string, false, '组件类型')]
};
var BpmSubmitWidget = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return { show: false };
    },

    // 构造参数
    _parseParam: function _parseParam() {
        var _props = this.props,
            billId = _props.billId,
            billTypeId = _props.billTypeId,
            userId = _props.userId,
            bill = _props.bill;

        var params = {};
        _.assign(params, this.props, { billtypeId: billTypeId });
        if (!params.bill) params.bill = {}; //不存在则初始化单据信息对象
        delete params.billTypeId;
        //如果userId不存在并且enableUser==true 覆盖params中的userId
        //否则使用params中的由props传入的userId
        if (!userId && this.props.enableUser) {
            params.userId = EnvUtils.getValue(EnvUtils.Keys.USER_ID);
        }
        if ((!bill || !bill.companyId) && this.props.enableOrg) {
            params.bill.companyId = EnvUtils.getValue(EnvUtils.Keys.ORGA_ID);
        }
        params.bill.billId = billId;
        params.bill.id = billId;
        return params;
    },
    render: function render() {
        var dropdownClass = this.props._type == 'CPCardPage' ? 'cp2-dropdown-button' : '';
        var menuClass = this.props._type == 'CPCardPage' ? 'cp2-dropdown-menu' : '';

        var _props2 = this.props,
            disableSubmit = _props2.disableSubmit,
            disableRecover = _props2.disableRecover,
            disabled = _props2.disabled,
            visible = _props2.visible;

        var params = this._parseParam();

        var dropdownMenus = React.createElement(
            YYMenu,
            { className: menuClass, style: { width: 100 }, onClick: this._onMenuClick },
            React.createElement(
                YYMenuItem,
                { key: 'submit', disabled: disableSubmit },
                '\u63D0\u4EA4'
            ),
            React.createElement(
                YYMenuItem,
                { key: 'recover', disabled: disableRecover },
                '\u6536\u56DE'
            )
        );
        var visibleStyle = visible ? {} : { display: 'none' }; //是否显示
        return React.createElement(
            'span',
            { style: visibleStyle, className: this.props.className },
            React.createElement(
                YYDropdownButton,
                { disabled: disabled, trigger: 'click', overlay: dropdownMenus, className: dropdownClass, onClick: this.submitClick },
                this.props.uititle
            ),
            this.state.show ? React.createElement(YYBpmSubmit, { key: 'bpmsubmit',
                visible: this.state.show,
                serUrl: this.props.serUrl,
                subParam: params,
                close: this._closeModal }) : null
        );
    }
    // 回退
    ,
    recoverClick: function recoverClick() {
        var params = {
            userId: EnvUtils.getValue(EnvUtils.Keys.USER_ID),
            billTypeId: this.props.billTypeId,
            billId: this.props.billId
        };
        var _this = this;
        ajax.postText(this.props.serUrl + '/icop-bpmcenter-web/bpm/doCallBack', params, function (result) {
            var resultObj = JSON.parse(result);
            if (_.isFunction(_this.props.onRecoverDone)) {
                _this.props.onRecoverDone(resultObj);
            }
        });
    },
    _onMenuClick: function _onMenuClick(item) {
        var _this = this;
        var isValid = true;
        if (_.isFunction(this.props.onClickBefore)) {
            isValid = this.props.onClickBefore(item.key);
        }
        if (isValid) {
            if (item.key == 'submit') {
                //提交审批
                if (_.isFunction(this.props.onSubmitClick)) {
                    this.props.onSubmitClick(function (result) {
                        if (result) {
                            _this.setState({ show: true });
                        }
                    });
                } else {
                    this.submitClick();
                }
            } else if (item.key == 'recover') {
                //收回审批
                this.recoverClick();
            }
        } else {
            return false;
        }
    }
    // 执行提交审批
    ,
    submitClick: function submitClick() {
        if (this.props.disableSubmit) {
            YYMessage.info('提交审批已被禁用');
            return false;
        }
        var isValid = true;
        if (_.isFunction(this.props.onClickBefore)) {
            isValid = this.props.onClickBefore('submit');
        }
        if (isValid) {
            if (_.isFunction(this.props.onSubmitClick)) {
                var _this = this;
                this.props.onSubmitClick(function (result) {
                    if (result) {
                        _this.setState({ show: true });
                    }
                });
            } else {
                this.setState({ show: true });
            }
        } else {
            return false;
        }
    }
    // 关闭审批窗口
    ,
    _closeModal: function _closeModal(result) {
        this.setState({ show: false }, function () {
            if (_.isFunction(this.props.onClose)) {
                this.props.onClose(result);
            }
        });
    }
});

module.exports = BpmSubmitWidget;