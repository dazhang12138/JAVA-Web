'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYFormItem = _require.YYFormItem,
    YYInput = _require.YYInput,
    YYSelect = _require.YYSelect,
    YYOption = _require.YYOption,
    YYInputNumber = _require.YYInputNumber,
    YYDatePicker = _require.YYDatePicker,
    YYTimePicker = _require.YYTimePicker,
    YYTextarea = _require.YYTextarea,
    YYReferInput = _require.YYReferInput,
    YYSwitch = _require.YYSwitch,
    YYCascader = _require.YYCascader,
    YYRadioGroup = _require.YYRadioGroup,
    YYCheckboxGroup = _require.YYCheckboxGroup;

var YYEditor = require('yylib-ui/editor/YYEditor');
var AttachUploadWidget = require('./attach/AttachUploadWidget');
var YYImageWall = require('../attach/YYImageWall');
var YYEnumSelect = require('../enum/YYEnumSelect');
var YYMapInput = require('../map/YYMapInput');
var FormItemType = require('./FormItemType');
var MDFieldType = require('./MDFieldType');
var BaseHost = require('../BaseHost');
var AttachMgrWidget = require('./attach/AttachMgrWidget');
//解决切换组件类型，表单报错问题
var InputItem = React.createClass({
    displayName: 'InputItem',

    render: function render() {
        var children = this.props.children;

        var inputProps = _.assign({}, this.props);
        delete inputProps.children;
        return React.cloneElement(children, inputProps);
    }
});

function getVerifyProps(props, state) {
    var getFieldProps = props.form && props.form.getFieldProps;
    var passProps = {}; //只有在外部有YYForm的情况下才提供校验
    if (getFieldProps && props.uikey) {
        var rules = []; //验证规则
        if (props.required && props.uititle) {
            //必填验证
            var requireRule = { required: props.required, message: props.uititle + '\u4E3A\u5FC5\u586B\u9879'
                // 参照框修改验证type='object'
            };if (props.uisubtype === FormItemType.inputrefer) {
                var type = props.multiselect ? 'array' : 'object';
                requireRule = _.assign(requireRule, { type: type });
            }
            if (props.uisubtype === FormItemType.number) {
                requireRule = _.assign(requireRule, { type: 'number' });
            }
            if (props.uisubtype === FormItemType.currency) {
                requireRule = _.assign(requireRule, { type: 'number' });
            }
            if (props.uisubtype === FormItemType.switch) {
                requireRule = _.assign(requireRule, { type: 'boolean' });
            }
            if (props.uisubtype === FormItemType.cascader) {
                requireRule = _.assign(requireRule, { type: 'array' });
            }
            if (props.uisubtype === FormItemType.date) {
                if (props.format == 'yyyy') {
                    //年份
                    requireRule = _.assign(requireRule, { type: 'number' });
                } else {
                    //日期
                    requireRule = _.assign(requireRule, { type: 'date' });
                }
            }
            if (props.uisubtype === FormItemType.inputmap) {
                //地图选址对象
                requireRule = _.assign(requireRule, { type: 'object' });
            }
            if (props.uisubtype === FormItemType.enumselect || props.uisubtype === FormItemType.select) {
                var type = props.valueType ? props.valueType : 'string';
                if (props.multiple) {
                    type = 'array';
                }
                requireRule = _.assign(requireRule, { type: type });
            }
            if (props.uisubtype === FormItemType.checkboxgroup) {
                requireRule = _.assign(requireRule, { type: 'array' });
            }
            rules.push(requireRule);
        }
        //正则验证
        if (props.pattern) {
            try {
                rules.push({ pattern: new RegExp(props.pattern), message: props.patternMsg });
            } catch (error) {
                console.error('不是一个有效的正则表达式[' + props.pattern + ']', error);
            }
        }
        if (_.isArray(state.rules) && state.rules.length) {
            rules = rules.concat(state.rules);
        }
        var options = {};
        if (props.defaultValue !== undefined) {
            //设置默认值
            options.initialValue = props.defaultValue;
        }
        if (props.value !== undefined) {
            //设置默认值
            options.initialValue = props.value;
        }
        if (rules.length) {
            options.rules = rules;
        }
        //精确数字框获取第二个参数number类型值及用此值进行验证
        if (props.uisubtype === FormItemType.currency) {
            options.getValueFromEvent = function (value, numValue) {
                return numValue;
            };
        }
        if (props.uisubtype == FormItemType.switch) {
            //Switch通过checked属性作为value
            options.valuePropName = 'checked';
        }
        if (_.isFunction(props.onChange)) {
            options.onChange = props.onChange;
        }
        passProps = getFieldProps(props.uikey, options);
    }
    return passProps;
}

function renderInput(props, state) {
    var inputProps = {};
    if (props.maxLength) {
        inputProps.maxLength = props.maxLength;
    }
    if (props.disabled !== undefined) {
        inputProps.disabled = props.disabled;
    }
    if (props.addonAfter) {
        inputProps.addonAfter = props.addonAfter;
    }
    if (props.onFocus) {
        inputProps.onFocus = props.onFocus;
    }
    if (props.onBlur) {
        inputProps.onBlur = props.onBlur;
    }
    if (props.placeholder) {
        inputProps.placeholder = props.placeholder;
    }
    if (props.className) {
        inputProps.className = props.className;
    }
    if (props.defaultValue) {
        inputProps.defaultValue = props.defaultValue;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYInput, inputProps)
    );
}

function renderIptHidden(props, state) {
    var passProps = {};
    var getFieldProps = props.form && props.form.getFieldProps;
    if (getFieldProps && props.uikey) {
        passProps = getFieldProps(props.uikey);
    }
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYInput, { type: 'hidden' })
    );
}

function renderSelect(props, state) {
    var selectProps = {};
    // if(props.children) {
    //     selectProps.items = _.map(props.children, function (child) {
    //         return {
    //             value: child.props.value,
    //             text: child.props.text,
    //         }
    //     })
    // }
    // if(props.disabled){
    //     selectProps.disabled = props.disabled
    // }
    props.value = props.defaultValue;
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYSelect, props)
    );
}

function renderIptRefer(props, state) {
    var referProps = {};
    if (props && props.refinfokey) {
        referProps.refinfokey = props.refinfokey;
    }
    if (props.multiselect) {
        referProps.multiselect = props.multiselect;
    }
    if (props.often) {
        referProps.often = props.often;
    }
    if (props.searchPlaceholder) {
        referProps.searchPlaceholder = props.searchPlaceholder;
    }
    if (props.condition) {
        referProps.condition = props.condition;
    }
    if (props.disabled !== undefined) {
        referProps.disabled = props.disabled;
    }
    if (props.checkControl === false) {
        referProps.checkControl = props.checkControl;
    }
    if (props.onShow) {
        referProps.onShow = props.onShow;
    }
    if (props.className) {
        referProps.className = props.className;
    }
    if (props.onBeforeChange) {
        referProps.onBeforeChange = props.onBeforeChange;
    }
    if (props.serverUrl) {
        referProps.serverUrl = props.serverUrl;
    } else {
        //注意：依据环境标识，自动配置serverUrl的地址
        referProps.serverUrl = BaseHost;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYReferInput, referProps)
    );
}

function renderDate(props, state) {
    var dateProps = {};
    if (props.format) {
        dateProps.format = props.format;
    }
    if (props.disabled !== undefined) {
        dateProps.disabled = props.disabled;
    }
    if (props.disabledDate) {
        dateProps.disabledDate = props.disabledDate;
    }
    if (props.toggleOpen) {
        dateProps.toggleOpen = props.toggleOpen;
    }
    if (props.showTime) {
        dateProps.showTime = props.showTime;
    }
    if (props.placeholder) {
        dateProps.placeholder = props.placeholder;
    }
    if (props.className) {
        dateProps.className = props.className;
    }
    if (props.defaultValue) {
        dateProps.defaultValue = props.defaultValue;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYDatePicker, dateProps)
    );
}

function renderNumber(props, state, type) {
    var numProps = {};
    if (props.min) {
        numProps.min = props.min;
    }
    if (props.max) {
        numProps.max = props.max;
    }
    if (props.decimal || props.decimal === 0) {
        numProps.decimal = props.decimal;
    }
    if (props.symbol || props.symbol === '') {
        numProps.symbol = props.symbol;
    }
    if (props.disabled !== undefined) {
        numProps.disabled = props.disabled;
    }
    if (props.direction) {
        numProps.direction = props.direction;
    }
    if (props.onFocus) {
        numProps.onFocus = props.onFocus;
    }
    if (props.onBlur) {
        numProps.onBlur = props.onBlur;
    }
    if (props.placeholder) {
        numProps.placeholder = props.placeholder;
    }
    if (props.addonAfter) {
        numProps.addonAfter = props.addonAfter;
    }
    if (props.className) {
        numProps.className = props.className;
    }
    if (props.defaultValue !== undefined) {
        numProps.defaultValue = parseInt(props.defaultValue);
        props.defaultValue = parseInt(props.defaultValue); //确保必填验证数字类型通过
    }
    var passProps = getVerifyProps(props, state);
    if (type) {
        if (props.commaVisible === false) {
            numProps.commaVisible = props.commaVisible;
        }
        if (props.minus) {
            numProps.minus = props.minus;
        }
        return React.createElement(
            InputItem,
            passProps,
            React.createElement(YYInputNumber, _extends({}, numProps, { type: type }))
        );
    } else {
        return React.createElement(
            InputItem,
            passProps,
            React.createElement(YYInputNumber, numProps)
        );
    }
}

function renderTextarea(props, state) {
    var textProps = {};
    if (props.autosize) {
        textProps.autosize = props.autosize;
    }
    if (props.disabled !== undefined) {
        textProps.disabled = props.disabled;
    }
    if (props.onFocus) {
        textProps.onFocus = props.onFocus;
    }
    if (props.onBlur) {
        textProps.onBlur = props.onBlur;
    }
    if (props.maxLength) {
        textProps.maxLength = props.maxLength;
    }
    if (props.placeholder) {
        textProps.placeholder = props.placeholder;
    }
    if (props.className) {
        textProps.className = props.className;
    }
    if (props.defaultValue) {
        textProps.defaultValue = props.defaultValue;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYTextarea, textProps)
    );
}

function renderSwitch(props, state) {
    var switchProps = {};
    if (props.defaultChecked !== undefined) {
        switchProps.defaultChecked = props.defaultChecked;
        props.defaultValue = props.defaultChecked;
    } else {
        //默认未选中false
        switchProps.defaultChecked = false;
        props.defaultValue = false;
    }
    if (props.checkedChildren) {
        switchProps.checkedChildren = props.checkedChildren;
    }
    if (props.unCheckedChildren) {
        switchProps.unCheckedChildren = props.unCheckedChildren;
    }
    if (props.disabled !== undefined) {
        switchProps.disabled = props.disabled;
    }
    if (props.className) {
        switchProps.className = props.className;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYSwitch, switchProps)
    );
}

function renderEnumSelect(props, state) {
    var enumSelectProps = {};
    if (props.disabled) {
        enumSelectProps.disabled = props.disabled;
    }
    if (props.enableOrg) {
        enumSelectProps.enableOrg = props.enableOrg;
    }
    if (props.code) {
        enumSelectProps.code = props.code;
    }
    if (props.serverUrl) {
        enumSelectProps.serverUrl = props.serverUrl;
    }
    if (props.allowClear) {
        enumSelectProps.allowClear = props.allowClear;
    }
    if (props.valueType) {
        enumSelectProps.valueType = props.valueType;
    }
    if (props.multiple) {
        enumSelectProps.multiple = props.multiple;
    }
    if (props.valueKey) {
        enumSelectProps.valueKey = props.valueKey;
    }
    if (props.textKey) {
        enumSelectProps.textKey = props.textKey;
    }
    if (props.dataparams) {
        enumSelectProps.dataparams = props.dataparams;
    }
    if (props.className) {
        enumSelectProps.className = props.className;
    }
    if (props.onShowFilter) {
        enumSelectProps.onShowFilter = props.onShowFilter;
    }
    if (props.propKey) {
        enumSelectProps.propKey = props.propKey;
    }
    if (props.defaultActiveFirstOption !== undefined) {
        enumSelectProps.defaultActiveFirstOption = props.defaultActiveFirstOption;
    }
    if (props.defaultValue !== undefined) {
        enumSelectProps.defaultValue = props.defaultValue;
    }

    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYEnumSelect, enumSelectProps)
    );
}

function renderAttachUpload(props, state) {
    var uploadProps = {};
    if (props.action) {
        uploadProps.action = props.action;
    }
    if (props.title) {
        uploadProps.title = props.title;
    }
    if (props.enableUser) {
        uploadProps.enableUser = props.enableUser;
    }
    if (props.multiple) {
        uploadProps.multiple = props.multiple;
    }
    if (props.billType) {
        uploadProps.billType = props.billType;
    }
    if (props.sourceId) {
        uploadProps.sourceId = props.sourceId;
    }
    if (props.beforeUpload) {
        uploadProps.beforeUpload = props.beforeUpload;
    }
    if (props.beforeDel) {
        uploadProps.beforeDel = props.beforeDel;
    }
    if (props.sourceType) {
        uploadProps.sourceType = props.sourceType;
    }
    if (props.className) {
        uploadProps.className = props.className;
    }
    if (props.disabled !== undefined) {
        uploadProps.disabled = props.disabled;
    }
    // if(props.defaultValue!==undefined){
    //     uploadProps.defaultValue = props.defaultValue;
    // }
    if (props.allowFileExts !== undefined) {
        uploadProps.allowFileExts = props.allowFileExts;
    }
    if (props.btnType !== undefined) {
        uploadProps.btnType = props.btnType;
    }
    if (props.buttonText !== undefined) {
        uploadProps.buttonText = props.buttonText;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(AttachUploadWidget, uploadProps)
    );
}

function renderImageUpload(props, state) {
    var uploadProps = {};
    if (props.sourceId) {
        uploadProps.sourceId = props.sourceId;
    }
    if (props.sourceType) {
        uploadProps.sourceType = props.sourceType;
    }
    if (props.billType) {
        uploadProps.billType = props.billType;
    }
    if (props.serverUrl) {
        uploadProps.serverUrl = props.serverUrl;
    }
    if (props.maxCount) {
        uploadProps.maxCount = props.maxCount;
    }
    if (props.buttonText) {
        uploadProps.title = props.title;
    }
    if (props.defaultValue !== undefined) {
        uploadProps.defaultValue = props.defaultValue;
    }
    if (props.className) {
        uploadProps.className = props.className;
    }
    if (props.onRemove) {
        uploadProps.onRemove = props.onRemove;
    }
    if (props.disabled !== undefined) {
        uploadProps.disabled = props.disabled;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYImageWall, uploadProps)
    );
}

function renderCascader(props, state) {
    var cascaderProps = {};
    if (props.size) {
        cascaderProps.size = props.size;
    }
    if (props.options) {
        cascaderProps.options = props.options;
    }
    if (props.dataurl) {
        cascaderProps.dataurl = props.dataurl;
    }
    if (props.dataparams) {
        cascaderProps.dataparams = props.dataparams;
    }
    if (props.placeholder) {
        cascaderProps.placeholder = props.placeholder;
    }
    if (props.className) {
        cascaderProps.className = props.className;
    }
    if (props.changeOnSelect) {
        cascaderProps.changeOnSelect = props.changeOnSelect;
    }
    if (props.disabled !== undefined) {
        cascaderProps.disabled = props.disabled;
    }
    //表单中取值类型为string
    cascaderProps.onChangeValueType = 'string';
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYCascader, cascaderProps)
    );
}

function renderRadioGroup(props, state) {
    var radiogroupProps = {};
    if (props) {
        if (props.children) {
            radiogroupProps.children = props.children;
        }
        if (props.defaultValue !== undefined) {
            radiogroupProps.defaultValue = props.defaultValue;
        }
        if (props.className) {
            radiogroupProps.className = props.className;
        }
        if (props.disabled !== undefined) {
            radiogroupProps.disabled = props.disabled;
        }
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYRadioGroup, radiogroupProps)
    );
}

function renderCheckboxGroup(props, state) {
    var checkboxgroupProps = {};
    if (props.children) {
        checkboxgroupProps.children = props.children;
    }
    if (props.defaultValue !== undefined) {
        checkboxgroupProps.defaultValue = props.defaultValue;
    }
    if (props.disabled !== undefined) {
        checkboxgroupProps.disabled = props.disabled;
    }
    if (props.className) {
        checkboxgroupProps.className = props.className;
    }
    props.value = props.defaultValue;
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYCheckboxGroup, checkboxgroupProps)
    );
}
function renderInputMap(props, state) {
    var inputMapProps = {};
    if (props.disabled !== undefined) {
        inputMapProps.disabled = props.disabled;
    }
    if (props.className) {
        inputMapProps.className = props.className;
    }
    //props.value = props.defaultValue;
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYMapInput, inputMapProps)
    );
}
function renderEditor(props, state) {
    var editorProps = {};
    //if(props.disabled){
    //    inputMapProps.disabled = props.disabled
    //}
    //props.value = props.defaultValue;
    if (props.disabled !== undefined) {
        editorProps.disabled = props.disabled;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYEditor, editorProps)
    );
}

function renderPlainText(props, state) {
    switch (props.uifieldtype) {
        case 'boolean':
            {}
        case 'object':
            {}
        case 'date':
            {}
        default:
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(
            'span',
            null,
            props.value
        )
    );
}

function renderAttachMgr(props, state) {
    var attachMgrProps = {};
    if (props.billType) {
        attachMgrProps.billType = props.billType;
    }
    if (props.sourceId) {
        attachMgrProps.sourceId = props.sourceId;
    }
    if (props.sourceType) {
        attachMgrProps.sourceType = props.sourceType;
    }
    if (props.serverUrl) {
        attachMgrProps.serverUrl = props.serverUrl;
    }
    if (props.align) {
        attachMgrProps.align = props.align;
    }
    if (props.readOnly) {
        attachMgrProps.readOnly = props.readOnly;
    }
    if (props.enableUser !== undefined) {
        attachMgrProps.enableUser = props.enableUser;
    }
    if (props.btnType) {
        attachMgrProps.btnType = props.btnType;
    }
    if (props.showUploadBtn !== undefined) {
        attachMgrProps.showUploadBtn = props.showUploadBtn;
    }
    if (props.showDelBtn !== undefined) {
        attachMgrProps.showDelBtn = props.showDelBtn;
    }
    if (props.disabled !== undefined) {
        attachMgrProps.disabled = props.disabled;
    }
    if (props.buttonText) {
        attachMgrProps.buttonText = props.buttonText;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(AttachMgrWidget, attachMgrProps)
    );
}

function renderTimePicker(props, state) {
    var timePickerProps = {};
    if (props.placeholder) {
        timePickerProps.placeholder = props.placeholder;
    }
    if (props.format) {
        timePickerProps.format = props.format;
    }
    if (props.disabled != undefined && props.disabled != null) {
        timePickerProps.disabled = props.disabled;
    }
    if (props.disabledHours != undefined && props.disabledHours != null) {
        timePickerProps.disabledHours = props.disabledHours;
    }
    if (props.disabledMinutes != undefined && props.disabledMinutes != null) {
        timePickerProps.disabledMinutes = props.disabledMinutes;
    }
    if (props.disabledSeconds != undefined && props.disabledSeconds != null) {
        timePickerProps.disabledSeconds = props.disabledSeconds;
    }
    if (props.hideDisabledOptions != undefined && props.hideDisabledOptions != null) {
        timePickerProps.hideDisabledOptions = props.hideDisabledOptions;
    }
    if (props.getPopupContainer) {
        timePickerProps.getPopupContainer = props.getPopupContainer;
    }
    if (props.locale) {
        timePickerProps.locale = props.locale;
    }

    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYTimePicker, timePickerProps)
    );
}

var FormItemWidget = YYClass.create({
    getInitialState: function getInitialState() {
        return {
            rules: this.props.rules || []
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.rules && !_.isEqual(nextProps.rules, this.state.rules)) {
            this.setState({ rules: nextProps.rules });
        }
    },
    //动态设置验证规则
    setRules: function setRules(rules) {
        this.setState({ rules: rules });
    },
    _renderContent: function _renderContent(uitype, children) {
        var props = this.props;
        var state = this.state;
        switch (uitype) {
            case FormItemType.input:
                {
                    return renderInput(props, state);
                }
            case FormItemType.inputhidden:
                {
                    return renderIptHidden(props, state);
                }
            case FormItemType.select:
                {
                    return renderSelect(props, state);
                }
            case FormItemType.inputrefer:
                {
                    return renderIptRefer(props, state);
                }
            case FormItemType.date:
                {
                    return renderDate(props, state);
                }
            case FormItemType.number:
                {
                    return renderNumber(props, state);
                }
            case FormItemType.textarea:
                {
                    return renderTextarea(props, state);
                }
            case FormItemType.switch:
                {
                    return renderSwitch(props, state);
                }
            case FormItemType.enumselect:
                {
                    return renderEnumSelect(props, state);
                }
            case FormItemType.currency:
                {
                    return renderNumber(props, state, 'currency');
                }
            case FormItemType.attachupload:
                {
                    return renderAttachUpload(props, state);
                }
            case FormItemType.cascader:
                {
                    return renderCascader(props, state);
                }
            case FormItemType.imageupload:
                {
                    return renderImageUpload(props, state);
                }
            case FormItemType.radiogroup:
                {
                    return renderRadioGroup(props, state);
                }
            case FormItemType.checkboxgroup:
                {
                    return renderCheckboxGroup(props, state);
                }
            case FormItemType.inputmap:
                {
                    return renderInputMap(props, state);
                }
            case FormItemType.editor:
                {
                    return renderEditor(props, state);
                }
            case MDFieldType.plaintext:
                {
                    return renderPlainText(props, state);
                }
            case FormItemType.attachmgrw:
                {
                    return renderAttachMgr(props, state);
                }
            case FormItemType.time:
                {
                    return renderTimePicker(props, state);
                }
            default:
                return null;
        }
    },
    getFormItemCol: function getFormItemCol(attr) {
        var _props = this.props,
            labelCol = _props.labelCol,
            formLabelCol = _props.formLabelCol,
            wrapperCol = _props.wrapperCol,
            formWrapperCol = _props.formWrapperCol;

        if (attr === 'label') {
            if (labelCol) {
                //自身的
                return labelCol;
            } else if (formLabelCol) {
                //form传下来的
                return formLabelCol;
            } else {
                return { span: 6 //都未定义的
                };
            }
        } else if (attr === 'wrapper') {
            if (wrapperCol) {
                return wrapperCol;
            } else if (formWrapperCol) {
                return formWrapperCol;
            } else {
                return { span: 14 };
            }
        }
    },
    render: function render() {
        var _props2 = this.props,
            className = _props2.className,
            extra = _props2.extra,
            labelHelp = _props2.labelHelp,
            hasFeedback = _props2.hasFeedback,
            help = _props2.help,
            label = _props2.label,
            required = _props2.required,
            validateStatus = _props2.validateStatus,
            visible = _props2.visible;

        return React.createElement(
            YYFormItem,
            {
                visible: visible,
                label: label,
                help: help,
                extra: extra,
                labelHelp: labelHelp,
                className: className,
                required: required,
                labelCol: this.getFormItemCol('label'),
                wrapperCol: this.getFormItemCol('wrapper'),
                hasFeedback: hasFeedback,
                validateStatus: validateStatus },
            this._renderContent(this.props.uisubtype, this.props.children)
        );
    }
});

module.exports = FormItemWidget;