'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYForm = _require.YYForm,
    YYInput = _require.YYInput,
    YYFormItem = _require.YYFormItem,
    YYRow = _require.YYRow,
    YYCol = _require.YYCol;

var formatUtils = require('../../utils/formatUtils');
//匹配出计算公式中的字段
function getFactorFromFormula(mathFormula) {
    var r = new RegExp("\\{(.+?)\\}", "igm");
    return mathFormula.match(r);
}
// 运行计算公式
function mathFormulaResult(mathFormula, rowData, defaultValue) {
    var formula = '' + mathFormula;
    _.forIn(rowData, function (value, key) {
        formula = formula.replace(new RegExp('{' + escape(key) + '}', 'gm'), value ? escape(value) : 0);
    });
    try {
        var result = eval(formula);
        return isNaN(result) ? null : result;
    } catch (error) {
        console.error('[公式计算出错]', { formula: formula, mathFormula: mathFormula, rowData: rowData, error: error });
    }
    return defaultValue;
}

var FormWidget = YYClass.create({
    _getCloneProps: function _getCloneProps(target) {
        var props = {
            form: this.props.form,
            labelCol: this.props.labelCol,
            wrapperCol: this.props.wrapperCol
        };

        if (target.props.disabled != undefined) {
            props.disabled = target.props.disabled;
        } else {
            props.disabled = this.props.disabled;
        }

        if (target.props.labelCol) {
            props.labelCol = target.props.labelCol;
        }

        if (target.props.wrapperCol) {
            props.wrapperCol = target.props.wrapperCol;
        }

        return props;
    },
    _renderChildren: function _renderChildren(children, colnumber) {
        var _props$form = this.props.form,
            getFieldProps = _props$form.getFieldProps,
            setFieldsValue = _props$form.setFieldsValue,
            getFieldsValue = _props$form.getFieldsValue;

        var _this = this;
        var colSpan = Math.floor(24 / colnumber);
        var colViews = [];
        //子集不存在的相关属性值则继承父form的相关属性值
        var doCloneElement = function doCloneElement(target) {
            var props = _this._getCloneProps(target);
            return React.cloneElement(target, props);
        };
        //记录下配置的计算公式-------add by wuhao----------
        var formulas = [];
        _.forEach(children, function (child) {
            if (child.props.mathFormula) {
                _.forEach(getFactorFromFormula(child.props.mathFormula), function (fieldName) {
                    // formulas[fieldName.substring(1, fieldName.length - 1)] = formulaInfo
                    formulas.push({
                        key: fieldName.substring(1, fieldName.length - 1),
                        formulaInfo: child.props.mathFormula,
                        resultkey: child.props.uikey
                    });
                });
            }
        });
        //-------add by wuhao----------end
        //记录当前总span值
        var totalSpan = 0;
        _.forEach(children, function (child, rowIndex) {
            if (!React.isValidElement(child)) {
                console.warn('FormWidget无法解析非React对象元素', child);
            } else {
                //--------add by wuhao----------
                var resultKeySet = new Set();
                var currentFieldFormulas = _.filter(formulas, function (formulaField) {
                    resultKeySet.add(formulaField.resultkey);
                    //返回计算公式
                    return formulaField.key == child.props.uikey;
                });
                if (currentFieldFormulas && currentFieldFormulas.length) {
                    var _onChange = null;
                    if (child.props.onChange) {
                        _onChange = child.props.onChange;
                    }
                    //防止重复绑定onChange导致多次执行的问题
                    if (!child.props.onChangeWithMath) {
                        child.props.onChange = function (value) {
                            var mathResult = null;
                            var fieldsValue = getFieldsValue();
                            var fieldsValurOrigin = _.cloneDeep(fieldsValue); //计算前的表单值
                            _.forEach(currentFieldFormulas, function (formulas) {
                                //跟公式中的某一个计算列匹配时进行计算
                                fieldsValue[formulas.key] = value;
                                mathResult = mathFormulaResult(formulas.formulaInfo, fieldsValue, 0);
                                //数字类型默认格式化显示千分位,注意cellText=0的情况
                                if (typeof mathResult === 'number' || mathResult) {
                                    if (child.props.fieldtype == 'currency') {
                                        //精确数值
                                        var numStrs = (mathResult + "").split(".");
                                        var decimal = numStrs.length == 2 ? numStrs[1].length : 0; //保留原始小数位
                                        if (child.props.decimal >= 0) decimal = child.props.decimal; //保留列定义的小数位
                                        mathResult = formatUtils.formatNumber(mathResult, decimal, child.props.comma === false ? 0 : 3); //格式化千分位
                                    }
                                }
                                fieldsValue[formulas.resultkey] = mathResult;
                                setFieldsValue(fieldsValue);
                            });
                            if (_.isFunction(_onChange)) {
                                _onChange(value);
                            }
                            //执行结果字段上绑定的 onMathFormula 方法
                            var resultKeyChildren = _.filter(children, function (child) {
                                return Array.from(resultKeySet).includes(child.props.uikey);
                            });
                            _.forEach(resultKeyChildren, function (resultKeyChild) {
                                if (_.isFunction(resultKeyChild.props.onMathFormula)) {
                                    resultKeyChild.props.onMathFormula(fieldsValurOrigin[resultKeyChild.props.uikey], mathResult);
                                }
                            });
                        };
                        //将onChange保存下
                        child.props.onChangeWithMath = true;
                    }
                }
                //--------add by wuhao----------end
                if (child.props.uitype == 'FormItemWidget' || child.props.uitype == 'MDFormItem') {
                    //FormItemWidget
                    var span = colSpan; //默认布局一行N列
                    if (child.props.rowBreak) {
                        //强制换行
                        var spaceSpan = 24 - totalSpan % 24; //计算补全当前行需要填充的span值
                        if (spaceSpan > 0 && spaceSpan < 24) {
                            //填充一个占位单元补全整行
                            colViews.push(React.createElement(YYCol, { span: spaceSpan, className: 'space', style: { height: 45 } }));
                            totalSpan = totalSpan + spaceSpan;
                        }
                    }
                    if (child.props.newline) {
                        //独立一行
                        span = 24;
                    }
                    totalSpan = totalSpan + span;
                    var colStyle = {};
                    if (child.props.visible == false) colStyle.display = "none"; //是否隐藏本单元
                    colViews.push(React.createElement(
                        YYCol,
                        { key: "fromwidget_col_" + child.props.nid, span: span, className: child.props.className, style: colStyle },
                        doCloneElement(child)
                    ));
                } else {
                    //其它自定义组件，注意把form提供给自定义组件
                    colViews.push(React.cloneElement(child, { form: _this.props.form }));
                }
            }
        });
        return React.createElement(
            YYRow,
            { className: 'yyui-formwidget-rows' },
            colViews
        );
    },
    render: function render() {
        var _props = this.props,
            children = _props.children,
            colnumber = _props.colnumber;

        return React.createElement(
            YYForm,
            _extends({}, this.props, { form: null }),
            this._renderChildren(children, colnumber)
        );
    }
});

FormWidget = YYForm.create()(FormWidget);
module.exports = FormWidget;