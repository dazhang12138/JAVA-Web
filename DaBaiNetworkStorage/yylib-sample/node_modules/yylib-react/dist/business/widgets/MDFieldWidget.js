'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYFormItem = _require.YYFormItem,
    YYInput = _require.YYInput,
    YYSelect = _require.YYSelect,
    YYOption = _require.YYOption,
    YYInputNumber = _require.YYInputNumber,
    YYDatePicker = _require.YYDatePicker,
    YYTextarea = _require.YYTextarea,
    YYReferInput = _require.YYReferInput,
    YYSwitch = _require.YYSwitch,
    YYCascader = _require.YYCascader,
    YYRadioGroup = _require.YYRadioGroup,
    YYCheckboxGroup = _require.YYCheckboxGroup;

var YYEditor = require('yylib-ui/editor/YYEditor');
var AttachUploadWidget = require('./attach/AttachUploadWidget');
var YYImageWall = require('../attach/YYImageWall');
var YYEnumSelect = require('../enum/YYEnumSelect');
var YYMapInput = require('../map/YYMapInput');
var BaseHost = require('../BaseHost');
var MDFieldType = require('./MDFieldType');

//解决切换组件类型，表单报错问题
var InputItem = React.createClass({
    displayName: 'InputItem',

    render: function render() {
        var children = this.props.children;

        var inputProps = _.assign({}, this.props);
        delete inputProps.children;
        return React.cloneElement(children, inputProps);
    }
});

function renderInput(props, state) {
    var inputProps = {};
    if (props.maxLength) {
        inputProps.maxLength = props.maxLength;
    }
    if (props.disabled != undefined) {
        inputProps.disabled = props.disabled;
    }
    if (props.addonAfter) {
        inputProps.addonAfter = props.addonAfter;
    }
    if (props.onBlur) {
        inputProps.onBlur = props.onBlur;
    }
    if (props.placeholder) {
        inputProps.placeholder = props.placeholder;
    }
    if (props.className) {
        inputProps.className = props.className;
    }
    if (props.defaultValue) {
        inputProps.defaultValue = props.defaultValue;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYInput, inputProps)
    );
}

function renderEditor(props, state) {
    var editorProps = {};
    //if(props.disabled){
    //    inputMapProps.disabled = props.disabled
    //}
    //props.value = props.defaultValue;
    if (props.disabled !== undefined) {
        editorProps.disabled = props.disabled;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYEditor, editorProps)
    );
}

function renderNumber(props, state, type) {
    var numProps = {};
    if (props.min) {
        numProps.min = props.min;
    }
    if (props.max) {
        numProps.max = props.max;
    }
    if (props.decimal || props.decimal === 0) {
        numProps.decimal = props.decimal;
    }
    if (props.symbol || props.symbol === '') {
        numProps.symbol = props.symbol;
    }
    if (props.disabled != undefined) {
        numProps.disabled = props.disabled;
    }
    if (props.direction) {
        numProps.direction = props.direction;
    }
    if (props.onBlur) {
        numProps.onBlur = props.onBlur;
    }
    if (props.placeholder) {
        numProps.placeholder = props.placeholder;
    }
    if (props.addonAfter) {
        numProps.addonAfter = props.addonAfter;
    }
    if (props.className) {
        numProps.className = props.className;
    }
    if (props.defaultValue != undefined) {
        numProps.defaultValue = parseInt(props.defaultValue);
        props.defaultValue = parseInt(props.defaultValue); //确保必填验证数字类型通过
    }
    var passProps = getVerifyProps(props, state);
    if (type) {
        if (props.commaVisible === false) {
            numProps.commaVisible = props.commaVisible;
        }
        if (props.minus) {
            numProps.minus = props.minus;
        }
        return React.createElement(
            InputItem,
            passProps,
            React.createElement(YYInputNumber, _extends({}, numProps, { type: type }))
        );
    } else {
        return React.createElement(
            InputItem,
            passProps,
            React.createElement(YYInputNumber, numProps)
        );
    }
}

function renderSelect(props, state) {
    var selectProps = {};
    // if(props.children) {
    //     selectProps.items = _.map(props.children, function (child) {
    //         return {
    //             value: child.props.value,
    //             text: child.props.text,
    //         }
    //     })
    // }
    // if(props.disabled){
    //     selectProps.disabled = props.disabled
    // }
    props.value = props.defaultValue;
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYSelect, props)
    );
}

function renderEnumSelect(props, state) {
    var enumSelectProps = {};
    if (props.disabled) {
        enumSelectProps.disabled = props.disabled;
    }
    if (props.enableOrg) {
        enumSelectProps.enableOrg = props.enableOrg;
    }
    if (props.code) {
        enumSelectProps.code = props.code;
    }
    if (props.serverUrl) {
        enumSelectProps.serverUrl = props.serverUrl;
    }
    if (props.allowClear) {
        enumSelectProps.allowClear = props.allowClear;
    }
    if (props.valueType) {
        enumSelectProps.valueType = props.valueType;
    }
    if (props.multiple) {
        enumSelectProps.multiple = props.multiple;
    }
    if (props.valueKey) {
        enumSelectProps.valueKey = props.valueKey;
    }
    if (props.textKey) {
        enumSelectProps.textKey = props.textKey;
    }
    if (props.dataparams) {
        enumSelectProps.dataparams = props.dataparams;
    }
    if (props.className) {
        enumSelectProps.className = props.className;
    }
    if (props.defaultActiveFirstOption !== undefined) {
        enumSelectProps.defaultActiveFirstOption = props.defaultActiveFirstOption;
    }
    if (props.defaultValue !== undefined) {
        enumSelectProps.defaultValue = props.defaultValue;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYEnumSelect, enumSelectProps)
    );
}

function renderCheckboxGroup(props, state) {
    var checkboxgroupProps = {};
    if (props.children) {
        checkboxgroupProps.children = props.children;
    }
    if (props.defaultValue !== undefined) {
        checkboxgroupProps.defaultValue = props.defaultValue;
    }
    if (props.disabled != undefined) {
        checkboxgroupProps.disabled = props.disabled;
    }
    if (props.className) {
        checkboxgroupProps.className = props.className;
    }
    props.value = props.defaultValue;
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYCheckboxGroup, checkboxgroupProps)
    );
}

function renderIptRefer(props, state) {
    var referProps = {};
    if (props && props.refinfokey) {
        referProps.refinfokey = props.refinfokey;
    }
    if (props.multiselect) {
        referProps.multiselect = props.multiselect;
    }
    if (props.often) {
        referProps.often = props.often;
    }
    if (props.searchPlaceholder) {
        referProps.searchPlaceholder = props.searchPlaceholder;
    }
    if (props.condition) {
        referProps.condition = props.condition;
    }
    if (props.disabled != undefined) {
        referProps.disabled = props.disabled;
    }
    if (props.checkControl === false) {
        referProps.checkControl = props.checkControl;
    }
    if (props.onShow) {
        referProps.onShow = props.onShow;
    }
    if (props.className) {
        referProps.className = props.className;
    }
    if (props.serverUrl) {
        referProps.serverUrl = props.serverUrl;
    } else {
        //注意：依据环境标识，自动配置serverUrl的地址
        referProps.serverUrl = BaseHost;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYReferInput, referProps)
    );
}

function renderSwitch(props, state) {
    var switchProps = {};
    if (props.defaultChecked !== undefined) {
        switchProps.defaultChecked = props.defaultChecked;
    }
    if (props.checkedChildren) {
        switchProps.checkedChildren = props.checkedChildren;
    }
    if (props.unCheckedChildren) {
        switchProps.unCheckedChildren = props.unCheckedChildren;
    }
    if (props.disabled != undefined) {
        switchProps.disabled = props.disabled;
    }
    if (props.className) {
        switchProps.className = props.className;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYSwitch, switchProps)
    );
}

function renderDate(props, state) {
    var dateProps = {};
    if (props.format) {
        dateProps.format = props.format;
    }
    if (props.disabled != undefined) {
        dateProps.disabled = props.disabled;
    }
    if (props.disabledDate) {
        dateProps.disabledDate = props.disabledDate;
    }
    if (props.toggleOpen) {
        dateProps.toggleOpen = props.toggleOpen;
    }
    if (props.showTime) {
        dateProps.showTime = props.showTime;
    }
    if (props.placeholder) {
        dateProps.placeholder = props.placeholder;
    }
    if (props.className) {
        dateProps.className = props.className;
    }
    if (props.defaultValue) {
        dateProps.defaultValue = props.defaultValue;
    }
    var passProps = getVerifyProps(props, state);
    return React.createElement(
        InputItem,
        passProps,
        React.createElement(YYDatePicker, dateProps)
    );
}

var MDFieldWidget = YYClass.create({
    _renderContent: function _renderContent(uitype, children) {
        var props = this.props;
        var state = this.state;
        switch (uitype) {
            case MDFieldType.input:
                {
                    return renderInput(props, state);
                }
            case MDFieldType.editor:
                {
                    return renderEditor(props, state);
                }
            case MDFieldType.currency:
                {
                    return renderNumber(props, state, 'currency');
                }
            case MDFieldType.number:
                {
                    return renderNumber(props, state);
                }
            case MDFieldType.select:
                {
                    return renderSelect(props, state);
                }
            case MDFieldType.enumselect:
                {
                    return renderEnumSelect();
                }
            case MDFieldType.checkboxgroup:
                {
                    return renderCheckboxGroup();
                }
            case MDFieldType.inputrefer:
                {
                    return renderIptRefer();
                }
            case MDFieldType.switch:
                {
                    return renderSwitch();
                }
            case MDFieldType.date:
                {
                    return renderDate();
                }
            case MDFieldType.edittable:
                {}
            case MDFieldType.form:
                {}
        }
    },
    render: function render() {
        return React.createElement(
            YYFormItem,
            null,
            this._renderContent(this.props.uisubtype, this.props.children)
        );
    }
});

module.exports = MDFieldWidget;