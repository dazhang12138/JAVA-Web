'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYButton = _require.YYButton,
    YYIcon = _require.YYIcon,
    YYBadge = _require.YYBadge,
    YYMessage = _require.YYMessage;

var EnvUtils = require('yylib-utils/EnvUtils').default;
var field = YYClass.field;
var PropTypes = YYClass.PropTypes;
var AttachMgrModal = require('../../attach/mgr/AttachMgrModal');
var ADDR = require('../../BaseHost');

var _require2 = require("../../attach/attachaction"),
    loadAttachList = _require2.loadAttachList,
    listUrl = _require2.listUrl;

var uiMeta = {
    name: "AttachMgrWidget",
    fields: [field('serverUrl', ADDR, PropTypes.string, true, '上传地址'), field('sourceId', '', PropTypes.string, true, '业务单据ID'), field('showUploadBtn', true, PropTypes.bool, false, '是否显示上传按钮'), field('showDelBtn', true, PropTypes.bool, false, '是否显示删除按钮'), field('readOnly', false, PropTypes.bool, false, '设置是否只读'), field('enableUser', true, PropTypes.bool, false, '当前用户'), field('billType', '', PropTypes.string, false, '单据类型'), field('onClickBefore', null, PropTypes.func, false, '附件按钮点击之前的回调方法'), field('beforeUpload', null, PropTypes.func, false, ''), field('beforeDel', null, PropTypes.func, false, ''), field('btnType', '', PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'error', '']), false, '设置按钮类型，可选值为 primary|success|info|warning|error 或者不设'), field('buttonText', '附件管理', PropTypes.string, false, '附件管理按钮显示文本'), field('_type', 'YYPage', PropTypes.string, false, '组件类型'), field('fileTypes', null, PropTypes.array, false, '文件分类'), field('sourceType', '102345678', PropTypes.string, false, '文件类型')]
};

var AttachMgrWidget = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            visible: false,
            fileLength: 0
        };
    },
    _getUser: function _getUser() {
        if (this.props.enableUser) {
            return {
                userName: EnvUtils.getValue(EnvUtils.Keys.USER_NAME),
                userId: EnvUtils.getValue(EnvUtils.Keys.USER_ID)
            };
        } else {
            return { userName: '', userId: '' };
        }
    },
    _onCancel: function _onCancel(fileIds) {
        this.setState({ visible: false }, function () {
            if (_.isFunction(this.props.onCancel)) {
                this.props.onCancel();
            }
        });
    },
    _onShowAttachMgr: function _onShowAttachMgr() {
        var isValid = true;
        if (this.props.onClickBefore && _.isFunction(this.props.onClickBefore)) {
            isValid = this.props.onClickBefore();
        }
        if (isValid) {
            this.setState({ visible: true });
        }
    },
    _onDataChange: function _onDataChange(fileIdsJSON, fileLength) {
        var _this = this;

        //先更新文件数量
        this.setState({ fileLength: fileLength }, function () {
            if (_.isFunction(_this.props.onChange)) {
                //配置了多sourceType 就返回所有完整的对象
                if (_this.props.fileTypes) {
                    _this.props.onChange(fileIdsJSON);
                }
                //只有一个sourceType时返回改sourceType下的ids，适用于表单内的情况
                else {
                        var fileIds = fileIdsJSON ? JSON.parse(fileIdsJSON) : {};
                        //102345678 是未设置sourceType时的默认值
                        var sourceType = _this.props.sourceType ? _this.props.sourceType : '102345678';
                        var returnValue = fileIds[sourceType] ? fileIds[sourceType] : null;
                        _this.props.onChange(returnValue);
                    }
            }
        });
    },
    componentDidMount: function componentDidMount() {
        var _this2 = this;

        var _props = this.props,
            sourceId = _props.sourceId,
            billType = _props.billType,
            sourceType = _props.sourceType,
            serverUrl = _props.serverUrl,
            fileLengthVisible = _props.fileLengthVisible;

        if (fileLengthVisible == true) {
            loadAttachList(serverUrl + listUrl, { id: sourceId, billType: billType, type: sourceType }, function (data) {
                _this2.setState({ fileLength: data.length });
            }, function (msg) {
                YYMessage.error('msg', msg);
            });
        } else {
            //fileLength == 0时角标自动隐藏
            this.setState({ fileLength: 0 });
        }
    },
    render: function render() {
        var _state = this.state,
            visible = _state.visible,
            fileLength = _state.fileLength;
        var _type = this.props._type;

        var user = this._getUser();
        var attachMgrModal = React.createElement(AttachMgrModal, _extends({}, this.props, {
            onCancel: this._onCancel,
            visible: visible,
            userId: user.userId,
            userName: user.userName,
            onChange: this._onDataChange }));
        var buttonText = this.props.buttonText === undefined ? this.props.uititle : this.props.buttonText;
        if (_type == 'YYPage') {
            return React.createElement(
                'span',
                null,
                React.createElement(
                    YYBadge,
                    { count: fileLength, className: 'attachmgr-widget' },
                    React.createElement(
                        YYButton,
                        { onClick: this._onShowAttachMgr, type: this.props.btnType },
                        buttonText
                    ),
                    attachMgrModal
                )
            );
        } else if (_type == 'CPCardPage') {
            return React.createElement(
                'div',
                { className: 'cp2-icontitle-button', onClick: this._onShowAttachMgr },
                React.createElement(
                    YYBadge,
                    { count: fileLength, className: 'attachmgr-widget' },
                    React.createElement(YYIcon, { type: 'paper-clip' }),
                    React.createElement(
                        'span',
                        null,
                        buttonText
                    ),
                    attachMgrModal
                )
            );
        }
    }
});

module.exports = AttachMgrWidget;