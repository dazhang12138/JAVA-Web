'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYTable = _require.YYTable,
    YYMessage = _require.YYMessage,
    YYModal = _require.YYModal;

var ajax = require('yylib-utils/ajax');
var REST_QUERY = "/common/findJsonArrayPage";
var REST_DELETE = "/common/batchdelete";
var TableWidget = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            queryMethod: 'post',
            queryUrl: null, //分页查询请求的URL
            queryParam: null, //分页查询请求的附加参数
            onQueryResult: null, //分页查询结果的包装回调
            onQuerySuccess: null, //分页查询请求成功后的回调
            onQueryFail: null, //分页查询请求失败后的回调
            onQueryParam: null, //分页查询请求的参数回调
            deleteUrl: null, //删除行数据请求的URL
            deleteParam: null, //删除行数据请求附加的参数
            onDeleteParam: null, //删除行数据的参数回调
            onDeleteSuccess: null, //删除行数据请求成功后的回调
            onDeleteFail: null, //删除行数据请求失败后的回调
            autoQuery: true //是否自动进行查询
        };
    },
    getInitialState: function getInitialState() {
        return {
            dataSource: this.props.dataSource,
            loading: false, rowSelection: this._rowSelection(), pagination: this._pagination(this.props.pagination)
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('dataSource' in nextProps) {
            this.setState({ dataSource: nextProps.dataSource });
        }
        if ('pagination' in nextProps || 'pagination' in this.props) {
            this.setState({ pagination: this._pagination(nextProps.pagination) });
        }
    },
    //_getBaseUrl:function(){
    //    var {dataprops} = this.props;
    //    if(dataprops&&dataprops.system&&dataprops.system.baseUrl&&dataprops.system.systemName){
    //        return dataprops.system.baseUrl+dataprops.system.systemName;
    //    }
    //},
    _getEntityName: function _getEntityName() {
        var dataprops = this.props.dataprops;

        if (dataprops && dataprops.entity && dataprops.entity.entityFullName) {
            return dataprops.entity.entityFullName;
        }
    },
    //多选模式下的相关配置
    _rowSelection: function _rowSelection() {
        var that = this;

        var _ref = this.props.rowSelection || {},
            onChange = _ref.onChange;

        var rowSelection = _.assign({
            selectedRowKeys: []
        }, this.props.rowSelection);
        //行勾选变更时的配置
        rowSelection.onChange = function (selectedRowKeys, selectedRows) {
            that.state.rowSelection.selectedRowKeys = selectedRowKeys;
            if (_.isFunction(onChange)) {
                onChange(selectedRowKeys, selectedRows);
            }
            that.setState();
        };
        return rowSelection;
    },
    //分页模式下的相关配置
    _pagination: function _pagination(propsPagination) {
        var that = this;
        if (propsPagination == false) {
            return false;
        }

        var _ref2 = propsPagination || {},
            onChange = _ref2.onChange,
            onShowSizeChange = _ref2.onShowSizeChange;
        //分页的相关配置


        var pageSize = YYTable.getLocalPageSize(that.props.key);
        if (!pageSize) {
            //当不存在用户本地缓存的分页PageSize值
            //当存在自定义分页配置项获取默认第一项作为PageSize
            if (propsPagination && propsPagination.pageSizeOptions && propsPagination.pageSizeOptions.length > 0) {
                pageSize = propsPagination.pageSizeOptions[0];
            } else {
                //否则获取表格默认pageSize
                pageSize = YYTable.getDefaultPageSize(that.props.key);
            }
        }
        var pagination = _.assign({
            current: 1,
            pageSize: pageSize
        }, propsPagination);
        //当跳转页码时
        pagination.onChange = function (current) {
            that.state.pagination.current = current;
            if (_.isFunction(onChange)) {
                onChange(current);
            }
            that.queryData();
        };
        //当每页显示数发生变更时
        pagination.onShowSizeChange = function (current, pageSize) {
            that.state.pagination.current = current;
            that.state.pagination.pageSize = pageSize;
            if (_.isFunction(onShowSizeChange)) {
                onShowSizeChange(current, pageSize);
            }
            that.queryData();
        };
        return pagination;
    },
    /**
     * 获取当前勾选的行记录键值
     * @returns array[string]
     */
    getSelectedRowKeys: function getSelectedRowKeys() {
        return this.state.rowSelection ? this.state.rowSelection.selectedRowKeys : null;
    },
    /**
     * 获取当前勾选的行数据
     */
    getSelectedRowData: function getSelectedRowData() {
        var rowKey = this.props.rowKey;

        var selectedRowKeys = this.getSelectedRowKeys();
        var rowData = this.getDataSource();
        //匹配出当前勾选行数据
        var selectedRowData = _.filter(rowData, function (row) {
            if (_.includes(selectedRowKeys, row[rowKey])) {
                return row;
            }
        });
        return selectedRowData;
    },
    /**
     * 获取表格数据源
     */
    getDataSource: function getDataSource() {
        return this.state.dataSource;
    },
    /**
     * 获取分页信息
     * @returns object
     */
    getPagination: function getPagination() {
        return this.state.pagination;
    },
    /**
     * 执行分页查询表格数据，发送请求给queryUrl
     * options参数列表
     * @param clearSelected 是否清理勾选状态,默认true
     */
    queryData: function queryData(options) {
        var _ref3 = options || {},
            clearSelected = _ref3.clearSelected;

        var _props = this.props,
            queryMethod = _props.queryMethod,
            queryUrl = _props.queryUrl,
            queryParam = _props.queryParam,
            onQueryResult = _props.onQueryResult,
            onQuerySuccess = _props.onQuerySuccess,
            onQueryFail = _props.onQueryFail,
            onQueryParam = _props.onQueryParam,
            children = _props.children;

        var that = this;
        var _params = {};
        //_params.sort = [];
        //查询接口URL
        var _url = queryUrl; //?queryUrl:this._getBaseUrl()?this._getBaseUrl()+"/commons/jpa/queryPage":null;
        var pagination = this.state.pagination;
        //分页查询参数

        var pageNumber = pagination.current;
        var pageSize = pagination.pageSize;
        //需要查询的对象
        var entityName = this._getEntityName();
        if (entityName) _params.entityName = entityName;
        //需要查询的字段
        var properties = [];
        //需要排序的字段
        var querySort = [];
        //遍历字段列
        _.forEach(children, function (column) {
            var _dataIndex;
            var _dummyField; //虚拟字段-不参与默认查询
            if (React.isValidElement(column)) {
                _dataIndex = column.props.dataIndex;
                _dummyField = column.props.dummyField;
            } else {
                _dataIndex = column.dataIndex;
                _dummyField = column.dummyField;
            }
            if (_dummyField == true) return;
            if (_dataIndex) properties.push(_dataIndex);
            if (column.dataprops && column.dataprops.orderby) {
                querySort.push(_dataIndex + ":" + column.dataprops.orderby);
            }
        });
        var defaultParams = {
            properties: properties,
            pageNumber: pageNumber - 1,
            pageSize: pageSize,
            resultType: 'JSON'
        };
        //通用排序参数
        if (_.isArray(querySort) && querySort.length > 0) {
            defaultParams.sort = querySort;
        }
        _params = _.assign(_params, defaultParams, _.isFunction(queryParam) ? queryParam() : queryParam);
        //查询参数的回调
        if (_.isFunction(onQueryParam)) {
            _params = onQueryParam(_params);
        }
        if (!_url) return;
        //默认清理勾选状态
        if (clearSelected !== false) {
            this.clearSelectRowKeys();
        }
        this.setState({ loading: true }); //开启遮罩
        //执行查询
        var callAjax;
        if (queryMethod == 'get') {
            callAjax = ajax.getJSON;
        } else {
            callAjax = ajax.postJSON;
        }
        callAjax.call(ajax, _url, _params, function (result) {
            //包装分页查询的结果回调
            if (_.isFunction(onQueryResult)) {
                result = onQueryResult(result);
            }
            var backMsg = result && result.backMsg ? result.backMsg : null;
            //java端返回的格式为JsonBackData+Page格式
            if (result && result.success) {
                var dataSource = result.backData;
                if (dataSource) {
                    //本页数据
                    that.state.dataSource = dataSource.content;
                    //分页数据
                    if (that.state.pagination) {
                        that.state.pagination.current = dataSource.number + 1;
                        that.state.pagination.total = dataSource.totalElements;
                        that.state.pagination.pageSize = dataSource.size;
                    }
                } else {
                    that.state.dataSource = [];
                }
            } else {
                //显示后端自定义错误提示
                if (backMsg) YYMessage.error(backMsg);
            }
            //成功回调外部事件
            if (_.isFunction(onQuerySuccess)) {
                onQuerySuccess(result);
            }
            //关闭遮罩
            that.state.loading = false;
            that.setState();
        }, function () {
            YYMessage.error('查询数据失败');
            //失败回调外部事件
            if (_.isFunction(onQueryFail)) {
                onQueryFail();
            }
            //关闭遮罩
            that.state.loading = false;
            that.setState();
        });
    },
    componentDidMount: function componentDidMount() {
        var autoQuery = this.props.autoQuery;

        if (autoQuery !== false) {
            this.queryData(); //初始化查询数据
        }
    },
    /**
     * 清除全部勾选状态
     */
    clearSelectRowKeys: function clearSelectRowKeys() {
        //清除历史勾选项
        if (this.state.rowSelection) {
            this.state.rowSelection.selectedRowKeys = [];
            this.setState();
        }
    },
    /**
     * 将勾选行的数据发送请求给deleteUrl
     */
    deleteData: function deleteData(options) {
        var _ref4 = options || {},
            onConfirm = _ref4.onConfirm;

        var _props2 = this.props,
            deleteUrl = _props2.deleteUrl,
            deleteParam = _props2.deleteParam,
            onDeleteParam = _props2.onDeleteParam,
            onDeleteSuccess = _props2.onDeleteSuccess,
            onDeleteFail = _props2.onDeleteFail;

        var that = this;
        //获取行勾选的数据键值
        var ids = this.getSelectedRowKeys();
        if (ids && ids.length) {
            var confirmOk = function confirmOk() {
                var _params = { ids: ids };
                //需要删除的对象
                var entityName = that._getEntityName();
                if (entityName) _params.entityName = entityName;
                _params = _.assign(_params, _.isFunction(deleteParam) ? deleteParam() : deleteParam);
                //删除参数重写的回调
                if (_.isFunction(onDeleteParam)) {
                    _params = onDeleteParam(_params);
                }
                //删除接口URL
                var _url = deleteUrl; //?deleteUrl:that._getBaseUrl()+"/commons/jpa/multiDelete";
                if (!_url) return;
                //执行删除
                ajax.postJSON(_url, _params, function (result) {
                    //显示后端自定义错误提示
                    var backMsg = result && result.backMsg ? result.backMsg : "数据删除失败";
                    if (result && result.success) {
                        //删除成功
                        //重新刷新列表
                        that.queryData();
                    } else {
                        YYMessage.error(backMsg);
                    }
                    //成功回调外部事件
                    if (_.isFunction(onDeleteSuccess)) {
                        onDeleteSuccess(result);
                    }
                }, function () {
                    //失败回调外部事件
                    if (_.isFunction(onDeleteFail)) {
                        onDeleteFail();
                    }
                    YYMessage.error('数据删除失败');
                });
            };

            ;
            var confirmContent = _.assign({
                title: '删除确认',
                content: '您确定要删除这' + ids.length + '行数据?',
                onOk: confirmOk
            }, typeof onConfirm == 'function' ? onConfirm(ids) : onConfirm);
            YYModal.confirm(confirmContent);
        } else {
            YYMessage.error('请勾选需要删除的数据');
        }
    },
    render: function render() {
        return React.createElement(YYTable, _extends({}, this.props, { dataSource: this.state.dataSource, loading: this.state.loading, rowSelection: this.state.rowSelection, pagination: this.state.pagination }));
    }
});

module.exports = TableWidget;