'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYMenuItem = _require.YYMenuItem,
    YYMenu = _require.YYMenu,
    YYMessage = _require.YYMessage,
    YYInput = _require.YYInput,
    YYButton = _require.YYButton,
    YYDropdown = _require.YYDropdown,
    YYTabs = _require.YYTabs,
    YYTab = _require.YYTab;

var Trigger = require('rc-trigger');

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var classnames = require('classnames');
var YYSearchTable = require('./YYSearchTable');
var YYSearchSort = require('../searchsort/YYSearchSort');
var FormItemType = require('../widgets/FormItemType');
var EnvUtils = require('yylib-utils/EnvUtils').default;
var Constant = require('./Constant');
var ajax = require('../../utils/ajax');
var url = require('./Resturl');
var Actions = require('./ActionTypes');
require('./index.less');

//定义META
var uiMeta = {
    name: 'search',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('fields', undefined, PropTypes.array, true, '查询字段'), field('billType', '', PropTypes.string, true, '单据类型编码'), field('entityName', '', PropTypes.string, true, '实体'), field('userId', '', PropTypes.string, false, '用户的唯一标识'), field('orgId', '', PropTypes.string, false, '组织ID'), field('activeTpl', {}, PropTypes.object, false, '当前活动的方案,方案栏切换时传递该属性,搜索框需要进行联动'), field('enableSenior', false, PropTypes.bool, false, '是否启用高级搜索'), field('enableSort', false, PropTypes.bool, false, '是否启用排序功能'), field('enableUser', true, PropTypes.bool, true, '启用当前用户'), field('enableOrg', true, PropTypes.bool, true, '启用当前组织'), field('enableRole', true, PropTypes.bool, true, '启用当前角色'), field('enableItemSearch', true, PropTypes.bool, false, '是否启用单项搜索'), field('enableElasticSearch', true, PropTypes.bool, false, '是否启用全文检索'), field('enablePublic', true, PropTypes.bool, false, '是否启用收藏公共方案'), field('searchUrl', url.SEARCH_ENTITITES, PropTypes.string, false, '执行搜索服务的URL'), field('serverUrl', url.SEARCH_TEMPLATE, PropTypes.string, false, '执行方案服务服务的URL'), field('onSchemeChange', null, PropTypes.func, false, '搜索方案发生变化时的回调'), field('onMetaSearchParam', null, PropTypes.func, false, '元数据搜索参数回调,可以对搜索参数做调整(与onMetaSearch配合使用)'), field('onMetaSearch', null, PropTypes.func, false, '执行元数据搜索的回调(优先级最高,执行该回调函数后不会执行onSearch和onSearchResult)'), field('onSearch', null, PropTypes.func, false, '执行搜索的回调，需要自己主动发送请求，Function(type: string, condition: string/array, keywords: array, entityName: string)。 type有三种类型(item - 下拉单项,table - 表格,text - 文本关键词)'), field('onSearchResult', null, PropTypes.func, false, '返回搜素结果的回调，搜索请求在组件内部调用,只有在未定义onSearch的时候执行，Function(result: any)'), field('popupAlign', {
        points: ['tl', 'bl'],
        offset: [-96, 0]
    }, PropTypes.object, false, '弹出层对齐方式 https://github.com/yiminghe/dom-align'), field('isClear', false, null, false, '是否清除文本框中的value'), field('placeholder', '请输入搜索内容', PropTypes.string, false, '搜索框提示文本'), field('buttonText', '查询方案', PropTypes.string, false, '搜索按钮显示文本'), field('buttonIcon', null, PropTypes.string, false, '搜索按钮图标')]
};

var YYSearchCondition = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var fieldKeys = this.props.fields ? this._getFieldKeysFrom(this.props.fields) : this._getFieldKeysFrom(this.props.children, 'children');
        this.containerId = "yyui-search-container-" + YYClass.uuid();
        return {
            value: '',
            visibleBox: false,
            visibleMenu: false,
            activeKey: '', //激活状态menuItem
            fieldKeys: fieldKeys, //fields里key组成的数组
            isClear: this.props.isClear,
            sortData: [],
            sort: ''
        };
    },
    componentDidMount: function componentDidMount() {
        this._addEvent();
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var isFieldsEqual = _.isEqual(nextProps.fields, this.props.fields);
        var isChildEqual = _.isEqual(nextProps.children, this.props.children);
        if (nextProps.isClear) {
            var e = { target: { value: '' } };
            console.log(e);
            this._onInputChange(e);
        }
        if (isFieldsEqual && isChildEqual) {
            return;
        }
        if (nextProps.fields) {
            this.setState({ fieldKeys: this._getFieldKeysFrom(nextProps.fields) });
        } else {
            this.setState({ fieldKeys: this._getFieldKeysFrom(nextProps.children, 'children') });
        }
    },

    componentDidUpdate: function componentDidUpdate() {
        this._addEvent();
    },
    componentWillUnmount: function componentWillUnmount() {
        document.removeEventListener('mousedown', this._onDocumentClick);
    },
    _addEvent: function _addEvent() {
        document.addEventListener('mousedown', this._onDocumentClick);
    },
    //收集fields的key
    _getFieldKeysFrom: function _getFieldKeysFrom(searchFields, from) {
        searchFields = from === 'children' ? this._getFieldsFromChild(searchFields) : searchFields;
        return _.map(searchFields, function (field) {
            return field.fieldkey;
        });
    },
    //从children里获取fields
    _getFieldsFromChild: function _getFieldsFromChild(children) {
        return _.map(React.Children.toArray(children), function (child) {
            if (React.isValidElement(child)) {
                var inputprops = child.props.inputprops ? _.clone(child.props.inputprops) : undefined;
                // 下拉选择特殊处理
                if (inputprops && child.props.inputtype === FormItemType.select) {
                    var items = child.props.children ? _.clone(child.props.children) : [];
                    var options = [];
                    if (items && items.length > 0) {
                        _.forEach(items, function (item) {
                            if (!item.props) {
                                return true;
                            }
                            var option = {};
                            option.value = item.props.value;
                            option.text = item.props.text || item.props.children;
                            options.push(option);
                        });
                    }
                    inputprops.items = options;
                }
                return {
                    fieldkey: child.props.fieldkey,
                    title: child.props.title,
                    fieldtype: child.props.fieldtype,
                    inputtype: child.props.inputtype,
                    inputprops: inputprops,
                    oper: child.props.oper || [],
                    enableOrder: child.props.enableOrder === undefined ? false : child.props.enableOrder,
                    enableSearch: child.props.enableSearch === undefined ? true : child.props.enableSearch,
                    hidden: child.props.hidden === undefined ? false : child.props.hidden,
                    required: child.props.required === undefined ? false : child.props.required,
                    readonly: child.props.readonly === undefined ? false : child.props.readonly,
                    presetFunc: child.props.funcId ? {
                        funcId: child.props.funcId,
                        funcCode: child.props.funcCode,
                        funcName: child.props.funcName
                    } : null
                };
            }
        });
    },
    //判断n是否在root内
    _contains: function _contains(root, n) {
        var node = n;
        while (node) {
            if (node === root) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    },
    //判断一个类数组里的每一个元素是包含target
    _hasTarget: function _hasTarget(arrayLike, target) {
        var _this = this;
        if (arrayLike && arrayLike.length > 0) {
            var array = Array.prototype.slice.call(arrayLike);
            return _.some(array, function (item) {
                return _this._contains(item, target);
            });
        }
    },
    //当点击以下以外的地方将搜索框关闭
    _onDocumentClick: function _onDocumentClick(event) {
        var target = event.target;
        var dropdownNodes = document.querySelectorAll('.ant-dropdown');
        var menuNodes = document.querySelectorAll('.search-condition .yyui-menu');
        var modalMaskNodes = document.querySelectorAll('.ant-modal-mask');
        var searchModals = document.querySelectorAll('.yyui-modal');
        var searchBoxNodes = document.querySelectorAll('.yyui-search-container');

        var targetInBox = false;
        var hasTarget = this._hasTarget;
        targetInBox = hasTarget(dropdownNodes, target) || hasTarget(modalMaskNodes, target) || hasTarget(menuNodes, target) || hasTarget(searchModals, target) || hasTarget(searchBoxNodes, target);
        this.targetInBox = targetInBox;
    },

    _onInputChange: function _onInputChange(event) {
        var value = event.target.value;
        if (value.trim() === '') {
            this.setState({ value: value, activeKey: '', visibleMenu: false });
        } else {
            this.setState({ value: value, activeKey: '', visibleMenu: true });
        }
    },
    _onPopupVisibleChange: function _onPopupVisibleChange(visible) {
        if (!this.targetInBox) {
            this.setState({ visibleBox: visible });
        }
    },
    onMetaSearchCallBack: function onMetaSearchCallBack() {
        var _this = this;
        setTimeout(function () {
            _this.setState({ visibleBox: false });
        }, 1000);
    },
    //搜索文本
    _onSearchText: function _onSearchText(text, searchFields) {
        var _this = this;
        var _props = this.props,
            searchUrl = _props.searchUrl,
            onMetaSearch = _props.onMetaSearch,
            onSearch = _props.onSearch,
            onSearchResult = _props.onSearchResult,
            entityName = _props.entityName,
            billType = _props.billType;


        if (_.isFunction(onMetaSearch)) {
            var querySchema = {};
            querySchema.billType = billType;
            querySchema.entityName = entityName;
            querySchema.searchText = text;
            querySchema.condition = this.dealHiddenItems(searchFields);
            onMetaSearch(querySchema);
            setTimeout(function () {
                _this.setState({ visibleMenu: false });
            }, 1000);
            return;
        }

        if (_.isFunction(onSearch)) {
            onSearch('text', text, this.state.fieldKeys, entityName);
            setTimeout(function () {
                _this.setState({ visibleMenu: false });
            }, 1000);
            return; //如果传入onSearch则不执行onSearchResult
        }
        if (_.isFunction(onSearchResult)) {
            //直接回车搜索
            var reqText = {};
            reqText.keys = this.state.fieldKeys;
            reqText.type = 'text';
            reqText.entityName = entityName;
            reqText.searchText = text;

            ajax.postJSON(searchUrl, reqText, function (result) {
                if (result.success) {
                    onSearchResult(result.backData);
                } else {
                    YYMessage.warning(result.backMsg);
                }
                _this.setState({ visibleMenu: false });
            });
        }
    },
    //搜索单项
    _onSearchItem: function _onSearchItem(item, searchFields) {
        var _this = this;
        var _props2 = this.props,
            searchUrl = _props2.searchUrl,
            onMetaSearch = _props2.onMetaSearch,
            onSearch = _props2.onSearch,
            onSearchResult = _props2.onSearchResult,
            entityName = _props2.entityName,
            billType = _props2.billType;


        if (_.isFunction(onMetaSearch)) {
            var querySchema = {};
            var condition = [];
            condition.push(item);
            var hiddenItems = this.dealHiddenItems(searchFields);
            querySchema.condition = condition.concat(hiddenItems);
            querySchema.billType = billType;
            querySchema.entityName = entityName;
            onMetaSearch(querySchema);
            setTimeout(function () {
                _this.setState({ visibleMenu: false });
            }, 1000);
            return;
        }

        if (_.isFunction(onSearch)) {
            onSearch('item', item, this.state.fieldKeys, entityName);
            setTimeout(function () {
                _this.setState({ visibleMenu: false });
            }, 1000);
            return; //如果传入onSearch则不执行onSearchResult
        }
        if (_.isFunction(onSearchResult)) {
            //选择下拉点击或回车搜索
            var reqItem = {};
            reqItem.keys = this.state.fieldKeys;
            reqItem.type = 'item';
            reqItem.condition = item;
            reqItem.entityName = entityName;

            ajax.postJSON(searchUrl, reqItem, function (result) {
                if (result.success) {
                    onSearchResult(result.backData);
                } else {
                    YYMessage.warning(result.backMsg);
                }
                _this.setState({ visibleMenu: false });
            });
        }
    },

    dealHiddenItems: function dealHiddenItems(searchFields) {
        var hiddenItems = [];

        var _ref = this.props || {},
            activeTpl = _ref.activeTpl,
            serverUrl = _ref.serverUrl;

        if (activeTpl && !_.isEmpty(activeTpl)) {
            // 1.从方案栏中选中的方案携带隐藏条件和必输只读条件
            var conditions = activeTpl.condition || [];
            hiddenItems = conditions.filter(function (condition) {
                return condition.hidden == true || condition.required == true && condition.readonly == true;
            });
        } else {
            // 2.从默认方案中携带隐藏条件和必输只读条件(TODO 这个是否放在后端处理比较好)
            // 3.从设计器中携带隐藏条件和必输只读条件
            _.forEach(searchFields, function (field) {
                var hidden = field.hidden === undefined ? false : field.hidden;
                var required = field.required === undefined ? false : field.required;
                var readonly = field.readonly === undefined ? false : field.readonly;
                if (hidden || required && readonly) {
                    var defaultData = '';
                    switch (field.inputtype) {
                        case FormItemType.switch:
                            defaultData = field.inputprops && field.inputprops.defaultChecked === true;
                            break;
                        case FormItemType.input:
                            defaultData = field.inputprops ? field.inputprops.value : '';
                            break;
                        case FormItemType.select:
                            defaultData = field.inputprops ? field.inputprops.defaultValue : '';
                            break;
                        case FormItemType.number:
                            defaultData = field.inputprops ? field.inputprops.defaultValue : '';
                            break;
                    }
                    var newItem = {
                        logic: 'and',
                        left: false,
                        field: field.fieldkey,
                        inputtype: field.inputtype,
                        hidden: hidden,
                        required: required,
                        readonly: readonly,
                        title: field.title,
                        compare: field.oper && field.oper.length > 0 ? field.oper[0] : null,
                        presetFunc: field.presetFunc,
                        data: defaultData,
                        right: false
                    };
                    hiddenItems.push(newItem);
                }
            });
        }
        return hiddenItems;
    },
    //选中下拉菜单某一项时
    _onClickMenu: function _onClickMenu(item, searchFields) {
        if (item && item.fieldkey) {
            // item
            this._onSearchItem({
                logic: 'and',
                left: false,
                right: false,
                data: this.state.value,
                compare: 'cn',
                field: item.fieldkey,
                title: item.title,
                inputtype: item.inputtype,
                presetFunc: item.presetFunc
            }, searchFields);
        } else if (this.props.enableElasticSearch != false) {
            // text
            this._onSearchText(this.state.value, searchFields);
        }
    },
    //使用键盘操作菜单
    _onKeyDown: function _onKeyDown(searchFields, event) {
        var activeKey = this.state.activeKey;
        var length = searchFields.length;
        //上方向键
        if (event.keyCode === 38) {
            var prev = searchFields[--length].fieldkey; //activeKey为空或开头时
            if (activeKey !== '' && activeKey !== searchFields[0].fieldkey) {
                _.forEach(searchFields, function (field, index) {
                    if (field.fieldkey === activeKey) {
                        prev = searchFields[--index].fieldkey;
                    }
                });
            }
            this.setState({ activeKey: prev });
        }
        //下方向键
        if (event.keyCode === 40) {
            var next = searchFields[0].fieldkey; //activeKey为空或末尾时
            if (activeKey !== '' && activeKey !== searchFields[--length].fieldkey) {
                _.forEach(searchFields, function (field, index) {
                    if (field.fieldkey === activeKey) {
                        next = searchFields[++index].fieldkey;
                    }
                });
            }
            this.setState({ activeKey: next });
        }
        //回车键
        if (event.keyCode === 13) {
            var target = _.filter(searchFields, function (field) {
                return field.fieldkey === activeKey;
            });
            this._onClickMenu({ item: target[0], fieldkey: activeKey }, searchFields);
        }
    },
    //下拉菜单
    _renderDropMenu: function _renderDropMenu(searchFields) {
        var _this = this;
        if (_.isArray(searchFields) && searchFields.length) {
            var menus = [];
            _.forEach(searchFields, function (menuItem) {
                if (menuItem.hidden != true && menuItem.inputtype != FormItemType.inputrefer) {
                    var cont = menuItem.title + ':' + _this.state.value;
                    var cls = _this.state.activeKey === menuItem.fieldkey ? 'ant-menu-item-active' : '';
                    menus.push(React.createElement(
                        YYMenuItem,
                        { className: cls, key: menuItem.fieldkey },
                        React.createElement(
                            'a',
                            { onClick: _this._onClickMenu.bind(null, menuItem, searchFields) },
                            cont
                        )
                    ));
                }
            });
            return React.createElement(
                YYMenu,
                null,
                menus
            );
        } else {
            return React.createElement(
                YYMenu,
                null,
                React.createElement(
                    YYMenuItem,
                    null,
                    '\u6682\u65E0\u76F8\u5173\u641C\u7D22\u5B57\u6BB5'
                )
            );
        }
    },

    _onTabChange: function _onTabChange(tabKey) {
        if ("searchCondition" === tabKey) {
            var rows = this.refs.sortTab.refs.sortTable.getDataSource();
            var sortData = [];
            if (rows && rows.length > 0) {
                _.forEach(rows, function (row) {
                    if (row.rowState != "del") {
                        var sortItem = {};
                        sortItem.field = row.field;
                        sortItem.sort = row.sort;
                        sortData.push(sortItem);
                    }
                });
                this.setState({ sortData: sortData });
            }
        }
    },

    onSwitchTplCallBack: function onSwitchTplCallBack(sort) {
        this.setState({ sort: sort });
    },

    _hiddenMenuAndClearInput: function _hiddenMenuAndClearInput() {
        this.setState({ value: '', activeKey: '', visibleMenu: false });
    },

    //搜素容器
    _renderSearchBox: function _renderSearchBox(searchFields, allFields) {
        //默认取属性fields
        var containerId = this.containerId; //容器id
        var userId = this.props.userId;
        if (!userId && this.props.enableUser) {
            userId = EnvUtils.getValue(EnvUtils.Keys.USER_ID);
        }
        var orgId = this.props.orgId;
        if (!orgId && this.props.enableOrg) {
            orgId = EnvUtils.getValue(EnvUtils.Keys.ORGA_ID);
        }
        var roleId = this.props.roleId;
        if (!roleId && this.props.enableRole) {
            roleId = EnvUtils.getValue(EnvUtils.Keys.CURRENT_ROLE_ID);
        }
        var conditionProps = {
            userId: userId,
            billType: this.props.billType,
            orgId: orgId,
            roleId: roleId,
            activeTpl: this.props.activeTpl,
            onSchemeChange: this.props.onSchemeChange,
            onMetaSearchParam: this.props.onMetaSearchParam,
            onMetaSearch: this.props.onMetaSearch,
            onSearch: this.props.onSearch,
            searchUrl: this.props.searchUrl,
            serverUrl: this.props.serverUrl,
            fieldKeys: this.state.fieldKeys,
            entityName: this.props.entityName,
            enableSenior: this.props.enableSenior,
            enablePublic: this.props.enablePublic,
            onSearchResult: this.props.onSearchResult,
            containerId: containerId
        };
        var searchBoxCls = classnames({
            'search-box': true
        });
        var searchConditionProps = _.assign({}, { fields: searchFields }, conditionProps);
        var sortConditionProps = _.assign({}, { fields: allFields }, conditionProps);
        return React.createElement(
            'div',
            { className: searchBoxCls, id: containerId },
            this.props.enableSort === true ? React.createElement(
                YYTabs,
                { defaultActiveKey: 'searchCondition', onChange: this._onTabChange },
                React.createElement(
                    YYTab,
                    { tab: '\u641C\u7D22\u6761\u4EF6', key: 'searchCondition' },
                    React.createElement(YYSearchTable, _extends({}, searchConditionProps, { sortData: this.state.sortData, ref: 'searchTab',
                        onMetaSearchCallBack: this.onMetaSearchCallBack,
                        onSwitchTplCallBack: this.onSwitchTplCallBack }))
                ),
                React.createElement(
                    YYTab,
                    { tab: '\u6392\u5E8F\u6761\u4EF6', key: 'sortCondition' },
                    React.createElement(YYSearchSort, _extends({}, sortConditionProps, { sort: this.state.sort, ref: 'sortTab' }))
                )
            ) : React.createElement(YYSearchTable, _extends({}, searchConditionProps, { onMetaSearchCallBack: this.onMetaSearchCallBack }))
        );
    },

    _showSearchBox: function _showSearchBox(e) {
        this.setState({
            visibleBox: true
        });
    },
    _clearInputChange: function _clearInputChange(e) {
        this.setState({ value: null });
    },

    render: function render() {
        var allFields = this.props.fields || this._getFieldsFromChild(this.props.children); //如果有子组件则从子组件里取
        var searchFields = _.clone(allFields).filter(function (field) {
            var searchField = field.enableSearch === undefined ? true : field.enableSearch;
            return searchField === true;
        });
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                YYDropdown,
                {
                    trigger: [],
                    visible: this.state.visibleMenu && this.props.enableItemSearch != false,
                    overlay: this._renderDropMenu(searchFields) },
                this.props.enableItemSearch != false || this.props.enableElasticSearch != false ? React.createElement(YYInput, { onChange: this._onInputChange, onKeyDown: this._onKeyDown.bind(this, searchFields),
                    value: this.state.value, placeholder: this.props.placeholder }) : React.createElement(
                    'div',
                    { className: 'yyui-input', onClick: this._showSearchBox },
                    React.createElement(
                        'span',
                        { 'class': 'ant-input-wrapper' },
                        React.createElement('div', { className: 'ant-input' })
                    )
                )
            ),
            React.createElement(
                Trigger,
                {
                    action: ["click"],
                    popupAlign: this.props.popupAlign,
                    popupVisible: this.state.visibleBox,
                    popup: this._renderSearchBox(searchFields, allFields),
                    onPopupVisibleChange: this._onPopupVisibleChange,
                    popupClassName: 'yyui-search-container' },
                React.createElement(
                    YYButton,
                    { icon: this.props.buttonIcon,
                        onClick: this._hiddenMenuAndClearInput },
                    this.props.buttonText
                )
            )
        );
    }
});

YYSearchCondition.Constant = Constant;
module.exports = YYSearchCondition;