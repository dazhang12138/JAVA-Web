'use strict';

/**
 * Created by xg on 2017/5/10.
 * 搜索方案标签组
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYTag = _require.YYTag,
    YYRow = _require.YYRow,
    YYCol = _require.YYCol;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var url = require('./Resturl');
var ajax = require('../../utils/ajax');
var Actions = require('./ActionTypes');
var EnvUtils = require('yylib-utils/EnvUtils').default;
var _ = require('lodash');

//定义META
var uiMeta = {
    name: 'schemeGroup',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('billType', '', PropTypes.string, true, '单据类型编码'), field('userId', '', PropTypes.string, false, '用户的唯一标识'), field('orgId', '', PropTypes.string, false, '组织ID'), field('enableUser', true, PropTypes.string, true, '启用当前用户'), field('enableOrg', true, PropTypes.string, true, '启用当前组织'), field('enableRole', true, PropTypes.string, true, '启用当前角色'), field('enableUnSelect', true, PropTypes.string, true, '是否允许取消激活方案'), field('serverUrl', url.SEARCH_TEMPLATE, PropTypes.string, false, '查询搜索方案的URL'), field('onSchemeClick', null, PropTypes.func, false, '点击方案标签的回调函数'), field('templates', [], PropTypes.array, false, '搜索方案集合'), field('activeTplId', '', PropTypes.string, false, '当前选中的搜索方案id')]
};

var YYSchemeGroup = YYClass.create({
    uiMeta: uiMeta,

    getInitialState: function getInitialState() {
        return {
            tplList: [], // 方案列表[{tplId(方案id),tplName(方案名称),isDefault(是否默认方案),isPublic(是否公共方案)}]
            tplId: '' // 当前选中的方案id
        };
    },

    componentDidMount: function componentDidMount() {
        this.getData();
        this.setState({ tplId: this.props.activeTplId });
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ("templates" in nextProps && this.props.templates != nextProps.templates) {
            this.setState({ tplList: nextProps.templates });
        }
        if ("activeTplId" in nextProps && this.props.activeTplId != nextProps.activeTplId) {
            this.setState({ tplId: nextProps.activeTplId });
        }
    },


    getData: function getData() {
        //获取方案列表
        var _props = this.props,
            userId = _props.userId,
            billType = _props.billType,
            orgId = _props.orgId,
            roleId = _props.roleId,
            serverUrl = _props.serverUrl,
            enableUser = _props.enableUser,
            enableOrg = _props.enableOrg,
            enableRole = _props.enableRole;

        if (!userId && enableUser) {
            userId = EnvUtils.getValue(EnvUtils.Keys.USER_ID);
        }
        if (!orgId && enableOrg) {
            orgId = EnvUtils.getValue(EnvUtils.Keys.ORGA_ID);
        }
        if (!roleId && enableRole) {
            roleId = EnvUtils.getValue(EnvUtils.Keys.CURRENT_ROLE_ID);
        }
        var params = {
            userId: userId,
            billType: billType,
            orgId: orgId,
            roleId: roleId
        };
        var _this = this;
        ajax.getJSON('' + serverUrl + Actions.GET_PERSONAL_TEMPLATES, params, function (result) {
            if (result.success) {
                var templates = result.backData;
                _this.setState({ tplList: templates });
                if (!_.isArray(templates) || templates.length === 0) {
                    console.warn('该单据暂无可用的搜索方案');
                }
            } else {
                _this.setState({ tplList: [] });
                console.error(result.backMsg);
            }
        });
    },

    renderTags: function renderTags(tplList) {
        var _this = this;
        var tags = [];
        if (_.isArray(tplList) && tplList.length > 0) {
            _.forEach(tplList, function (tag) {
                var color = _this.state.tplId === tag.tplId ? "blue" : null;
                var content = React.createElement(
                    YYTag,
                    { key: tag.tplId, closable: false, color: color,
                        onClick: _this._schemeClick.bind(_this, tag) },
                    tag.tplName
                );
                tags.push(content);
            });
        }
        return tags;
    },

    // 方案点击事件
    _schemeClick: function _schemeClick(tag) {
        var onSchemeClick = this.props.onSchemeClick;
        if (this.props.enableUnSelect == true) {
            if (this.state.tplId === tag.tplId) {
                this.setState({ tplId: '' });
                if (onSchemeClick && _.isFunction(onSchemeClick)) {
                    onSchemeClick(tag, false);
                }
            } else {
                this.setState({ tplId: tag.tplId });
                if (onSchemeClick && _.isFunction(onSchemeClick)) {
                    onSchemeClick(tag, true);
                }
            }
        } else {
            if (this.state.tplId != tag.tplId) {
                this.setState({ tplId: tag.tplId });
                if (onSchemeClick && _.isFunction(onSchemeClick)) {
                    onSchemeClick(tag, true);
                }
            }
        }
    },

    render: function render() {
        return React.createElement(
            YYRow,
            null,
            React.createElement(
                YYCol,
                { span: '24' },
                this.renderTags(this.state.tplList)
            )
        );
    }
});

module.exports = YYSchemeGroup;