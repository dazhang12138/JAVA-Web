'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');
var $ = require('jquery');

var _require = require('antd'),
    Select = _require.Select;

var OptGroup = Select.OptGroup;
var Option = Select.Option;

var _require2 = require('yylib-ui'),
    YYClass = _require2.YYClass,
    YYModal = _require2.YYModal,
    YYEditTable = _require2.YYEditTable,
    YYToolbar = _require2.YYToolbar,
    YYButton = _require2.YYButton,
    YYSelect = _require2.YYSelect,
    YYOption = _require2.YYOption,
    YYDropdownButton = _require2.YYDropdownButton,
    YYReferInput = _require2.YYReferInput,
    YYInputNumber = _require2.YYInputNumber,
    YYCheckbox = _require2.YYCheckbox,
    YYIcon = _require2.YYIcon,
    YYInput = _require2.YYInput,
    YYDatePicker = _require2.YYDatePicker,
    YYMenuItem = _require2.YYMenuItem,
    YYMenu = _require2.YYMenu,
    YYMessage = _require2.YYMessage,
    YYForm = _require2.YYForm,
    YYFormItem = _require2.YYFormItem,
    YYSpin = _require2.YYSpin,
    YYSwitch = _require2.YYSwitch,
    YYRangePicker = _require2.YYRangePicker;

var AuthToken = require('yylib-utils/AuthToken');
var YYSearchSort = require('../searchsort/YYSearchSort');
var YYEnumSelect = require('../enum/YYEnumSelect');
var field = YYClass.field;

var Constant = require('./Constant');
var ajax = require('../../utils/ajax');
var formatUtils = require('../../utils/formatUtils');
var Actions = require('./ActionTypes');
var FormItemType = require('../widgets/FormItemType');
var url = require('./Resturl');

// 更改单元格数据 rowData-行数据、index-行索引、dataIndex-列索引名、event-事件对象或者值
function onCellChange(rowData, index, dataIndex, fields, event) {
    var _this = this;
    var newVal = '';
    if (event != null && event != undefined) {
        newVal = event.target ? event.target.value : event;
    }
    if (dataIndex === 'field') {
        _.forEach(fields, function (item) {
            if (item.fieldkey === event) {
                var defaultData = '';
                var inputprops = item.inputprops;
                switch (item.inputtype) {
                    case FormItemType.switch:
                        defaultData = inputprops && inputprops.defaultChecked === true;
                        break;
                    case FormItemType.input:
                        defaultData = inputprops ? inputprops.value : '';
                        break;
                    case FormItemType.select:
                        defaultData = inputprops ? inputprops.defaultValue : '';
                        break;
                    case FormItemType.number:
                        defaultData = inputprops ? inputprops.defaultValue : '';
                        break;
                }
                var allRows = _this.refs.searchTable.getDataSource();
                _.forEach(allRows, function (row) {
                    if (rowData.rowKey === row.rowKey) {
                        row.field = item.fieldkey;
                        row.title = item.title;
                        row.inputprops = inputprops;
                        row.inputtype = item.inputtype;
                        row.presetFunc = item.presetFunc;
                        row.compare = item.oper && item.oper.length > 0 ? item.oper[0] : null;
                        row.data = defaultData;
                    }
                });
            }
        });
    } else if (dataIndex === 'compare') {
        if (rowData.inputtype === FormItemType.date && rowData.compare != event) {
            _this.refs.searchTable.saveCellData(rowData.rowKey, 'data', null);
        }
    }
    this.refs.searchTable.saveCellData(rowData.rowKey, dataIndex, newVal, function (allRows) {
        _this.setState({ dataSource: allRows });
    });
}

//逻辑符列
function renderLogicCol(value, rowData, index, dataIndex, fields, containerId) {
    //第一行逻辑符为无
    if (index === 0) {
        return React.createElement(YYSelect, { disabled: true, value: '', style: { width: 120 } });
    }
    var defaultValue = "and";
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            style: { width: 120 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        React.createElement(
            YYOption,
            { key: 'and', value: 'and' },
            '\u5E76\u4E14(AND)'
        ),
        React.createElement(
            YYOption,
            { key: 'or', value: 'or' },
            '\u6216\u8005(OR)'
        )
    );
}
//左括号
function renderLeftCol(value, rowData, index, dataIndex, fields, containerId) {
    var defaultValue = false;
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            valueType: 'bool',
            style: { width: 120 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        React.createElement(
            YYOption,
            { key: 'left', value: true },
            '('
        ),
        React.createElement(
            YYOption,
            { key: 'no', value: false },
            '\u65E0'
        )
    );
}
//常规字段
function renderFieldCol(value, rowData, index, dataIndex, fields, containerId) {
    if (rowData.required == true) {
        var title = value;
        fields.forEach(function (field) {
            if (value === field.fieldkey) {
                title = field.title;
            }
        });
        return React.createElement(YYInput, { value: title, style: { width: 120 }, readOnly: true, disableClear: true });
    } else {
        var options = [];
        if (fields.length > 0) {
            fields = filterHiddenFields(fields);
            if (fields && fields.length > 0) {
                var defaultValue = fields[0].fieldkey;
                options = fields.map(function (item) {
                    return React.createElement(
                        YYOption,
                        { key: item.fieldkey, value: item.fieldkey },
                        item.title
                    );
                });
            }
        }
        value = rowData.title ? rowData.title : value;
        return React.createElement(
            YYSelect,
            {
                value: value,
                style: { width: 120 },
                getPopupContainer: function getPopupContainer() {
                    return document.getElementById(containerId);
                },
                onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
            options
        );
    }
}

// 过滤必输条件列(flag标识移除必输条件列(true),还是只保留必输条件列(false))
function filterRequiredFields(fields, flag) {
    if (flag === undefined) flag = true;
    if (fields.length > 0) {
        fields = fields.filter(function (field) {
            var required = field.required;
            var hidden = field.hidden;
            var searchField = field.enableSearch === undefined ? true : field.enableSearch;
            return required != flag && searchField === true && hidden != true;
        });
    }
    return fields;
}

// 过滤隐藏条件(或者必输且只读的条件)
function filterHiddenFields(fields) {
    if (fields.length > 0) {
        fields = fields.filter(function (field) {
            return field.hidden != true;
        }).filter(function (field) {
            return field.required != true || field.required == true && field.readonly != true;
        });
    }
    return fields;
}

// 隐藏条件
function getHiddenRows(fields) {
    var hiddenRows = [];
    if (fields.length > 0) {
        _.forEach(fields, function (field) {
            var hidden = field.hidden === undefined ? false : field.hidden;
            if (hidden) {
                var inputprops = field.inputprops;
                var defaultData = '';
                switch (field.inputtype) {
                    case FormItemType.switch:
                        defaultData = inputprops && inputprops.defaultChecked === true;
                        break;
                    case FormItemType.input:
                        defaultData = inputprops ? inputprops.value : '';
                        break;
                    case FormItemType.select:
                        defaultData = inputprops ? inputprops.defaultValue : '';
                        break;
                }
                var newRow = {
                    logic: 'and',
                    left: false,
                    required: false,
                    field: field.fieldkey,
                    fieldtype: field.fieldtype,
                    inputtype: field.inputtype,
                    inputprops: field.inputprops,
                    title: field.title,
                    hidden: true,
                    compare: field.oper && field.oper.length > 0 ? field.oper[0] : null,
                    presetFunc: field.presetFunc,
                    data: defaultData,
                    right: false
                };
                hiddenRows.push(newRow);
            }
        });
    }
    return hiddenRows;
}

// 过滤搜索条件
function filterSearchFields(fields) {
    if (fields.length > 0) {
        fields = fields.filter(function (field) {
            var searchField = field.enableSearch === undefined ? true : field.enableSearch;
            return searchField === true;
        });
    }
    return fields;
}

//比较符
function renderCompareCol(value, rowData, index, dataIndex, fields, containerId) {
    //匹配关键字下的oper
    var options = [];
    var defaultOptions = []; //初始下拉选项
    var defaultValue = '';
    if (fields.length > 0) {
        defaultValue = fields[0].oper[0]; //默认选中 eg: 'eq'
        fields[0].oper.forEach(function (item) {
            defaultOptions.push(React.createElement(
                YYOption,
                { key: item, value: item },
                Constant.oper[item]
            ));
        });
        fields.forEach(function (item, idx) {
            if (rowData.field === item.fieldkey) {
                defaultValue = item.oper[0]; //查询字段切换时修改默认选中值
                item.oper.forEach(function (subItem) {
                    options.push(React.createElement(
                        YYOption,
                        { key: subItem, value: subItem },
                        Constant.oper[subItem]
                    ));
                });
            }
        });
    }

    options = options.length > 0 ? options : defaultOptions;
    value = value ? value : defaultValue;
    //key与查询字段相匹配
    return React.createElement(
        YYSelect,
        {
            value: Constant.oper[value],
            key: rowData.field,
            style: { width: 120 },
            readOnly: rowData.readonly,
            disableClear: true,
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        options
    );
}
// 值
function renderDataCol(value, rowData, index, dataIndex, fields, containerId) {
    var _this = this;
    //默认为输入框
    var cont = React.createElement(YYInput, {
        value: '',
        style: { width: 205 },
        onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) });
    var inputprops = rowData.inputprops || {};
    var presetFunc = rowData.presetFunc || {};
    // 有预置函数时删除置空提示
    if (presetFunc && inputprops && inputprops.placeholder) {
        delete inputprops.placeholder;
    }
    var funcName = presetFunc ? presetFunc.funcName : undefined;
    switch (rowData.inputtype) {
        case FormItemType.input:
            // 文本框
            cont = React.createElement(YYInput, _extends({}, inputprops, {
                value: value,
                placeholder: funcName,
                style: { width: 205, color: '#666' },
                disabled: rowData.required && rowData.readonly,
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
        case FormItemType.date:
            // 日期
            if (rowData.compare === 'bt') {
                cont = React.createElement(YYRangePicker, _extends({}, inputprops, {
                    value: value,
                    style: { width: 205 },
                    disabled: rowData.required && rowData.readonly,
                    getCalendarContainer: function getCalendarContainer() {
                        return document.getElementById(containerId);
                    },
                    onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            } else {
                cont = React.createElement(YYDatePicker, _extends({}, inputprops, {
                    value: value,
                    style: { width: 205 },
                    placeholder: funcName,
                    disabled: rowData.required && rowData.readonly,
                    getCalendarContainer: function getCalendarContainer() {
                        return document.getElementById(containerId);
                    },
                    onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            }
            break;
        case FormItemType.select:
            // 下拉选择
            cont = React.createElement(YYSelect, _extends({}, inputprops, {
                value: value,
                style: { width: 205 },
                placeholder: funcName,
                disabled: rowData.required && rowData.readonly,
                getPopupContainer: function getPopupContainer() {
                    return document.getElementById(containerId);
                },
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
        case FormItemType.inputrefer:
            //  参照
            var serverUrl = inputprops && inputprops.serverUrl ? inputprops.serverUrl : url.REFER_SEVER_URL;
            cont = React.createElement(YYReferInput, _extends({}, inputprops, {
                serverUrl: serverUrl,
                placeholder: funcName,
                condition: inputprops.condition,
                value: value,
                disabled: rowData.required && rowData.readonly,
                wrapClassName: 'yyui-search-refer',
                getPopupContainer: function getPopupContainer() {
                    return document.getElementById(containerId);
                },
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
        case FormItemType.switch:
            // 开关
            cont = React.createElement(YYSwitch, _extends({}, inputprops, {
                disabled: rowData.required && rowData.readonly,
                checked: value === null ? inputprops.defaultChecked : value,
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
        case FormItemType.enumselect:
            // 档案枚举
            if (!value && inputprops.multiple === true) {
                value = [];
            }
            cont = React.createElement(YYEnumSelect, _extends({}, inputprops, {
                value: value,
                placeholder: funcName,
                style: { width: 205 },
                disabled: rowData.required && rowData.readonly,
                getPopupContainer: function getPopupContainer() {
                    return document.getElementById(containerId);
                },
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
        case FormItemType.number:
            // 数值框
            cont = React.createElement(YYInputNumber, _extends({}, inputprops, {
                value: value,
                placeholder: funcName,
                style: { width: 205 },
                type: 'number',
                disabled: rowData.required && rowData.readonly,
                getPopupContainer: function getPopupContainer() {
                    return document.getElementById(containerId);
                },
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
        case FormItemType.currency:
            // 金额框
            cont = React.createElement(YYInputNumber, _extends({}, inputprops, {
                value: value,
                placeholder: funcName,
                style: { width: 205 },
                type: 'currency',
                disabled: rowData.required && rowData.readonly,
                getPopupContainer: function getPopupContainer() {
                    return document.getElementById(containerId);
                },
                onChange: onCellChange.bind(_this, rowData, index, dataIndex, fields) }));
            break;
    }
    //当比较符为 ‘nu’， ‘ie’时将不显示,直接返回
    if (rowData.compare === 'nu' || rowData.compare === 'ie') {
        return React.createElement('div', { style: { width: 120 } });
    }
    return cont;
}
//右括号
function renderRightCol(value, rowData, index, dataIndex, fields, containerId) {
    var defaultValue = false;
    value = value ? value : defaultValue;
    return React.createElement(
        YYSelect,
        {
            value: value,
            valueType: 'bool',
            style: { width: 100 },
            getPopupContainer: function getPopupContainer() {
                return document.getElementById(containerId);
            },
            onChange: onCellChange.bind(this, rowData, index, dataIndex, fields) },
        React.createElement(
            YYOption,
            { key: 'right', value: true },
            ')'
        ),
        React.createElement(
            YYOption,
            { key: 'no', value: false },
            '\u65E0'
        )
    );
}

//方案列表
function renderTplOpts(tplList) {
    return _.map(tplList, function (option) {
        return React.createElement(
            YYOption,
            { key: option.tplId, value: option.tplId },
            option.tplName
        );
    });
}
// 方案列表分组(公共和私有)
function spliceTplOpts(tplList) {
    var retObj = {};
    var publicOpts = [];
    var personalOpts = [];
    if (_.isArray(tplList) && tplList.length > 0) {
        _.forEach(tplList, function (tpl) {
            var color = tpl.isDefault === true ? "green" : null;
            var option = React.createElement(
                Option,
                { key: tpl.tplId, value: tpl.tplId, style: { width: 120, color: color } },
                tpl.tplName
            );
            if (tpl.isPublic === true) {
                publicOpts.push(option);
            } else {
                personalOpts.push(option);
            }
        });
    }
    retObj.public = publicOpts;
    retObj.personal = personalOpts;
    return retObj;
}
//获取columns
function getColumns(columns, showSenior) {
    var showColumns = ['field', 'compare', 'data', 'oper'];
    if (!showSenior) {
        return _.filter(columns, function (column) {
            return showColumns.indexOf(column.dataIndex) !== -1;
        });
    } else {
        return columns;
    }
}
//从方案列表里查询tplName对应的tplId
function getTplIdByName(tplList, name) {
    if (Array.isArray(tplList) && tplList.length > 0) {
        return tplList.filter(function (item) {
            return item.tplName === name;
        })[0]['tplId'];
    } else {
        return '';
    }
}
//从方案列表里查询tplId对应的tplName
function getTplNameById(tplList, id) {
    if (Array.isArray(tplList) && tplList.length > 0) {
        return tplList.filter(function (item) {
            return item.tplId === id;
        })[0]['tplName'];
    } else {
        return '';
    }
}

var YYSearchTable;
YYSearchTable = YYClass.create({
    getInitialState: function getInitialState() {
        return {
            dataSource: [],
            showSenior: false,
            tplList: [],
            tplId: undefined,
            showModal: false, //对话框是否显示
            isLoading: false,
            sortData: [],
            fields: [], // 搜索条件, 需要将设计器中的搜索条件和授权方案中的进行合并
            disableOperateBtns: false // 禁用功能性按钮(主要是控制能否维护公共方案)
        };
    },

    componentDidMount: function componentDidMount() {
        var activeTpl = this.props.activeTpl;
        var sortData = this.props.sortData;
        var fileds = this.props.fields || [];
        this.setState({ sortData: sortData, fields: fileds, isLoading: true });
        //获取方案列表
        var params = {
            userId: this.props.userId,
            billType: this.props.billType,
            orgId: this.props.orgId,
            roleId: this.props.roleId
        };
        var _this = this;
        ajax.getJSON('' + this.props.serverUrl + Actions.GET_PERSONAL_TEMPLATES, params, function (result) {
            if (result.success) {
                var templates = result.backData;
                _this.setState({ tplList: templates, isLoading: false });
                if (activeTpl && !_.isEmpty(activeTpl)) {
                    _this.switchTplClick(activeTpl.tplId);
                    return;
                }
                var prefsTplId;
                // 1. 取私有的默认方案
                var personalDefaultTpl = _.filter(templates, function (template) {
                    return template.isDefault == true && template.isPublic != true;
                }) || [];
                if (personalDefaultTpl.length > 0) {
                    prefsTplId = personalDefaultTpl[0].tplId;
                } else {
                    // 2.取授权方案
                    var grantedTemplate = _.filter(templates, function (template) {
                        return template.isGranted == true;
                    }) || [];
                    if (grantedTemplate.length > 0) {
                        prefsTplId = grantedTemplate[0].tplId;
                    } else {
                        // 3.取公共默认方案
                        var publicDefaultTpl = _.filter(templates, function (template) {
                            return template.isDefault == true && template.isPublic == true;
                        }) || [];
                        if (publicDefaultTpl.length > 0) {
                            prefsTplId = publicDefaultTpl[0].tplId;
                        }
                    }
                }
                if (prefsTplId) {
                    _this.switchTplClick(prefsTplId);
                } else {
                    // 4.取必输条件
                    var dataSource = _this._formatRequiredRows();
                    _this.setState({
                        dataSource: _this._formatDataSource(dataSource)
                    });
                }
            } else {
                YYMessage.warning(result.backMsg);
            }
        });
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps && nextProps.fields && nextProps.fields !== this.state.fields) {
            var fields = nextProps.fields || [];
            var grantedTemplate = this.filterGrantedTemplate();
            if (grantedTemplate) {
                // 授权方案
                var conditions = JSON.parse(grantedTemplate.filter) || [];
                _.forEach(fields, function (field) {
                    _.forEach(conditions, function (condition) {
                        if (field.fieldkey === condition.field) {
                            field.required = condition.required; // 必输
                            field.readonly = condition.readonly; // 只读
                            field.presetFunc = condition.presetFunc; // 预置函数
                        }
                    });
                });
            }
            this.setState({ fields: fields });
        }
        if (nextProps && nextProps.sortData) {
            if (this.props.sortData != nextProps.sortData) {
                this.setState({ sortData: nextProps.sortData });
            }
        }
        if (nextProps.activeTpl && nextProps.activeTpl.tplId && nextProps.activeTpl !== this.props.activeTpl && nextProps.activeTpl.tplId !== this.state.tplId) {
            this.switchTplClick(nextProps.activeTpl.tplId);
        }
    },


    //添加一行
    addRowClick: function addRowClick() {
        var fields = filterHiddenFields(this.state.fields);
        var defaultField = fields && fields.length > 0 ? fields[0] : {};
        var defaultData = '';
        var inputprops = defaultField.inputprops;
        switch (defaultField.inputtype) {
            case FormItemType.switch:
                defaultData = inputprops && inputprops.defaultChecked === true;
                break;
            case FormItemType.input:
                defaultData = inputprops ? inputprops.value : '';
                break;
            case FormItemType.select:
                defaultData = inputprops ? inputprops.defaultValue : '';
                break;
            case FormItemType.number:
                defaultData = inputprops ? inputprops.defaultValue : '';
                break;
        }
        var newRow = {
            logic: 'and',
            left: false,
            required: false,
            field: defaultField.fieldkey,
            title: defaultField.title,
            compare: defaultField.oper && defaultField.oper.length > 0 ? defaultField.oper[0] : null,
            inputtype: defaultField.inputtype,
            inputprops: inputprops,
            presetFunc: defaultField.presetFunc,
            data: defaultData,
            right: false,
            rowKey: YYClass.uuid32(),
            rowState: "add"
        };
        //直接添加一行到行尾
        var option = {};
        var _this = this;
        this.refs.searchTable.addRowLast(newRow, function (allRows) {
            _this.setState({
                dataSource: allRows || []
            });
        });
        this._formatAllRows();
    },
    //清除所有
    delAllClick: function delAllClick() {
        var onSwitchTplCallBack = this.props.onSwitchTplCallBack;
        if (onSwitchTplCallBack && _.isFunction(onSwitchTplCallBack)) {
            onSwitchTplCallBack([]);
        }
        var dataSource = this._formatRequiredRows() || [];
        this.setState({
            dataSource: this._formatDataSource(dataSource),
            tplId: '',
            sortData: [],
            disableOperateBtns: false
        });
    },
    //删除指定的行数据
    onDelRow: function onDelRow(rowData, index, event) {
        var _this = this;
        this.refs.searchTable.delRow(rowData.rowKey, function (allRows) {
            _this.setState({
                dataSource: allRows || []
            });
        });
    },
    //格式化当前所有行数据
    _formatAllRows: function _formatAllRows() {
        var fields = filterSearchFields.call(this, this.state.fields);
        if (!fields || !_.isArray(fields) || fields.length === 0) return [];
        var defaultData = '';
        var inputprops = fields[0].inputprops;
        switch (field.inputtype) {
            case FormItemType.switch:
                defaultData = inputprops && inputprops.defaultChecked === true;
                break;
            case FormItemType.input:
                defaultData = inputprops ? inputprops.value : '';
                break;
            case FormItemType.select:
                defaultData = inputprops ? inputprops.defaultValue : '';
                break;
            case FormItemType.number:
                defaultData = inputprops ? inputprops.defaultValue : '';
                break;
        }
        var defaultValue = {
            logic: 'and',
            left: false,
            required: false,
            field: fields[0].fieldkey,
            compare: fields[0].oper && fields[0].oper.length > 0 ? fields[0].oper[0] : null,
            data: defaultData,
            right: false
        };
        var allRows = this.refs.searchTable.getRowData({ rowState: "all", clearIsEdit: false, clearNewId: false });
        var newAllRows = [];
        allRows.forEach(function (row) {
            if (row.rowState != "del") {
                var newRow = {};
                for (var key in defaultValue) {
                    if (row[key] == undefined) {
                        newRow[key] = defaultValue[key];
                    } else if (row.inputtype === FormItemType.date) {
                        var values = row[key];
                        var format = row.inputprops && row.inputprops.format ? row.inputprops.format : 'yyyy-MM-dd';
                        if (_.isArray(values)) {
                            // 日期范围
                            var formatValue = [];
                            _.forEach(values, function (value) {
                                value = formatUtils.formatDate(value, format);
                                formatValue.push(value);
                            });
                            newRow[key] = formatValue;
                        } else {
                            newRow[key] = formatUtils.formatDate(values, format);
                        }
                    } else {
                        newRow[key] = row[key];
                    }
                }
                newRow.title = row.title;
                newRow.readonly = row.readonly;
                newRow.inputtype = row.inputtype;
                newRow.inputprops = row.inputprops;
                newRow.presetFunc = row.presetFunc;

                newAllRows.push(newRow);
            }
        });
        return newAllRows;
    },

    // 格式化必输条件行
    _formatRequiredRows: function _formatRequiredRows() {
        var grantedTemplate = this.filterGrantedTemplate();
        if (grantedTemplate) {
            var rows = JSON.parse(grantedTemplate.filter) || [];
            rows = rows.filter(function (row) {
                return row.hidden != true && row.required == true;
            });
            return rows;
        }
        var fields = filterRequiredFields.call(this, this.state.fields, false);
        if (!fields || !_.isArray(fields) || fields.length === 0) return [];
        var requiredRows = [];
        fields.forEach(function (field) {
            var defaultData = '';
            var inputprops = field.inputprops;
            switch (field.inputtype) {
                case FormItemType.switch:
                    defaultData = inputprops && inputprops.defaultChecked === true;
                    break;
                case FormItemType.input:
                    defaultData = inputprops ? inputprops.value : '';
                    break;
                case FormItemType.select:
                    defaultData = inputprops ? inputprops.defaultValue : '';
                    break;
                case FormItemType.number:
                    defaultData = inputprops ? inputprops.defaultValue : '';
                    break;
            }
            var defaultValue = {
                logic: 'and',
                left: false,
                required: false,
                field: field.fieldkey,
                compare: field.oper && field.oper.length > 0 ? field.oper[0] : null,
                data: defaultData,
                right: false
            };
            var newRow = {};
            for (var key in defaultValue) {
                if (field[key] == undefined) {
                    newRow[key] = defaultValue[key];
                } else if (field.inputtype === FormItemType.date) {
                    var values = field[key];
                    var format = field.inputprops && field.inputprops.format ? field.inputprops.format : 'yyyy-MM-dd';
                    if (_.isArray(values)) {
                        // 日期范围
                        var formatValue = [];
                        _.forEach(values, function (value) {
                            value = formatUtils.formatDate(value, format);
                            formatValue.push(value);
                        });
                        newRow[key] = formatValue;
                    } else {
                        newRow[key] = formatUtils.formatDate(values, format);
                    }
                } else {
                    newRow[key] = field[key];
                }
            }
            newRow.title = field.title;
            newRow.readonly = field.readonly;
            newRow.inputtype = field.inputtype;
            newRow.inputprops = field.inputprops;
            newRow.presetFunc = field.presetFunc;

            requiredRows.push(newRow);
        });
        return requiredRows;
    },

    // 从当前方案列表中过滤出授权方案
    filterGrantedTemplate: function filterGrantedTemplate() {
        var tplList = this.state.tplList || [];
        tplList = _.filter(tplList, function (tpl) {
            return tpl.isGranted == true;
        });
        return tplList && tplList.length > 0 ? tplList[0] : null;
    },

    //验证左括号是否等于右括号，如果相等执行callback
    _isValidate: function _isValidate(callback) {
        var left = 0; //左括号的个数
        var right = 0; //右括号的个数
        var titles = ''; // 必输项校验
        var allRows = this._formatAllRows();

        _.forEach(allRows, function (row) {
            if (row.left) {
                left++;
            }
            if (row.right) {
                right++;
            }
            if (row.required) {
                var data = row.data;
                var type = row.inputtype;
                if (type === FormItemType.switch) {
                    if (row.data === undefined && _.isEmpty(row.presetFunc)) {
                        titles = titles + row.title + ',';
                    }
                } else {
                    if (!row.data && _.isEmpty(row.presetFunc)) {
                        titles = titles + row.title + ',';
                    }
                }
            }
        });
        if (titles) {
            YYMessage.error(titles.substring(0, titles.length - 1) + "不能为空!");
        } else if (left !== right) {
            YYMessage.warning('左括号与右括号不相等，请检查');
        } else {
            callback && callback(allRows);
        }
    },
    //是否启用高级搜索
    checkboxChange: function checkboxChange() {
        this.setState({ showSenior: !this.state.showSenior });
    },
    dealRows: function dealRows(fields, allRows, dealHiddenRows) {
        // 处理隐藏条件
        if (dealHiddenRows) {
            var hiddenRows = [];
            var grantedTpl = this.filterGrantedTemplate();
            if (grantedTpl) {
                // 有授权方案
                var rows = JSON.parse(grantedTpl.filter) || [];
                hiddenRows = rows.filter(function (row) {
                    return row.hidden == true;
                });
            } else {
                // 无授权方案
                hiddenRows = getHiddenRows(fields);
                var tplList = this.state.tplList;
                var tplId = this.state.tplId;
                var currentTemplate = _.filter(tplList, function (template) {
                    return template.tplId === tplId;
                }) || [];
                if (!_.isEmpty(currentTemplate)) {
                    var rows = JSON.parse(currentTemplate[0].filter) || [];
                    hiddenRows = rows.filter(function (row) {
                        return row.hidden == true;
                    });
                }
            }
            allRows = _.union(allRows, hiddenRows);
        }
        _.forEach(allRows, function (row) {
            delete row.fieldtype;
        });
        return allRows;
    },

    //搜索
    searchClick: function searchClick() {
        //验证通过执行搜索
        var _this = this;
        var _props = this.props,
            fields = _props.fields,
            searchUrl = _props.searchUrl,
            onMetaSearch = _props.onMetaSearch,
            onMetaSearchParam = _props.onMetaSearchParam,
            onSearch = _props.onSearch,
            onSearchResult = _props.onSearchResult,
            entityName = _props.entityName,
            fieldKeys = _props.fieldKeys,
            sortData = _props.sortData,
            billType = _props.billType,
            onMetaSearchCallBack = _props.onMetaSearchCallBack;

        this._isValidate(function (allRows) {
            if (_.isFunction(onMetaSearch)) {
                allRows = _this.dealRows(fields, allRows, true);
                if (allRows === undefined) {
                    return;
                }
                _.forEach(allRows, function (row) {
                    delete row.inputprops;
                    delete row.required;
                    delete row.readonly;
                    delete row.hidden;
                });
                if (onMetaSearchParam && _.isFunction(onMetaSearchParam)) {
                    allRows = onMetaSearchParam(allRows);
                }
                var queryScheme = {};
                queryScheme.condition = allRows;
                queryScheme.sort = _this.state.sortData;
                queryScheme.billType = billType;
                queryScheme.entityName = entityName;
                queryScheme.tplId = _this.state.tplId;
                onMetaSearch(queryScheme);
                if (onMetaSearchCallBack && _.isFunction(onMetaSearchCallBack)) {
                    onMetaSearchCallBack();
                }
                return;
            }

            if (_.isFunction(onSearch)) {
                onSearch('table', allRows, fieldKeys, entityName);
                _this.setState({ dataSource: allRows });
                return; // 如果传入onSearch则不执行onSearchResult
            }
            if (_.isFunction(onSearchResult)) {
                var reqTable = {};
                reqTable.keys = fieldKeys;
                reqTable.type = 'table';
                reqTable.condition = allRows;
                reqTable.entityName = entityName;

                ajax.postJSON(searchUrl, reqTable, function (result) {
                    if (result.success) {
                        onSearchResult(result.backData);
                    } else {
                        YYMessage.warning(result.backMsg);
                    }
                });
            }
        });
    },
    //添加方案
    addTplClick: function addTplClick() {
        var _this = this;
        this._isValidate(function (allRows) {
            var fields = _this.state.fields;
            allRows = _this.dealRows(fields, allRows, true) || [];
            if (!_.isArray(allRows) || allRows.length === 0) {
                YYMessage.warn('请添加查询项后再保存方案!');
                return;
            }
            allRows = _.filter(allRows, function (row) {
                return row.hidden != true;
            });
            _this.setState({ dataSource: allRows, showModal: true });
        });
    },
    //取消收藏方案
    cancelClick: function cancelClick() {
        this.props.form.resetFields();
        this.setState({ showModal: false, loading: false });
    },
    //设置默认方案
    setDefault: function setDefault() {
        var _this = this;
        var allRows = this._formatAllRows();
        var fields = _this.state.fields;
        if (!_.isArray(allRows) || allRows.length === 0) {
            YYMessage.warn('请先添加查询项!');
            return;
        }
        allRows = _this.dealRows(fields, allRows, false);
        if (allRows === undefined) {
            return;
        }
        var tplId = this.state.tplId;
        if (tplId) {
            var params = {
                tplId: tplId
            };
            ajax.getJSON('' + this.props.serverUrl + Actions.SET_DEFAULT_TEMPLATE, params, function (result) {
                if (result.success) {
                    // 设置默认方案时要改变state中的方案状态
                    var tplList = _this.state.tplList;
                    var selectTpl = tplList.filter(function (item) {
                        return item.tplId === tplId;
                    });
                    _.forEach(tplList, function (tpl) {
                        if (tpl.tplId === tplId) {
                            tpl.isDefault = true;
                        } else if (tpl.isPublic === selectTpl[0].isPublic) {
                            tpl.isDefault = false;
                        }
                    });
                    _this.setState({ tplList: tplList });
                    YYMessage.success(result.backMsg);
                } else {
                    YYMessage.error(result.backMsg);
                }
            });
        } else {
            _this._isValidate(function (allRows) {
                _this.setState({ dataSource: allRows, showModal: true });
            });
        }
    },
    //收藏方案
    saveTplClick: function saveTplClick() {
        var _this = this;
        this.props.form.validateFields(function (errors, values) {
            if (!!errors) {
                console.log('Errors in form!!!');
                return false;
            } else {
                //添加新的方案
                var _this$props = _this.props,
                    billType = _this$props.billType,
                    userId = _this$props.userId,
                    orgId = _this$props.orgId,
                    roleId = _this$props.roleId,
                    onSchemeChange = _this$props.onSchemeChange;

                if (!billType) {
                    YYMessage.error('保存失败:单据类型未配置!');
                    return;
                } else if (!userId || !orgId) {
                    YYMessage.error('保存失败:组织和用户未定义!');
                    return;
                }
                var sortData = _this.props.sortData;
                var searchTemplate = {};
                _this.setState({ isLoading: true });
                var allRows = _this._formatAllRows();
                allRows = _this.dealRows(_this.state.fields, allRows, true);
                searchTemplate.filter = JSON.stringify(allRows);
                searchTemplate.sort = _.isArray(sortData) && sortData.length > 0 ? JSON.stringify(sortData) : null;
                searchTemplate.billType = billType;
                searchTemplate.userId = userId;
                searchTemplate.orgId = orgId;
                searchTemplate.roleId = roleId;
                searchTemplate.templateName = values.tplName;
                searchTemplate.isPublic = values.isPublic;

                ajax.postJSON(_this.props.serverUrl + Actions.SAVE_TEMPLATE, searchTemplate, function (result) {
                    if (result.success) {
                        if (onSchemeChange && _.isFunction(onSchemeChange)) {
                            onSchemeChange(result.backData);
                        }
                        YYMessage.success(result.backMsg);
                        _this.setState({
                            tplList: result.backData,
                            tplId: getTplIdByName(result.backData, values.tplName)
                        });
                        _this.props.form.resetFields();
                    } else {
                        YYMessage.error(result.backMsg);
                    }
                    _this.setState({ isLoading: false, showModal: false });
                });
            }
        });
    },
    //删除方案数据
    deleteTplClick: function deleteTplClick(tplId) {
        //根据方案ID删除
        var roleId = this.props.roleId;

        var _this = this;
        if (tplId) {
            _this.setState({ isLoading: true });
            ajax.getJSON('' + _this.props.serverUrl + Actions.DELETE_TEMPLATE, {
                id: tplId,
                roleId: roleId
            }, function (result) {
                if (result.success) {
                    if (_this.props.onSchemeChange && _.isFunction(_this.props.onSchemeChange)) {
                        _this.props.onSchemeChange(result.backData);
                    }
                    YYMessage.success(result.backMsg);
                    var dataSource = _this._formatRequiredRows();
                    _this.setState({
                        isLoading: false,
                        tplList: result.backData,
                        dataSource: _this._formatDataSource(dataSource),
                        tplId: '',
                        sortData: [],
                        disableOperateBtns: false
                    });
                    var onSwitchTplCallBack = _this.props.onSwitchTplCallBack;
                    if (onSwitchTplCallBack && _.isFunction(onSwitchTplCallBack)) {
                        onSwitchTplCallBack([]);
                    }
                } else {
                    YYMessage.error(result.backMsg);
                    _this.setState({ isLoading: false });
                }
            });
        } else {
            YYMessage.error('请选择要删除的方案');
        }
    },
    //修改方案数据
    changeTplClick: function changeTplClick(tplId) {
        var _props2 = this.props,
            billType = _props2.billType,
            userId = _props2.userId,
            orgId = _props2.orgId,
            onSchemeChange = _props2.onSchemeChange,
            roleId = _props2.roleId;

        var allRows = this._formatAllRows();
        allRows = this.dealRows(this.state.fields, allRows, true);
        if (!_.isArray(allRows) || allRows.length === 0) {
            YYMessage.warn('请添加查询项后再保存方案!');
            return;
        }
        var tplList = this.state.tplList;
        if (tplId) {
            var tplName = getTplNameById(tplList, tplId);
            var sortData = this.props.sortData || [];
            //根据方案ID修改
            var searchTemplate = {};
            searchTemplate.id = tplId;
            searchTemplate.filter = JSON.stringify(allRows);
            searchTemplate.sort = _.isArray(sortData) && sortData.length > 0 ? JSON.stringify(sortData) : null;
            searchTemplate.orgId = orgId;
            searchTemplate.roleId = roleId;
            searchTemplate.billType = billType;
            searchTemplate.userId = userId;
            searchTemplate.templateName = tplName || '方案名称';
            ajax.postJSON(this.props.serverUrl + Actions.SAVE_TEMPLATE, searchTemplate, function (result) {
                if (result.success) {
                    if (onSchemeChange && _.isFunction(onSchemeChange)) {
                        onSchemeChange(result.backData);
                    }
                    YYMessage.success(result.backMsg);
                } else {
                    YYMessage.error(result.backMsg);
                }
            });
        } else {
            YYMessage.error('请选择要修改的方案');
        }
    },
    //格式化dataSource
    _formatDataSource: function _formatDataSource(dataSource) {
        var fields = this.state.fields;
        if (_.isArray(dataSource) && dataSource.length > 0) {
            var requiredAndReadOnlyDS = dataSource.filter(function (item) {
                return item.required == true && item.readonly == true;
            }) || [];
            var requiredDS = dataSource.filter(function (item) {
                return item.required == true && item.readonly != true;
            }) || [];
            var normalDS = dataSource.filter(function (item) {
                return item.required != true;
            }) || [];
            var newDS = requiredAndReadOnlyDS.concat(requiredDS).concat(normalDS);
            return newDS.map(function (dataItem, index) {
                dataItem.rowKey = YYClass.uuid32();
                dataItem.rowState = "add";
                // 日期格式转化
                if (dataItem.data && dataItem.inputtype === 'date') {
                    var values = dataItem.data;
                    var format = dataItem.inputprops && dataItem.inputprops.format ? dataItem.inputprops.format : 'yyyy-MM-dd';
                    if (_.isArray(values)) {
                        // 日期范围
                        var dateValues = [];
                        _.forEach(values, function (value) {
                            value = formatUtils.formatDate(value, format);
                            dateValues.push(value);
                        });
                        dataItem.data = dateValues;
                    } else {
                        dataItem.data = formatUtils.formatDate(values, format);
                    }
                }
                // 合并inputprops属性,避免方案保存之后又修改设计器配置导致bug
                var searchField = _.find(fields, function (field) {
                    return field.fieldkey === dataItem.field;
                });
                if (searchField) {
                    dataItem.inputprops = _.assign({}, searchField.inputprops, dataItem.inputprops);
                }
                return dataItem;
            });
        }
    },

    //切换当前方案
    switchTplClick: function switchTplClick(tplId, option) {
        var _this = this;
        var tplList = this.state.tplList;
        if (_.isArray(tplList) && tplList.length > 0) {
            var onSwitchTplCallBack = this.props.onSwitchTplCallBack;
            tplList = tplList.filter(function (template) {
                return template.tplId === tplId;
            });
            if (tplList.length === 0) {
                this.setState({
                    tplId: '',
                    sortData: []
                });
            } else {
                var template = tplList[0];
                this.setState({
                    disableOperateBtns: template.isPublic && this.props.enablePublic == false,
                    tplId: tplId,
                    sortData: []
                });
                if (onSwitchTplCallBack && _.isFunction(onSwitchTplCallBack)) {
                    onSwitchTplCallBack(tplList[0].sort);
                }
                var dataSource = _this._formatDataSource(JSON.parse(tplList[0].filter));
                if (_.isArray(dataSource) && dataSource.length > 0) {
                    dataSource = dataSource.filter(function (item) {
                        return item.hidden != true;
                    });
                }
                _this.setState({
                    sortData: JSON.parse(tplList[0].sort),
                    dataSource: dataSource || []
                });
            }
        }
    },
    editTplClick: function editTplClick(_ref) {
        var item = _ref.item,
            key = _ref.key,
            selectedKeys = _ref.selectedKeys;

        var tplId = this.state.tplId;
        switch (key) {
            case 'delete':
                this.deleteTplClick(tplId);
                break;
            case 'save':
                this.changeTplClick(tplId);
        }
    },
    //方案编辑按钮集合
    _renderTplBtns: function _renderTplBtns() {
        var tplId = this.state.tplId;
        return React.createElement(
            YYMenu,
            { onSelect: this.editTplClick, style: { width: 100 } },
            React.createElement(
                YYMenuItem,
                { key: 'save', disabled: !tplId || this.state.disableOperateBtns },
                '\u4FDD\u5B58\u65B9\u6848'
            ),
            React.createElement(
                YYMenuItem,
                { key: 'delete', disabled: !tplId || this.state.disableOperateBtns },
                '\u5220\u9664\u65B9\u6848'
            )
        );
    },

    /**
     * 校验方案名称是否重复
     * @param rule
     * @param value
     * @param callback
     */
    checkTplNameExist: function checkTplNameExist(rule, value, callback) {
        if (value) {
            var _this = this;
            setTimeout(function () {
                var _this$props2 = _this.props,
                    serverUrl = _this$props2.serverUrl,
                    billType = _this$props2.billType;

                var params = {};
                params.billType = billType;
                params.tplName = value;
                ajax.getJSON('' + serverUrl + Actions.CHECK_TPL_NAME_EXIST, params, function (result) {
                    if (result.backData) {
                        callback("方案名称已存在!");
                    } else {
                        callback();
                    }
                });
            }, 500);
        } else {
            callback("方案名称不能为空");
        }
    },

    render: function render() {
        var _this = this;
        var getFieldProps = this.props.form.getFieldProps;

        var fields = this.state.fields;
        var containerId = this.props.containerId;
        //编辑表格的列定义
        var columns = [{
            title: '逻辑符',
            dataIndex: 'logic',
            key: 'logic',
            width: 120,
            render: function render(value, rowData, index) {
                return renderLogicCol.call(_this, value, rowData, index, 'logic', fields, containerId);
            }
        }, {
            title: '左括号',
            dataIndex: 'left',
            key: 'left',
            width: 120,
            render: function render(value, rowData, index) {
                return renderLeftCol.call(_this, value, rowData, index, 'left', fields, containerId);
            }
        }, {
            title: '查询字段',
            dataIndex: 'field',
            key: 'field',
            width: 120,
            render: function render(value, rowData, index) {
                return renderFieldCol.call(_this, value, rowData, index, 'field', fields, containerId);
            }
        }, {
            title: '操作符',
            dataIndex: 'compare',
            key: 'compare',
            width: 120,
            render: function render(value, rowData, index) {
                return renderCompareCol.call(_this, value, rowData, index, 'compare', fields, containerId);
            }
        }, {
            title: '值',
            dataIndex: 'data',
            key: 'data',
            width: 200,
            render: function render(value, rowData, index) {
                return renderDataCol.call(_this, value, rowData, index, 'data', fields, containerId);
            }
        }, {
            title: '右括号',
            dataIndex: 'right',
            key: 'right',
            width: 90,
            render: function render(value, rowData, index) {
                return renderRightCol.call(_this, value, rowData, index, 'right', fields, containerId);
            }
        }, {
            title: '操作',
            dataIndex: 'oper',
            key: 'oper',
            width: 50,
            render: function render(text, rowData, index) {
                return React.createElement(
                    'div',
                    { style: { width: 50 } },
                    React.createElement(
                        'a',
                        { disabled: rowData.required || this.state.disableOperateBtns ? true : false },
                        React.createElement(YYIcon, { type: 'delete', style: { marginLeft: 15 }, title: '\u5220\u9664',
                            onClick: _this.onDelRow.bind(this, rowData, index) })
                    )
                );
            }
        }];
        var options = spliceTplOpts(this.state.tplList);
        return React.createElement(
            YYSpin,
            { spinning: this.state.isLoading },
            React.createElement(
                YYToolbar,
                null,
                React.createElement(
                    YYButton,
                    { onClick: this.addRowClick, type: 'primary', icon: 'plus' },
                    '\u6DFB\u52A0'
                ),
                React.createElement(
                    YYButton,
                    { onClick: this.delAllClick, type: 'error', icon: 'delete', ghost: true },
                    '\u6E05\u9664'
                ),
                React.createElement(
                    Select,
                    {
                        getPopupContainer: function getPopupContainer() {
                            return document.getElementById(containerId);
                        },
                        onChange: this.switchTplClick, value: this.state.tplId, placeholder: '\u8BF7\u9009\u62E9\u65B9\u6848',
                        style: { width: 110 }, className: 'yyui-select' },
                    React.createElement(
                        OptGroup,
                        { label: '\u516C\u5171\u65B9\u6848' },
                        options.public
                    ),
                    React.createElement(
                        OptGroup,
                        { label: '\u4E2A\u4EBA\u65B9\u6848' },
                        options.personal
                    )
                ),
                React.createElement(
                    YYDropdownButton,
                    {
                        getPopupContainer: function getPopupContainer() {
                            return document.getElementById(containerId);
                        },
                        onClick: this.addTplClick, trigger: ['click'], type: 'primary',
                        overlay: this._renderTplBtns() },
                    '\u6536\u85CF\u65B9\u6848'
                ),
                React.createElement(
                    YYButton,
                    { onClick: this.setDefault, type: 'primary', ghost: true, disabled: this.state.disableOperateBtns },
                    '\u8BBE\u4E3A\u9ED8\u8BA4\u65B9\u6848'
                ),
                React.createElement(
                    YYButton,
                    { onClick: this.searchClick, type: 'warning', icon: 'search' },
                    '\u6267\u884C\u641C\u7D22'
                ),
                this.props.enableSenior ? React.createElement(
                    YYCheckbox,
                    { onChange: this.checkboxChange, style: { marginTop: 6 } },
                    React.createElement(
                        'span',
                        { style: { position: 'relative', top: '5px' } },
                        '\u9AD8\u7EA7\u641C\u7D22'
                    )
                ) : null
            ),
            React.createElement(YYEditTable, {
                size: 'small',
                rowKey: 'rowKey',
                ref: 'searchTable',
                scroll: { y: 274 },
                columns: getColumns(columns, this.state.showSenior),
                checkable: false,
                rowSelection: false,
                pagination: false,
                dataSource: this.state.dataSource }),
            React.createElement(
                YYModal,
                { wrapClassName: 'yyui-search-modal', title: '\u641C\u7D22\u65B9\u6848', visible: this.state.showModal,
                    onOk: this.saveTplClick, onCancel: this.cancelClick, okText: '\u4FDD\u5B58', maskClosable: false },
                React.createElement(
                    YYForm,
                    { style: { paddingTop: 15 } },
                    React.createElement(
                        YYFormItem,
                        { labelCol: { span: 6 }, wrapperCol: { span: 14 }, label: '\u65B9\u6848\u540D\u79F0', required: true },
                        React.createElement(YYInput, _extends({ autocomplete: 'off' }, getFieldProps('tplName', {
                            rules: [{ validator: this.checkTplNameExist }]
                        }), { type: 'text', placeholder: '\u8BF7\u8F93\u5165\u65B9\u6848\u540D\u79F0' }))
                    ),
                    React.createElement(
                        YYFormItem,
                        { labelCol: { span: 6 }, wrapperCol: { span: 14 }, label: '\u662F\u5426\u516C\u5F00' },
                        React.createElement(YYSwitch, _extends({ checkedChildren: '\u662F', unCheckedChildren: '\u5426'
                        }, getFieldProps('isPublic', {
                            valuePropName: "checked",
                            initialValue: false
                        }), {
                            disabled: this.props.enablePublic == false
                        }))
                    )
                )
            )
        );
    }
});

module.exports = YYForm.create()(YYSearchTable);