'use strict';

/**
 * 单行筛选项
 */
var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYCol = _require.YYCol,
    YYRow = _require.YYRow,
    YYButton = _require.YYButton;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var YYFilterMultiple = require('./YYFilterMultiple');
var YYFilterSingle = require('./YYFilterSingle');
var YYFilterToggle = require('./YYFilterToggle');
var YYFilterSelected = require('./YYFilterSelected');

require('./index.css');

//定义META
var uiMeta = {
    name: 'searchitem',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('title', '', PropTypes.string, true, '条件标题'), field('splitText', '', PropTypes.string, true, '标题后的分割符，可以为空字符串'), field('items', [], PropTypes.array, true, '[{value:"id1", text:"name1"},{value:"id2", text:"name2"},{value:"id3", text:name3"}]'), field('multiple', true, PropTypes.bool, true, '是否启用多选模式'), field('onClick', null, PropTypes.func, false, '点击单选时的回调函数,接收参数为该项数据对象{ value, checked}'), field('onSubmit', null, PropTypes.func, false, '多选时,点击确定时的回调函数，接收参数为选中项数组[{value:"id1", text:"name1"}]'), field('onCancel', null, PropTypes.func, false, '多选时,点击取消时的回调函数'), field('minCount', 8, PropTypes.number, false, '当数据大于8条时显示更多按钮'), field('isSetting', false, PropTypes.bool, true, '是否启用设置按钮'), field('onSettingBtnClick', null, PropTypes.func, false, '点击设置按钮的回调'), field('extra', '', PropTypes.element, false, '右侧操作区域'), field('defaultSelectedKeys', [], PropTypes.array, false, '多选状态下默认选中的keys'), field('defaultActivedKey', '', PropTypes.array, false, '单选状态下默认选中的key'), field('colSpan', 3, PropTypes.number, false, '每个单位所占比例，24等份')]
};

var YYFilterRow = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var _props = this.props,
            items = _props.items,
            defaultSelectedKeys = _props.defaultSelectedKeys;

        var selectedItems = _.filter(items, function (item) {
            return defaultSelectedKeys.indexOf(item.value) !== -1;
        });;

        return {
            selectedItems: selectedItems, //多选状态下选中项
            defaultSelectedKeys: defaultSelectedKeys,
            isMultiple: false, //是否为多选态
            isShowAll: false //是否显示全部数据
        };
    },
    //多选|单选切换
    _toggleMultiple: function _toggleMultiple() {
        this.setState({ isMultiple: !this.state.isMultiple });
    },
    //切换更多|收起
    _toggleShowAll: function _toggleShowAll(isExpand) {
        if (this.state.isMultiple) {
            //多选态
            this.setState({ isShowAll: isExpand, isMultiple: false });
        } else {
            //单选态
            this.setState({ isShowAll: isExpand });
        }
    },
    //单选－提交
    _submitSigle: function _submitSigle(item, checked) {
        if (this.props.onClick) {
            this.props.onClick(item, checked);
        }
        if (checked) {
            this.setState({ checkedKey: item.value });
        } else {
            this.setState({ checkedKey: '' });
        }
    },
    //多选态-提交
    _submitMultiple: function _submitMultiple(items) {
        var defaultSelectedKeys = _.map(items, function (item) {
            return item.value;
        });
        this.setState({
            isMultiple: false,
            selectedItems: items,
            defaultSelectedKeys: defaultSelectedKeys
        });
        if (this.props.onSubmit) {
            this.props.onSubmit(items);
        }
    },
    //多选态-移除
    _removeMultiple: function _removeMultiple() {
        this.setState({
            selectedItems: [],
            defaultSelectedKeys: []
        });
        if (this.props.onSubmit) {
            this.props.onSubmit([]);
        }
    },
    //多选态-取消
    _cancelMultiple: function _cancelMultiple() {
        this.setState({ isMultiple: false });
        if (this.props.onCancel) {
            this.props.onCancel();
        }
    },
    _onSettingBtnClick: function _onSettingBtnClick() {
        if (this.props.onSettingBtnClick) {
            this.props.onSettingBtnClick();
        }
    },
    _createSettingBtn: function _createSettingBtn(isSetting) {
        if (isSetting) {
            return React.createElement(
                YYButton,
                { className: 'yyui-filter-btn-multiple', onClick: this._onSettingBtnClick },
                '\u8BBE\u7F6E'
            );
        }
        return null;
    },
    //创建多选按钮
    _createMultiBtn: function _createMultiBtn(isMultiple) {
        if (this.props.multiple && !isMultiple) {
            return React.createElement(
                YYButton,
                { className: 'yyui-filter-btn-multiple', onClick: this._toggleMultiple },
                '\u591A\u9009'
            );
        }
        return null;
    },
    //创建更多按钮
    _createMoreBtn: function _createMoreBtn(isMultiple) {
        var isShowAll = this.state.isShowAll;
        var _props2 = this.props,
            items = _props2.items,
            minCount = _props2.minCount;


        if (items.length >= minCount) {
            return React.createElement(YYFilterToggle, {
                expandText: '\u6536\u8D77',
                collapseText: '\u66F4\u591A',
                expandIcon: '',
                collapseIcon: '',
                expand: isMultiple ? true : isShowAll,
                onExpandOrCollapse: this._toggleShowAll
            });
        }
        return null;
    },
    //创建内容
    _createContent: function _createContent(isMultiple) {
        //启用了多选模式才使用多选组件
        var _state = this.state,
            selectedItems = _state.selectedItems,
            defaultSelectedKeys = _state.defaultSelectedKeys;
        var _props3 = this.props,
            multiple = _props3.multiple,
            items = _props3.items,
            onClearFilter = _props3.onClearFilter,
            minCount = _props3.minCount,
            defaultActivedKey = _props3.defaultActivedKey;

        if (multiple && !isMultiple && selectedItems.length) {
            return React.createElement(YYFilterSelected, {
                selectedItems: selectedItems,
                onRmoveItems: this._removeMultiple
            });
        }
        if (isMultiple) {
            //多选态
            return React.createElement(YYFilterMultiple, {
                items: items,
                colSpan: this.props.colSpan,
                onSubmit: this._submitMultiple,
                onCancel: this._cancelMultiple,
                defaultSelectedKeys: defaultSelectedKeys
            });
        } else {
            //单选态
            return React.createElement(YYFilterSingle, {
                items: items,
                minCount: minCount,
                colSpan: this.props.colSpan,
                onClick: this._submitSigle,
                showAll: this.state.isShowAll,
                onClearFilter: onClearFilter,
                defaultActivedKey: defaultActivedKey
            });
        }
    },
    render: function render() {
        var _props4 = this.props,
            multiple = _props4.multiple,
            title = _props4.title,
            splitText = _props4.splitText,
            extra = _props4.extra,
            isSetting = _props4.isSetting;
        var isMultiple = this.state.isMultiple;

        var extraSpan = extra ? 6 : 0;
        //启用了多选模式才使用多选组件
        isMultiple = multiple && isMultiple;

        return React.createElement(
            YYRow,
            { className: 'yyui-filter-line' },
            React.createElement(
                YYCol,
                { span: 3 },
                React.createElement(
                    'span',
                    null,
                    '' + (title + splitText)
                )
            ),
            React.createElement(
                YYCol,
                { span: 18 - extraSpan },
                this._createContent(isMultiple)
            ),
            React.createElement(
                YYCol,
                { span: 3 },
                this._createMultiBtn(isMultiple),
                this._createMoreBtn(isMultiple),
                this._createSettingBtn(isSetting)
            ),
            extra ? React.createElement(
                YYCol,
                { span: extraSpan },
                extra
            ) : null
        );
    }
});

module.exports = YYFilterRow;