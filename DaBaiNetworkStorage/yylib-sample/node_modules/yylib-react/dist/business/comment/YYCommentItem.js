'use strict';

var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYRow = _require.YYRow,
    YYCol = _require.YYCol,
    YYIcon = _require.YYIcon,
    YYButton = _require.YYButton,
    YYDivide = _require.YYDivide;

var YYCommentEditor = require('./YYCommentEditor');
var formatUtils = require('yylib-utils/formatUtils');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var ajax = require('yylib-utils/ajax');
require('./style/commentitem.less');

//定义META
var uiMeta = {
    name: 'commentitem',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('avatar', '', PropTypes.string, false, '回答者头像'), field('link', '', PropTypes.string, false, '回答者链接'), field('username', '', PropTypes.string, false, '回答者者名称'), field('createDate', '', PropTypes.string, false, '回答时间'), field('replyId', '', PropTypes.string, false, '被回复名称'), field('replyName', '', PropTypes.string, false, '被回复名称'), field('replyLink', '', PropTypes.string, false, '被回复链接'), field('content', '', PropTypes.string, false, '回复内容'), field('likeCount', '', PropTypes.number, false, '赞同数'), field('liked', false, PropTypes.number, false, '赞同请求的URL'), field('likeUrl', '', PropTypes.number, false, '赞同请求的URL'), field('replyUrl', '', PropTypes.number, false, '回复请求的URL')]
};

var YYCommentItem = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            editorVisible: false,
            liked: this.props.liked
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.liked !== this.state.liked) {
            this.setState({ liked: nextProps.liked });
        }
    },
    onToggleEditor: function onToggleEditor() {
        this.setState({ editorVisible: !this.state.editorVisible });
    },
    onReplySubmit: function onReplySubmit(html) {
        //回复请求
        var _this = this;
        ajax.postJSON(this.props.replyUrl, {}, function (result) {
            if (result.success) {
                _this.setState({ html: html });
            } else {
                YYMessage.warning(result.backMsg);
            }
        });
    },
    onToggleLikeClick: function onToggleLikeClick() {
        //赞同或取消赞同请求
        ajax.postJSON(this.props.likeUrl, {}, function (result) {
            if (result.success) {
                _this.setState({ liked: !this.state.liked });
            } else {
                YYMessage.warning(result.backMsg);
            }
        });
    },
    render: function render() {
        var props = this.props;
        return React.createElement(
            'div',
            { className: this.className() + ' clearfix' },
            React.createElement(
                'div',
                { className: 'comment-left' },
                React.createElement(
                    'a',
                    { className: 'comment-avatar', href: props.link },
                    React.createElement('img', { src: props.avatar ? props.avatar : require('./avatar.png') })
                )
            ),
            React.createElement(
                'div',
                { className: 'comment-right' },
                React.createElement(
                    'p',
                    { className: 'comment-name' },
                    React.createElement(
                        'a',
                        { href: props.link },
                        props.username
                    ),
                    ' - ',
                    React.createElement(
                        'span',
                        { className: 'comment-date' },
                        formatUtils.formatDate(new Date(props.createDate), 'yyyy-MM-dd')
                    )
                ),
                props.replyId ? React.createElement(
                    'p',
                    { className: 'comment-asker' },
                    React.createElement(
                        'span',
                        null,
                        '\u56DE\u590D'
                    ),
                    React.createElement(
                        'a',
                        { href: props.replyLink },
                        props.replyName
                    )
                ) : null,
                React.createElement('div', { className: 'comment-content', dangerouslySetInnerHTML: { __html: props.content } }),
                React.createElement(
                    'div',
                    { className: 'comment-oprer' },
                    React.createElement(
                        'span',
                        { className: 'comment-remark ' + (this.state.editorVisible ? 'active' : ''), onClick: this.onToggleEditor },
                        React.createElement(YYIcon, { type: 'message' }),
                        '\u8BC4\u8BBA',
                        React.createElement(YYDivide, null)
                    ),
                    React.createElement(
                        'span',
                        { className: 'comment-like ' + (this.state.liked ? 'active' : '') },
                        React.createElement(YYIcon, { type: 'like', onClick: this.onToggleLikeClick }),
                        props.likeCount
                    )
                ),
                React.createElement('div', { className: 'reply-content', dangerouslySetInnerHTML: this.state.html }),
                React.createElement(YYCommentEditor, {
                    value: ' ',
                    ref: 'commentEditor',
                    editorVisible: this.state.editorVisible,
                    clickSave: this.onReplySubmit,
                    clickCancel: this.onToggleEditor })
            )
        );
    }
});

module.exports = YYCommentItem;