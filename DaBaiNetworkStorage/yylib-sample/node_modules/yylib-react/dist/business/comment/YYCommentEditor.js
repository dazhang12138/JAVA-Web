'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYToolbar = _require.YYToolbar,
    YYButton = _require.YYButton;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYEditor = require('yylib-ui/editor/YYEditor');
require('./style/commenteditor.less');
var _ = require('lodash');
//定义META
var uiMeta = {
    name: 'commenteditor',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('icons', null, PropTypes.oneOf([PropTypes.object, PropTypes.array]), false, '配置富文本框图标工具栏'), field('editorVisible', null, PropTypes.bool, false, '是否显示编辑器'), field('value', '', PropTypes.string, false, '编辑器显示内容')]
};

var YYCommentEditor = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            content: this.props.value
        };
    },
    createHTML: function createHTML() {
        var content = this.state.content;
        return { __html: content };
    },
    _clickCancel: function _clickCancel() {
        if (_.isFunction(this.props.clickCancel)) {
            this.props.clickCancel();
        }
    },
    _clickSave: function _clickSave() {
        var Html = this.createHTML();
        this.props.clickSave(Html);
    },
    changeContent: function changeContent(content) {
        this.setState({
            content: content
        });
        if (_.isFunction(this.props.onChange)) {
            this.props.onChange(content);
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                content: nextProps.value
            });
        }
    },
    render: function render() {
        var cls = this.className();
        var content = this.state.content;
        var editorVisible = this.props.editorVisible;
        var icons = ['bold | italic | underline | strikethrough | fontborder | emphasis '];
        var edit = editorVisible ? React.createElement(
            'div',
            { className: cls },
            React.createElement(YYEditor, { value: content, onChange: this.changeContent, icons: icons, ref: 'contentEditor' }),
            React.createElement(
                YYToolbar,
                null,
                React.createElement(
                    YYButton,
                    { ghost: true, type: 'primary', onClick: this._clickCancel },
                    '\u53D6\u6D88'
                ),
                React.createElement(
                    YYButton,
                    { type: 'primary', onClick: this._clickSave },
                    '\u63D0\u4EA4'
                )
            )
        ) : null;
        return edit;
    }
});

module.exports = YYCommentEditor;