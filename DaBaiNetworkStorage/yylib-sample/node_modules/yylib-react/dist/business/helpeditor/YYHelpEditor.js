'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYButton = _require.YYButton,
    YYToolbar = _require.YYToolbar,
    YYMessage = _require.YYMessage,
    YYInput = _require.YYInput,
    YYForm = _require.YYForm,
    YYFormItem = _require.YYFormItem;

var YYEditor = require('yylib-ui/editor/YYEditor');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
require('./index.less');
var ajax = require('yylib-utils/ajax');
var _ = require('lodash');
var URLS = require('./Resturl');
var formItemLayout = {
    labelCol: { span: 6 },
    wrapperCol: { span: 14 }
};
var Form = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            title: '文档标题'
        };
    },
    render: function render() {
        var getFieldProps = this.props.form.getFieldProps;

        return React.createElement(
            YYForm,
            { horizontal: true },
            React.createElement(
                YYFormItem,
                _extends({}, formItemLayout, { label: '\u6587\u6863\u6807\u9898' }),
                React.createElement(YYInput, getFieldProps('helpTitle', { initialValue: this.props.title }))
            )
        );
    }
});
Form = YYForm.create()(Form);
//定义META
var uiMeta = {
    name: 'helpdoc',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('title', '帮助标题', PropTypes.string, true, '帮助标题(功能节点名称)'), field('orgId', null, PropTypes.string, false, '组织ID'), field('funcId', null, PropTypes.string, false, '功能节点ID'), field('editable', false, PropTypes.string, false, '是否启用编辑'), field('serverUrl', URLS.HELP_DOC, PropTypes.string, false, '帮助保存的服务URL'), field('uploadImgUrl', URLS.UPLOAD_IMG, PropTypes.string, false, '上传图片服务的URL地址'), field('uploadImgName', undefined, PropTypes.string, false, '上传图片服务的文件标识名')]
};

var YYHelpEditor = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var props = this._getProps();
        return {
            editable: this.props.editable,
            id: null,
            content: ' ', //默认提供带空格字符串，清除内部内容
            title: props.title,
            funcId: props.funcId,
            orgId: props.orgId
        };
    },
    createHTML: function createHTML() {
        var content = this.state.content;
        return { __html: content };
    },
    openEdit: function openEdit() {
        this.setState({
            editable: true
        });
    },
    _getProps: function _getProps() {
        var _props = this.props,
            orgId = _props.orgId,
            funcId = _props.funcId,
            title = _props.title,
            location = _props.location;

        var query = location && location.query ? location.query : {};
        var _orgId = query.orgId ? query.orgId : orgId;
        var _funcId = query.funcId ? query.funcId : funcId;
        var _title = query.title ? query.title : title;
        return { title: _title, funcId: _funcId, orgId: _orgId };
    },
    componentDidMount: function componentDidMount() {
        var _this = this;
        var serverUrl = this.props.serverUrl;
        var props = this._getProps();
        var url = props.orgId ? '' + serverUrl + props.funcId + '/' + props.orgId : '' + serverUrl + props.funcId;
        ajax.getJSON(url, function (result) {
            if (result.success && result.backData) {
                _this.setState({
                    title: result.backData.title ? result.backData.title : props.title,
                    content: result.backData.content,
                    orgId: result.backData.orgId,
                    funcId: result.backData.funcId,
                    id: result.backData.id
                });
            }
        });
    },
    clickSave: function clickSave() {
        var content = this.refs.myEditor.getContent();
        var _state = this.state,
            orgId = _state.orgId,
            funcId = _state.funcId,
            id = _state.id;

        var _this = this;
        var params = { content: content, funcId: funcId };
        if (id) params.id = id;
        if (orgId) params.orgId = orgId;
        var title = this.refs.form.getFieldsValue().helpTitle;
        if (title) {
            params.title = title;
        }
        ajax.postJSON(this.props.serverUrl, params, function (result) {
            if (result.success) {
                _this.setState({
                    content: content,
                    editable: false,
                    title: title
                });
                YYMessage.success('数据保存成功');
            } else {
                YYMessage.error('数据保存失败');
            }
        });
    },
    clickCancel: function clickCancel() {
        this.setState({
            editable: false
        });
    },
    render: function render() {
        var _state2 = this.state,
            editable = _state2.editable,
            content = _state2.content,
            title = _state2.title;

        var cls = this.className();
        return React.createElement(
            'div',
            { className: cls },
            React.createElement(
                YYToolbar,
                null,
                editable ? React.createElement(Form, { title: title, ref: 'form' }) : React.createElement(
                    'p',
                    null,
                    title
                ),
                editable == false ? React.createElement(
                    YYButton,
                    { ghost: true, onClick: this.openEdit },
                    '\u7F16\u8F91'
                ) : null,
                editable ? React.createElement(
                    YYButton,
                    { ghost: true, onClick: this.clickSave },
                    '\u4FDD\u5B58'
                ) : null,
                editable ? React.createElement(
                    YYButton,
                    { ghost: true, onClick: this.clickCancel },
                    '\u53D6\u6D88'
                ) : null
            ),
            editable == false ? React.createElement('div', { className: 'help-content', dangerouslySetInnerHTML: this.createHTML() }) : null,
            editable ? React.createElement(YYEditor, { ref: 'myEditor', value: content, uploadImgUrl: this.props.uploadImgUrl, uploadImgName: this.props.uploadImgName }) : null
        );
    }
});
module.exports = YYHelpEditor;