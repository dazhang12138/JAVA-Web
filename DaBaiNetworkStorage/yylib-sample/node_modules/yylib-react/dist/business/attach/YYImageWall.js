'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 图片墙
 */
var React = require('react');
var ReactDOM = require('react-dom');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYIcon = _require.YYIcon,
    YYUpload = _require.YYUpload,
    YYModal = _require.YYModal,
    YYMessage = _require.YYMessage;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var ADDR = require('../BaseHost');

var _require2 = require("./attachaction"),
    loadAttachList = _require2.loadAttachList,
    delAttach = _require2.delAttach,
    downloadUrl = _require2.downloadUrl,
    listUrl = _require2.listUrl,
    uploadUrl = _require2.uploadUrl,
    delUrl = _require2.delUrl,
    loadFileListByFileIds = _require2.loadFileListByFileIds,
    getFileListByFileIdsUrl = _require2.getFileListByFileIdsUrl,
    handleUrl = _require2.handleUrl;

require('./index.less');
//定义META
var uiMeta = {
    name: 'imagewall',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('serverUrl', ADDR, PropTypes.string, true, '文件上传服务的地址'), field('maxCount', undefined, PropTypes.number, false, '允许上传的图片最大数，大于0则生效，默认0即不限制数量'), field('onRemove', null, PropTypes.func, false, '文件删除时的回调，当回调函数返回false，则不允许删除，传递参数：file-当前文件'), field('onChange', null, PropTypes.func, false, '文件列表发生变更时的回调，传递参数：fileIds-文件id集合，items-文件列表信息'), field('beforeUpload', null, PropTypes.func, false, '可选参数, 上传文件之前的钩子，参数为上传的文件，若返回 false 或者 Promise 则停止上传。注意：该方法不支持老 IE。 '), field('billType', '', PropTypes.string, false, '业务单据类型'), field('sourceId', '', PropTypes.string, false, '业务单据ID'), field('sourceType', '', PropTypes.string, false, '业务单据文件细分类别标识'), field('buttonText', '点击上传', PropTypes.string, false, '上传按钮名称'), field('disabled', false, PropTypes.bool, false, '是否禁用'), field('defaultValue', undefined, PropTypes.string, false, '默认文件id集合，多个文件逗号分隔的字符串')]
};

var YYImageWall = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            previewVisible: false,
            previewImage: '',
            fileList: [
                //{
                //    uid: -1,
                //    name: 'xxx.png',
                //    status: 'done',
                //    url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',
                //}
            ]
        };
    },
    handleCancel: function handleCancel() {
        this.setState({ previewVisible: false });
    },
    handlePreview: function handlePreview(file) {
        this.setState({
            previewImage: file.fileUrl || file.thumbUrl || file.url,
            previewVisible: true
        });
    }
    //获取缩略图路径
    , _zoomImgPath: function _zoomImgPath(filePath) {
        if (!filePath) return filePath;
        //缩略图尺寸
        var dimension = "_100x100";
        var idx = filePath.lastIndexOf(".");
        if (idx > -1) {
            var ext = filePath.substr(idx);
            return filePath.substr(0, idx) + dimension + ext;
        } else {
            return filePath;
        }
    },
    handleChange: function handleChange(info) {
        var fileList = info.fileList;
        var serverUrl = this.props.serverUrl;

        if (info.file.status == 'done') {
            //上传完成
            var resultObj = info.file.response;
            if (resultObj) {
                //上传接口返回文件的uid
                if (resultObj.success) {
                    var fileid = resultObj.backData[0].gid;
                    var filePath = resultObj.backData[0].filePath;
                    var fileName = resultObj.backData[0].fileName;
                    var thumbUrl = serverUrl + "/" + this._zoomImgPath(filePath) + "?filename=" + fileName;
                    var fileUrl = serverUrl + "/" + filePath + "?filename=" + fileName;
                    info.file.fileUrl = fileUrl; //原图地址
                    info.file.url = handleUrl(thumbUrl); //缩略图地址
                    info.file.uid = fileid;
                    info.file.backData = resultObj.backData[0];
                    this.setState({ fileList: fileList }, function () {
                        this._onChangeValue();
                    });
                }
            }
        } else {
            //动态更新上传状态
            this.setState({ fileList: info.fileList });
        }
    },
    handleRemove: function handleRemove(file) {
        var onRemove = this.props.onRemove;
        //删除前判断

        if (typeof onRemove == 'function') {
            if (onRemove(file) == false) return;
        }
        var uid = file.uid;
        var fileList = this.state.fileList;
        //从fileList中删除
        this._removeItemFromListById(fileList, uid);
    },

    _removeFileItem: function _removeFileItem(fileList, fileid) {
        var idx = -1;
        fileList.map(function (item, i) {
            if (item.uid == fileid) {
                idx = i;return;
            }
        });
        if (idx > -1) {
            fileList.splice(idx, 1);
            this.setState({ fileList: fileList });
        }
    },
    _removeItemFromListById: function _removeItemFromListById(fileList, fileid) {
        var _props = this.props,
            serverUrl = _props.serverUrl,
            billType = _props.billType,
            sourceId = _props.sourceId,
            sourceType = _props.sourceType;

        var that = this;
        if (sourceId && billType) {
            delAttach(serverUrl + delUrl, { id: sourceId, billType: billType, sourceType: sourceType, attachIds: fileid }, function (data) {
                if (data.success) {
                    that._removeFileItem(fileList, fileid);
                    that._onChangeValue();
                } else {
                    YYMessage.error('文件删除失败：' + data.backMsg);
                }
            }, function (err) {
                YYMessage.error('文件删除请求失败！');
                console.error("文件删除请求失败", error);
            });
        } else {
            that._removeFileItem(fileList, fileid);
            that._onChangeValue();
        }
    },
    componentDidMount: function componentDidMount() {
        var _props2 = this.props,
            serverUrl = _props2.serverUrl,
            billType = _props2.billType,
            sourceId = _props2.sourceId,
            sourceType = _props2.sourceType,
            defaultValue = _props2.defaultValue;

        if (defaultValue) {
            this._loadDefaultList(serverUrl, defaultValue);
        } else {
            this._loadFileList(serverUrl, billType, sourceId, sourceType);
        }
    },
    componentDidUpdate: function componentDidUpdate() {
        //渲染禁用
        this._renderDisabled(this.props.disabled);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var sourceId = nextProps.sourceId;
        var billType = nextProps.billType;
        var sourceType = nextProps.sourceType;
        var serverUrl = nextProps.serverUrl;
        var defaultValue = nextProps.defaultValue;
        if (defaultValue) {
            if (this.props.defaultValue !== defaultValue) {
                this._loadDefaultList(serverUrl, defaultValue);
            }
        } else {
            if (this.props.sourceId !== nextProps.sourceId) {
                //sourceId变化时才加载附件列表
                this._loadFileList(serverUrl, billType, sourceId, sourceType);
            }
        }
    },
    _onChangeValue: function _onChangeValue() {
        //获取上传文件的fileid
        var onChange = this.props.onChange;
        var fileList = this.state.fileList;

        var idArr = [];
        var items = [];
        if (fileList && fileList.length > 0) {
            fileList.map(function (item, i) {
                idArr.push(item.uid);
                items.push(item.backData);
            });
        }
        var fileIds = idArr.join(',');
        if (typeof onChange == 'function') {
            onChange(fileIds, items);
        }
    }
    //依据defaultValue(文件ids)加载文件列表
    , _loadDefaultList: function _loadDefaultList(serverUrl, defaultValue) {
        var url = serverUrl + getFileListByFileIdsUrl;
        var that = this;
        loadFileListByFileIds(url, { ids: defaultValue }, function (data) {
            if (data.success) {
                if (data.backData && data.backData.length > 0) {
                    that._processFileList(serverUrl, data.backData);
                }
            }
        }, function (error) {
            that.setState({ fileList: [] }, function () {
                that._onChangeValue();
            });
        });
    }
    //依据billType,sourceId,sourceType加载文件列表
    ,
    _loadFileList: function _loadFileList(serverUrl, billType, sourceId, sourceType) {
        var data = {};
        if (billType) data.billType = billType;
        if (sourceId) data.id = sourceId;
        if (sourceType) data.type = sourceType;
        data.ajaxId = "loadAttachList_" + YYClass.uuid();
        var that = this;
        that._loadFileAjaxId = data.ajaxId;
        loadAttachList(serverUrl + listUrl, data, function (backData, ajaxId) {
            //只处理最后一次有效的请求和响应
            if (that._loadFileAjaxId !== ajaxId) return;
            if (backData && backData.length > 0) {
                that._processFileList(serverUrl, backData);
            }
        }, function (error, ajaxId) {
            //只处理最后一次有效的请求和响应
            if (that._loadFileAjaxId !== ajaxId) return;
            that.setState({ fileList: [] }, function () {
                that._onChangeValue();
            });
        });
    }
    //处理文件列表
    , _processFileList: function _processFileList(serverUrl, backData) {
        var that = this;
        var fileList = [];
        for (var i = 0; i < backData.length; i++) {
            var item = backData[i];
            var thumbUrl = serverUrl + "/" + that._zoomImgPath(item.filePath) + "?filename=" + item.fileName;
            var fileUrl = serverUrl + "/" + item.filePath + "?filename=" + item.fileName;
            var file = { uid: item.gid, name: item.fileName, url: handleUrl(thumbUrl), fileUrl: fileUrl, status: 'done', backData: item };
            fileList.push(file);
        }
        that.setState({ fileList: fileList }, function () {
            that._onChangeValue();
        });
    }
    //渲染禁用
    , _renderDisabled: function _renderDisabled(disabled) {
        var uploadDom = ReactDOM.findDOMNode(this);
        //图标列表
        var items = uploadDom.querySelectorAll('.ant-upload-list-item-info .anticon-delete');
        if (items && items.length) {
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                item.style.display = disabled ? 'none' : '';
            }
        }
    },
    render: function render() {
        var _props3 = this.props,
            serverUrl = _props3.serverUrl,
            maxCount = _props3.maxCount,
            billType = _props3.billType,
            sourceId = _props3.sourceId,
            sourceType = _props3.sourceType,
            buttonText = _props3.buttonText,
            disabled = _props3.disabled;
        var _state = this.state,
            previewVisible = _state.previewVisible,
            previewImage = _state.previewImage,
            fileList = _state.fileList;

        var uploadButton = React.createElement(
            'div',
            null,
            React.createElement(YYIcon, { type: 'plus' }),
            React.createElement(
                'div',
                { className: 'ant-upload-text' },
                buttonText
            )
        );
        var doneCount = _.filter(fileList, function (f) {
            return f.status == "done";
        }).length;
        if (maxCount && maxCount > 0 && doneCount >= maxCount) {
            disabled = true;
        };
        return React.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            React.createElement(
                YYUpload,
                _extends({}, this.props, {
                    action: serverUrl + uploadUrl,
                    data: { billType: billType, sourceId: sourceId, sourceType: sourceType },
                    accept: 'image/gif,image/jpeg,image/jpg,image/png',
                    listType: 'picture-card',
                    multiple: false,
                    fileList: fileList,
                    onPreview: this.handlePreview,
                    onRemove: this.handleRemove,
                    onChange: this.handleChange,
                    disabled: disabled
                }),
                uploadButton
            ),
            React.createElement(
                YYModal,
                { visible: previewVisible, width: 'auto', style: { maxWidth: '85%' }, footer: null, onCancel: this.handleCancel },
                React.createElement('img', { style: { width: '100%' }, src: previewImage })
            )
        );
    }
});

module.exports = YYImageWall;