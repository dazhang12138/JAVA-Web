'use strict';

/**
 * Created by Administrator on 2016/7/26.
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYCol = _require.YYCol,
    YYRow = _require.YYRow,
    YYButton = _require.YYButton,
    YYTable = _require.YYTable,
    YYUpload = _require.YYUpload,
    YYClass = _require.YYClass,
    YYNotice = _require.YYNotice;

var _require2 = require("../attachaction"),
    loadAttachList = _require2.loadAttachList,
    delAttach = _require2.delAttach,
    showErrMsg = _require2.showErrMsg,
    downloadUrl = _require2.downloadUrl,
    listUrl = _require2.listUrl,
    uploadUrl = _require2.uploadUrl,
    delUrl = _require2.delUrl,
    handleUrl = _require2.handleUrl;

var pageSize = 10; //每页显示条数

var _require3 = require('yylib-utils/MathUtil'),
    execute = _require3.execute;

//下载url
//const downloadUrl = "/icop-file/file/download?id=";
//获取附件列表的url
//const listUrl = "/icop-file/file/list";
//上传url
//const uploadUrl = "/icop-file/file/upload2";

//const delUrl = "/icop-file/file/del";

//参数object&操作方法
//var dataMap = {};

var AttachListTable = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return { showUploadBtn: true, showDelBtn: true, readOnly: false };
    },
    getInitialState: function getInitialState() {
        return {
            serverUrl: '',
            selectId: [],
            current: 1,
            sourceId: null,
            billType: null,
            sourceType: null,
            pageVisible: false,
            totalsize: 0,
            data: [],
            pageInfo: {
                pageNumber: 1,
                pageSize: 10
            },
            isload: false,
            dataMap: {}
        };
    },

    _loadList: function _loadList(serverUrl, billType, sourceId, sourceType) {
        var url = serverUrl + listUrl;
        var that = this;
        loadAttachList(url, { id: sourceId, billType: billType, type: sourceType }, function (data) {
            that.setState({ data: data });
            that.state.dataMap[sourceType] = data;
        }, function (msg) {
            showErrMsg("上传失败", msg);
        });
    },
    _removeFile: function _removeFile(serverUrl, sourceId, billType, sourceType, ids) {
        var url = serverUrl + delUrl;
        var that = this;
        if (sourceId && billType) {
            delAttach(url, { id: sourceId, billType: billType, sourceType: sourceType, attachIds: ids }, function (data) {
                if (data.success) {
                    that.doRemove(sourceType, ids);
                } else {
                    showErrMsg("删除失败", data.backMsg);
                }
            }, function (msg) {
                showErrMsg("删除失败", msg);
            });
        } else {
            that.doRemove(sourceType, ids);
        }
    },
    doRemove: function doRemove(sourceType, ids) {
        var idArr = ids.split(',');
        var newFileArr = [];
        var files = this.state.data;
        var that = this;
        files.map(function (item, i) {
            if (!that.arrayContains(idArr, item.gid)) {
                newFileArr.push(item);
            }
        });
        this.setState({ data: newFileArr });
        this.state.dataMap[sourceType] = newFileArr; //将更新的数据放入map中
        this.onChangePage(1);

        this.refreshValue();
    },
    arrayContains: function arrayContains(arr, obj) {
        var i = arr.length;
        while (i--) {
            if (arr[i] === obj) {
                return true;
            }
        }
        return false;
    },
    //查询数据
    componentDidMount: function componentDidMount() {
        /*if(this.state.isload){
            return;
        }*/
        var sourceId = this.props.sourceId;
        var billType = this.props.billType;
        var sourceType = this.props.sourceType;
        this.setState({ sourceId: sourceId });

        if (sourceId && billType) {
            this.setState({ data: [], dataMap: {} });
            this._loadList(this.props.serverUrl, billType, sourceId, sourceType);
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var sourceId = nextProps.sourceId;
        var billType = nextProps.billType;
        var sourceType = nextProps.sourceType;
        //this.setState({dataMap:[]});
        var lastSourceId = this.state.sourceId;
        var lastSourceType = this.state.sourceType;

        if (!sourceId) {
            sourceId = "";
        }
        if (!lastSourceId) {
            lastSourceId = "";
        }
        if (!billType) {
            billType = "";
        }
        if (!lastSourceType) {
            lastSourceType = "";
        }
        this.setState({ sourceId: sourceId, sourceType: sourceType });
        if (sourceId && billType) {
            this.setState({ isload: true });
            if (sourceId != lastSourceId) {
                ////sourceId变化时才加载附件列表
                this.setState({ data: [], dataMap: {} }); //sourceId有变化，该值已无意义
                this._loadList(this.props.serverUrl, billType, sourceId, sourceType);
            } else {
                if (sourceType != lastSourceType) {
                    //文件类型变化了，重新加载
                    this.setState({ data: [] }); //sourceId有变化，该值已无意义
                    this._loadList(this.props.serverUrl, billType, sourceId, sourceType);
                }
            }
        } else {
            if (sourceId == lastSourceId) {
                //sourceId发生变化就应该清空列表
                if (sourceType != lastSourceType) {
                    //文件类型变化了，重新加载
                    var data = [];
                    if (sourceType in this.state.dataMap) {
                        data = this.state.dataMap[sourceType];
                    }
                    this.setState({ data: data });
                }
            } else {
                this.setState({ data: [], dataMap: {} });
            }
        }
    },

    //显示条数
    showTotal: function showTotal(total) {
        return '\u5171 ' + total + ' \u6761';
    },
    //改变页码
    onChangePage: function onChangePage(page) {
        var pageInfo = {
            pageNumber: page - 1,
            pageSize: this.state.pageInfo.pageSize
        };
        this.setState({
            pageInfo: pageInfo
        }, function () {});
    },
    //批量删除
    deleteAll: function deleteAll(e) {
        var ids = this.state.selectId;
        if (ids) {
            this._removeFile(this.props.serverUrl, this.props.sourceId, this.props.billType, this.props.sourceType, ids);
        } else {
            showErrMsg("删除失败", "请选择要删除的文件");
        }
    },
    onUpload: function onUpload(e) {
        e.preventDefault();
    },
    refreshValue: function refreshValue() {
        if (this.props.sourceId) {
            this.props.modal.changeValue(null);
            return;
        }
        var map = {};
        for (var prop in this.state.dataMap) {
            if (this.state.dataMap.hasOwnProperty(prop)) {
                var arr = this.state.dataMap[prop];
                var newIdArr = [];
                arr.map(function (item, i) {
                    newIdArr.push(item.gid);
                });
                map[prop] = newIdArr.join(',');
            }
        }
        /*var idArr = [];
        this.state.data.map(function(item,i){
            idArr.push(item.gid);
        })
        this.props.modal.changeValue(idArr.join(','));*/

        this.props.modal.changeValue(JSON.stringify(map));
    },
    staticUrl: function staticUrl() {
        if (this.props.fileUrl) {
            return this.props.fileUrl;
        }
        return this.props.serverUrl;
    },
    render: function render() {
        var that = this;
        var totalsize = 0;
        var data = this.state.data ? this.state.data : [];
        //console.log("data:"+data);
        var sourceId = this.props.sourceId;
        var billType = this.props.billType;
        var sourceType = this.props.sourceType;
        var visible = this.props.pageVisible;
        var serverUrl = this.props.serverUrl;
        var uploadFileUrl = this.props.serverUrl + uploadUrl;
        var downloadFileUrl = this.props.serverUrl + downloadUrl;
        var staticUrl = this.staticUrl();
        //附件上传
        var uploadProps = {
            action: uploadFileUrl,
            showUploadList: false,
            multiple: false,
            data: { sourceId: sourceId, billType: billType, sourceType: sourceType },
            beforeUpload: function beforeUpload(info) {
                that.state.loadingDisplay = true;
                that.setState({ changeFlag: !that.state.changeFlag });
            },
            onChange: function onChange(info) {
                if (info.file.status !== 'downloading') {}
                if (info.file.status === 'done') {
                    var resultObj = info.file.response;
                    if (resultObj.success) {
                        var result = that.state.data;
                        result = resultObj.backData.concat(result);
                        that.setState({ data: result });
                        that.state.dataMap[sourceType] = result;
                        that.onChangePage(1);

                        that.refreshValue();
                    } else {
                        showErrMsg('上传失败', info.file.response.msg);
                    }
                    that.state.loadingDisplay = false;
                    that.setState({ changeFlag: !that.state.changeFlag });
                } else if (info.file.status === 'error') {
                    showErrMsg('上传失败', '请求失败');
                    that.state.loadingDisplay = false;
                    that.setState({ changeFlag: !that.state.changeFlag });
                }
            }
        };
        var pagination = {
            total: data.length,
            showSizeChanger: true,
            onShowSizeChange: function onShowSizeChange(current, pageSize) {},
            onChange: function onChange(current) {}
        };
        var columns = [{
            title: '序号',
            dataIndex: 'num',
            isShow: true,
            width: 60,
            key: 'num',
            render: function render(text, record, index) {
                return React.createElement(
                    'span',
                    null,
                    index + 1
                );
            }
        }, {
            title: '名称',
            isShow: true,
            dataIndex: 'fileName',
            key: 'fileName',
            render: function render(text, record, index) {
                //let urlName = downloadFileUrl+record.gid;
                var urlName = handleUrl(staticUrl + "/" + record.filePath + "?filename=" + record.fileName);
                return React.createElement(
                    'a',
                    { className: 'title-href', target: '_blank', href: urlName },
                    record.fileName
                );
            }
        }, {
            title: '上传人',
            isShow: true,
            width: 90,
            dataIndex: 'createName',
            key: 'createName'
        }, {
            title: '类型',
            isShow: true,
            width: 80,
            dataIndex: 'docType',
            key: 'docType',
            render: function render(text, record, index) {
                var fileName = record.fileName;
                var idx = fileName.lastIndexOf('.');
                if (idx > -1) {
                    return fileName.substr(idx + 1);
                }
                return "";
            }
        }, {
            title: '大小(KB)',
            isShow: true,
            width: 80,
            dataIndex: 'fileSize',
            key: 'fileSize',
            render: function render(text, record, index) {
                if (record.fileSize) {
                    return execute(record.fileSize, 1024, 3, 1);
                }
                return "";
            }
        }];
        var rowSelection = {
            onChange: function onChange(selectedRowKeys, selectedRows) {
                var ids = selectedRowKeys.join(',');
                that.setState({ selectId: ids });
            },
            onSelect: function onSelect(record, selected, selectedRows) {},
            onSelectAll: function onSelectAll(selected, selectedRows, changeRows) {}
        };

        var showUploadArea = this.props.showUploadBtn || this.props.showDelBtn;
        var showUpload = this.props.showUploadBtn;
        var showDel = this.props.showDelBtn;
        var readOnly = this.props.readOnly;

        return React.createElement(
            'div',
            { className: 'attachment-page' },
            React.createElement(
                'div',
                { className: 'attachmentmgr' },
                React.createElement(YYTable, { rowKey: function rowKey(record) {
                        return record.gid;
                    }, dataSource: data, selectedRowKeys: this.state.selectId, pagination: pagination,
                    columns: columns })
            )
        );
    }
});
module.exports = AttachListTable;