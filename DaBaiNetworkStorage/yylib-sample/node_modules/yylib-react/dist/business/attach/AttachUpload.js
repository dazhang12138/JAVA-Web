'use strict';

/**
 * Created by Administrator on 2016/5/11.
 * 上传附件组件
 */
require("./upload.css");
var React = require('react');

var _require = require('yylib-ui'),
    YYUpload = _require.YYUpload,
    YYButton = _require.YYButton,
    YYIcon = _require.YYIcon,
    YYTooltip = _require.YYTooltip,
    YYNotice = _require.YYNotice,
    YYClass = _require.YYClass;

var _require2 = require("./attachaction"),
    loadAttachList = _require2.loadAttachList,
    delAttach = _require2.delAttach,
    showErrMsg = _require2.showErrMsg,
    downloadUrl = _require2.downloadUrl,
    listUrl = _require2.listUrl,
    uploadUrl = _require2.uploadUrl,
    delUrl = _require2.delUrl,
    loadFileListByFileIds = _require2.loadFileListByFileIds,
    getFileListByFileIdsUrl = _require2.getFileListByFileIdsUrl,
    handleUrl = _require2.handleUrl;
//var {Upload} = require("antd");


var _ = require('lodash');
var isFunction = _.isFunction;
var ADDR = require('../BaseHost');
require('./attachupload.less');
var AuthToken = require("yylib-utils/AuthToken");
//文件类型限制，暂不使用
//const allowTypes = ['jpg','png','gif','txt','doc','docx','xls','xlsx','pdf','rar','zip'];
//下载url
//const downloadUrl = "/icop-file/file/download?id=";
//获取附件列表的url
//const listUrl = "/icop-file/file/list";
//上传url
//const uploadUrl = "/icop-file/file/upload2";
//const delUrl = "/icop-file/file/del";

var AttachUpload = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            serverUrl: ADDR,
            fileUrl: ADDR,
            value: '',
            allowFileExts: '',
            uploadFailCallback: null,
            uploadSuccessCallback: null,
            size: "default",
            buttonText: '点击上传',
            beforeUpload: null,
            beforeDel: null,
            userId: '',
            userName: '',
            sourceId: '',
            sourceType: '102345678',
            billType: '',
            disabled: false,
            enableUser: true,
            btnType: 'default'
        };
    },
    getInitialState: function getInitialState() {
        var value = null;
        if (this.props.__meta != undefined && this.props.__meta.initialValue != undefined) {
            value = this.props.__meta.initialValue;
        } else if (this.props.value != undefined) {
            value = this.props.value;
        } else {
            value = this.props.value;
        }
        //添加启用用户控制
        var enableUser = false;
        if (this.props.enableUser != false) {
            enableUser = true;
        }
        var userId = this.props.userId;
        var userName = this.props.userName;
        if (enableUser) {
            if (!userId) {
                userId = AuthToken.getUserId();
            }
            if (!userName) {
                userName = AuthToken.getUserName();
            }
        }
        return {
            value: value,
            fileList: [],
            isload: false, //保证在fileids有值之后只接收一次参数
            disabled: this.props.disabled, //是否只读
            sourceId: '',
            defaultValue: '',
            userId: userId,
            userName: userName
        };
    },
    _loadList: function _loadList(serverUrl, billType, sourceId, sourceType) {
        var url = serverUrl + listUrl;
        var that = this;
        var staticUrl = this.staticUrl();
        that._loadFileAjaxId = "loadAttachList_" + YYClass.uuid();
        loadAttachList(url, { id: sourceId, billType: billType, type: sourceType, ajaxId: that._loadFileAjaxId }, function (data, ajaxId) {
            if (that._loadFileAjaxId !== ajaxId) return;
            var attachArr = [];
            if (data) {
                for (var i = 0, len = data.length; i < len; i++) {
                    var item = data[i];
                    var file = { uid: item.gid, name: item.fileName, url: handleUrl(staticUrl + "/" + item.filePath + "?filename=" + item.fileName), status: 'done', backData: item };
                    attachArr.push(file);
                }
            }
            that.setState({ fileList: attachArr }, function () {
                that.changeValue();
            });
        }, function (error, ajaxId) {
            if (that._loadFileAjaxId !== ajaxId) return;
            that.setState({ fileList: [] }, function () {
                that.changeValue();
            });
        });
    }, _loadDefaultList: function _loadDefaultList(serverUrl, defaultValue) {
        var url = serverUrl + getFileListByFileIdsUrl;
        var that = this;
        var staticUrl = this.staticUrl();
        loadFileListByFileIds(url, { ids: defaultValue }, function (data) {
            if (data.success) {
                var fileData = data.backData;
                var attachArr = [];
                for (var i = 0, len = fileData.length; i < len; i++) {
                    var item = fileData[i];
                    var file = { uid: item.gid, name: item.fileName, url: handleUrl(staticUrl + "/" + item.filePath + "?filename=" + item.fileName), status: 'done', backData: item };
                    attachArr.push(file);
                }
                that.setState({ fileList: attachArr }, function () {
                    that.changeValue();
                });
            }
        });
    },

    _canLoad: function _canLoad(billType, sourceId) {
        return billType && sourceId;
    },
    _removeItemFromListById: function _removeItemFromListById(fileList, fileid) {
        var sourceId = this.props.sourceId;
        var sourceType = this.props.sourceType;
        var billType = this.props.billType;
        if (sourceId && billType) {
            var url = this.props.serverUrl + delUrl;
            var that = this;
            delAttach(url, { id: sourceId, billType: billType, sourceType: sourceType, attachIds: fileid }, function (data) {
                if (data.success) {
                    that.doRemove(fileList, fileid);

                    that.changeValue();
                } else {
                    showErrMsg("删除失败", data.backMsg);
                }
            }, function (err) {
                showErrMsg("删除失败", err);
            });
        } else {
            this.doRemove(fileList, fileid);
            this.changeValue();
        }
    },
    doRemove: function doRemove(fileList, fileid) {
        var idx = -1;
        fileList.map(function (item, i) {
            if (item.uid == fileid) {
                idx = i;
                return;
            }
        });
        if (idx > -1) {
            fileList.splice(idx, 1);
            this.setState({ fileList: fileList });
        }
    },
    componentWillMount: function componentWillMount() {
        //可编辑表格会先加载子组件upload，调用onchange会传递给父组件，此时YYEditTable还没构建才完成所以会出bug
        /*if(isFunction(this.props.onChange)){
            this.props.onChange(null);
        }*/
    },
    componentDidMount: function componentDidMount() {
        var billType = this.props.billType;
        var sourceId = this.props.sourceId; //loadValue
        this.setState({ sourceId: sourceId });
        var serverUrl = this.props.serverUrl;
        var sourceType = this.props.sourceType;
        var defaultValue = this.props.defaultValue;

        if (this._canLoad(billType, sourceId)) {
            if (this.state.isload === false) {
                //保证在fileids有值之后只接收一次参数
                this.setState({ isload: true });
                this._loadList(serverUrl, billType, sourceId, sourceType);
            }
        } else {
            if (defaultValue) {
                this.setState({ isload: true });
                this._loadDefaultList(serverUrl, defaultValue);
            }
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({ disabled: nextProps.disabled });
        var sourceId = nextProps.sourceId; //loadValue
        var billType = nextProps.billType;
        var sourceType = nextProps.sourceType;
        var serverUrl = nextProps.serverUrl;
        var defaultValue = nextProps.defaultValue;
        if (nextProps.userId) {
            this.setState({ userId: nextProps.userId, userName: nextProps.userName });
        }
        if (defaultValue) {
            if (this.props.defaultValue !== defaultValue) {
                this._loadDefaultList(serverUrl, defaultValue);
            }
        } else {
            if (sourceId != this.state.sourceId) {
                //sourceId变化时才加载附件列表
                this._loadList(serverUrl, billType, sourceId, sourceType);
            }
        }
        this.setState({ sourceId: sourceId });
    },
    changeValue: function changeValue() {
        //获取上传文件的fileid
        var sourceId = this.props.sourceId;
        //if(sourceId){
        // }else{
        var idArr = [];
        var items = [];
        this.state.fileList.map(function (item, i) {
            idArr.push(item.uid);
            items.push(item.backData);
        });
        var newIds = idArr.join(',');
        if (isFunction(this.props.onChange)) {
            this.props.onChange(newIds, items);
        }
        //}
    },
    staticUrl: function staticUrl() {
        if (this.props.fileUrl) {
            return this.props.fileUrl;
        }
        return this.props.serverUrl;
    },
    handleChange: function handleChange(info) {
        if (info.file.status == 'done') {
            var resultObj = info.file.response;
            if (resultObj) {
                //上传接口返回文件的uid
                if (resultObj.success) {
                    var staticUrl = this.staticUrl();
                    var fileid = resultObj.backData[0].gid;
                    var filePath = resultObj.backData[0].filePath;
                    var fileName = resultObj.backData[0].fileName;
                    info.file.uid = fileid;
                    info.file.url = handleUrl(staticUrl + "/" + filePath + "?filename=" + fileName);
                    info.file.backData = resultObj.backData[0];
                    var that = this;
                    this.setState({ fileList: info.fileList }, function () {
                        that.changeValue();
                    });
                }
            }
        } else {
            this.setState({ fileList: info.fileList });
        }
    },
    handleRemove: function handleRemove(file) {
        //删除前判断
        if (this.props.beforeDel) {
            if (!this.props.beforeDel(file)) {
                return false;
            }
        }
        var uid = file.uid;
        var fileList = this.state.fileList;
        //从fileList中删除
        this._removeItemFromListById(fileList, uid);
    },

    onPreview: function onPreview(file) {
        window.open(file.url);
    },
    render: function render() {
        var allowFileTypes = this.props.allowFileExts;
        var sourceType = this.props.sourceType;
        var sourceId = this.props.sourceId;
        var billType = this.props.billType;
        var serverUrl = this.props.serverUrl;
        var multiple = this.props.multiple;
        var fileList = this.state.fileList;
        var viewFileList = [];
        //支持鼠标悬浮提示信息（编辑表格超长文件名时需要）
        _.forEach(fileList, function (file) {
            viewFileList.push(_.assign({}, file, { name: React.createElement(
                    'span',
                    { title: file.name },
                    file.name
                ) }));
        });
        var attachProps = {
            data: { billType: billType, sourceId: sourceId, sourceType: sourceType, userId: this.state.userId, userName: this.state.userName },
            action: serverUrl + uploadUrl,
            onChange: this.handleChange,
            onRemove: this.handleRemove,
            onPreview: this.onPreview,
            showUploadList: true,
            fileList: viewFileList,
            multiple: multiple,
            beforeUpload: function beforeUpload(file) {
                if (file.size == 0) {
                    showErrMsg('上传失败', '请不要上传空文件');
                    return false;
                }
                var fileTypes = allowFileTypes;
                if (fileTypes) {
                    var allowFileExts = fileTypes.split(',');
                    var name = file.name;
                    var index = name.lastIndexOf('.');
                    if (index == -1) {
                        showErrMsg('上传失败', '请选择正确的文件格式');
                        return false;
                    }
                    var extend = name.substr(index + 1);
                    var idx = -1;
                    allowFileExts.map(function (item, i) {
                        if (item == extend) {
                            idx = i;
                            return;
                        }
                    });
                    if (idx > -1) {
                        return true;
                    }
                    showErrMsg('上传失败', '请上传正确的文件格式类型：' + fileTypes);
                    return false;
                }
            }
        };
        var buttonText = this.props.buttonText;
        if (!buttonText) {
            buttonText = '点击上传';
        }
        var disabled = this.state.disabled;
        var that = this;
        var view = null;
        var fileViews = [];
        if (disabled == undefined || disabled == false) {
            view = React.createElement(
                YYUpload,
                attachProps,
                allowFileTypes ? React.createElement(
                    YYTooltip,
                    { placement: 'top', title: '允许上传：' + allowFileTypes },
                    React.createElement(
                        YYButton,
                        { type: this.props.btnType, icon: 'upload', size: this.props.size },
                        buttonText
                    )
                ) : React.createElement(
                    YYButton,
                    { type: this.props.btnType, icon: 'upload' },
                    buttonText
                )
            );
        } else {
            //只读
            for (var idx = 0; idx < fileList.length; idx++) {
                var item = fileList[idx];
                var fileName = React.isValidElement(item.name) ? item.name : '' + item.name;
                fileViews.push(React.createElement(
                    'div',
                    { className: 'ant-upload-list-item ant-upload-list-item-done' },
                    React.createElement(
                        'div',
                        { className: 'ant-upload-list-item-info' },
                        React.createElement('i', { className: 'anticon anticon-paper-clip' }),
                        React.createElement(
                            'a',
                            { href: '' + item.url, target: '_blank', title: fileName, className: 'ant-upload-list-item-name' },
                            fileName
                        ),
                        React.createElement('i', { className: 'anticon' })
                    )
                ));
            }
            view = React.createElement(
                'div',
                { className: 'ant-upload-list ant-upload-list-text' },
                fileViews
            );
        }
        return React.createElement(
            'div',
            { className: 'yyui-attach-upload' },
            view
        );
    }
});

module.exports = AttachUpload;