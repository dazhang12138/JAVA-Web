'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by xiejunb on 2016/9/14.
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYInput = _require.YYInput,
    YYTooltip = _require.YYTooltip;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require2 = require('lodash'),
    isFunction = _require2.isFunction;

//定义META


var uiMeta = {
    name: 'inputfocus',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('disabled', false, PropTypes.bool, false, '禁用'), field('readOnly', false, PropTypes.bool, false, '只读'), field('tooltipPlacement', 'top', PropTypes.oneOf(['top', 'left', 'right', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']), false, '提示文字位置'), field('tooltipTitle', '点击输入框显示地图', PropTypes.oneOfType(['string', 'element']), false, '提示文字'), field('value', null, PropTypes.object, false, '默认初始值'), field('placeholder', null, PropTypes.string, false, '置空提示'), field('onClick', null, PropTypes.func, true, '输入框点击回调函数')]
};

var YYInputFocus = YYClass.create({
    uiMeta: uiMeta,
    _onClick: function _onClick() {
        if (!this.props.readOnly) {
            if (isFunction(this.props.onClick)) {
                this.props.onClick();
            }
        }
    },
    render: function render() {
        var input = React.createElement(YYInput, _extends({}, this.props, { onClick: this._onClick }));
        var inputtip = React.createElement(
            YYTooltip,
            _extends({}, this.props, { placement: this.props.tooltipPlacement, title: this.props.tooltipTitle }),
            React.createElement(YYInput, _extends({}, this.props, { onClick: this._onClick }))
        );
        var inputfocus = !this.props.readOnly && !this.props.disabled ? inputtip : input;
        return inputfocus;
    }
});
module.exports = YYInputFocus;