'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by xiejunb on 2016/9/14.
 */
var React = require('react');
var YYMap = require('./YYMap');
var YYInputFocus = require('./YYInputFocus');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

//定义META
var uiMeta = {
    name: 'mapinput',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('disabled', false, PropTypes.bool, false, '禁用'), field('readOnly', false, PropTypes.bool, false, '只读'), field('formatter', 'address', PropTypes.string, false, '默认显示的值'), field('width', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.number]), false, '宽度'), field('value', null, PropTypes.object, false, '默认初始值,数据格式为:{address:"",lng:"",lat:"",zoom:""}的json对象'), field('placeholder', null, PropTypes.string, false, '置空提示'), field('onChange', null, PropTypes.func, true, '确认操作回调函数')]
};

var YYMapInput = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var value = null;
        if (this.props.__meta != undefined && this.props.__meta.initialValue != undefined) {
            value = this.props.__meta.initialValue;
        } else if (this.props.value != undefined) {
            value = this.props.value;
        }
        return {
            value: value,
            show: false
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        this.setState({
            value: nextProps.value
        });
    },
    _onClick: function _onClick() {
        this._isShowMap(true);
    },
    onOk: function onOk(lng, lat, address, zoom) {
        this._isShowMap(false);
        var value = {
            lng: lng, lat: lat, address: address, zoom: zoom
        };
        if (this.props.onChange != undefined) {
            this.props.onChange(value);
        }
        this.setState({
            value: value
        });
    },
    onCancel: function onCancel() {
        this._isShowMap(false);
    },
    _isShowMap: function _isShowMap(bool) {
        this.setState({
            show: bool
        });
    },
    _formatShowValue: function _formatShowValue() {
        var formatter = this.props.formatter;
        if (formatter) {
            if (typeof formatter === 'function') {
                //当formatter是function 执行回调得出值
                return formatter(this.state.value);
            } else if (typeof formatter === 'string') {
                //当formatter为单值
                return this._getValBySingleShowField(this.state.value, formatter);
            } else {
                //当formatter是数组， 默认提供----待做
            }
        } else {
            //showFields(formatter)为空时，取 address
            return this._getValBySingleShowField(this.state.value, 'address');
        }
        return '';
    },
    _getValBySingleShowField: function _getValBySingleShowField(curVal, showFields) {
        var retVal = '';
        if (curVal != null) {
            if (curVal instanceof Array) {
                //当获取的值是 数组
                var back = [];
                for (var i = 0, l = curVal.length; i < l; i++) {
                    back.push(curVal[i][showFields]);
                }
                return back.join(",");
            } else {
                //当获取的是单值对象
                retVal = curVal[showFields];
            }
        }
        return retVal;
    },
    render: function render() {
        return React.createElement(
            'div',
            null,
            React.createElement(YYInputFocus, _extends({}, this.props, { onClick: this._onClick, value: this._formatShowValue() })),
            React.createElement(YYMap, { show: this.state.show, width: this.props.width,
                onOk: this.onOk, onCancel: this.onCancel, value: this.props.value })
        );
    }
});

module.exports = YYMapInput;