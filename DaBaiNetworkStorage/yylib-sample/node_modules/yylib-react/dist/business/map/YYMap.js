'use strict';

/**
 * Created by xiejunb on 2016/9/10.
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYModal = _require.YYModal,
    YYInput = _require.YYInput,
    YYInputButton = _require.YYInputButton,
    YYRow = _require.YYRow,
    YYCol = _require.YYCol;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');
var MapHandler = require('./MapHandler');
require('./style/index.css');

//定义META
var uiMeta = {
    name: 'map',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('show', false, PropTypes.bool, false, '是否显示地图框'), field('width', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.number]), false, '宽度'), field('height', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.number]), false, '高度'), field('value', null, PropTypes.object, false, '地图初始化数据,数据格式为:{address:"",lng:"",lat:"",zoom:""}的json对象'), field('onOk', null, PropTypes.func, true, '确认操作回调函数'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数')]
};

var YYMap = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            address: '', //地址
            lng: '', //经度
            lat: '', //纬度
            zoom: '', //缩放级别
            isInit: false, //是否初始化地图,由于modal显示之后才创建,所以需要在modal显示之后,再初始化地图,将地图渲染到dom上
            showPanel: false, //是否显示搜索结果到panel面板上
            showInfo: false, //是否显示提示信息
            hasSearchResult: false //是否有搜索结果
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.show) {
            this.setState({
                isInit: true,
                hasSearchResult: false
            });
        } else {
            this.setState({
                address: ''
            });
        }
        if (nextProps.value) {
            this.setState({
                address: nextProps.value.address,
                lng: nextProps.value.lng,
                lat: nextProps.value.lat,
                zoom: nextProps.value.zoom
            });
        }
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        var value = this.props.value;
        if (this.props.show && this.state.isInit) {
            var map = MapHandler.init("mapContainer");
            if (map) {
                //是否初始化定位
                var isInitLocation = !this.state.address;
                MapHandler.initPlugin(map, isInitLocation);
                MapHandler.onZoomChange(map, this.onZoomChange);
                MapHandler.onClick(map, this.onMapClick, this.onMouseMarkerDragEnd);
                MapHandler.onMapDragStart(map, this.onMapDragStart);
                if (value != null && _.isObject(value)) {
                    if (value.lng && value.lat) {
                        MapHandler.setPosition(map, value.lng, value.lat, value.zoom);
                        MapHandler.removeMarker();
                        MapHandler.addMarker(map, value.lng, value.lat, this.onMouseMarkerDragEnd);
                    }
                }
                MapHandler.autoInfo(map, "tipsearch", this.select);
                this.setState({
                    isInit: false
                });
            }
        }
    },
    onMapClick: function onMapClick(lng, lat, address) {
        this.setState({
            lng: lng,
            lat: lat,
            address: address,
            hasSearchResult: false
        });
    },
    onZoomChange: function onZoomChange(zoom) {
        this.setState({
            zoom: zoom
        });
    },
    onMapDragStart: function onMapDragStart(e) {
        this.setState({ showInfo: true, showPanel: false });
    },
    onMouseOver: function onMouseOver() {
        this.setState({ showInfo: false, showPanel: true });
    },
    onMouseMarkerDragEnd: function onMouseMarkerDragEnd(lng, lat, address) {
        this.setState({
            lng: lng,
            lat: lat,
            address: address
        });
    },
    onOk: function onOk() {
        if (_.isFunction(this.props.onOk)) {
            var lng = this.state.lng; //经度
            var lat = this.state.lat; //纬度
            var address = this.state.address; //地址
            var zoom = this.state.zoom; //缩放级别
            this.props.onOk(lng, lat, address, zoom);
        }
    },
    onCancel: function onCancel() {
        if (_.isFunction(this.props.onCancel)) {
            this.props.onCancel();
        }
    },
    select: function select(map, e) {
        if (e.poi && e.poi.location) {
            var lng = e.poi.location.lng;
            var lat = e.poi.location.lat;
            var zoom = this.state.zoom;
            var address = e.poi.district + e.poi.address;
            zoom = parseInt(zoom) - 15 < 0 ? 15 : zoom || 15;
            MapHandler.setPosition(map, lng, lat, zoom);
            if (MapHandler.marker) {
                MapHandler.moveMarker(lng, lat);
            } else {
                MapHandler.addMarker(map, lng, lat, this.onMouseMarkerDragEnd);
            }
            this.setState({
                lng: lng,
                lat: lat,
                address: address,
                zoom: zoom
            });
        }
    },
    onSearchEnter: function onSearchEnter(e) {
        var value = this.refs.search.state.value;
    },
    onSearchClick: function onSearchClick(e) {
        var value = this.refs.search.state.value;
        MapHandler.hideMarker();
        if (MapHandler.map) {
            MapHandler.onPlaceSearch(MapHandler.map, value, this.onSearchBack, this.onPlaceSelectChanged);
        }
    },
    onSearchBack: function onSearchBack(status, result) {
        if (status === 'complete' && result.info === 'OK') {
            MapHandler.removeMarker();
            this.setState({
                lng: '',
                lat: '',
                address: '',
                showPanel: true,
                hasSearchResult: true
            });
        } else {
            MapHandler.showMarker();
        }
    },
    onPlaceSelectChanged: function onPlaceSelectChanged(lng, lat, address) {
        MapHandler.removeMarker();
        this.setState({
            lng: lng,
            lat: lat,
            address: address
        });
    }
    //搜索文本清除
    , onSearchTextClear: function onSearchTextClear() {
        MapHandler.removeMarker();
        MapHandler.clearSearchPOI();
        this.setState({
            lng: '',
            lat: '',
            address: '',
            hasSearchResult: false
        });
    }
    //所选位置清除
    , onSelectLocationClear: function onSelectLocationClear() {
        MapHandler.removeMarker();
        MapHandler.clearSearchPOI();
        this.setState({
            lng: '',
            lat: '',
            address: '',
            hasSearchResult: false
        });
    },
    render: function render() {
        //获取窗口的高度、宽度。高度60%，宽度50%，margin 10%。
        var docWidth = document.documentElement.clientWidth;
        var docHeight = document.documentElement.clientHeight;
        var defaultHeight = docHeight * 0.7;
        var defaultWidth = docWidth * 0.8;
        var customizeWidth;
        var customizeHeight;
        if (this.props.width) customizeWidth = parseInt(this.props.width.toString());
        if (this.props.height) customizeHeight = parseInt(this.props.height.toString());
        var height = customizeHeight ? customizeHeight : defaultHeight;
        var width = customizeWidth ? customizeWidth : defaultWidth;
        var map = React.createElement('div', { id: 'mapContainer', style: { width: width, height: height } });
        var resultPanelStyle = this.state.showPanel ? "yyui-map-search-result-panel" : "yyui-map-search-result-hidden";
        var resultInfoStyle = this.state.hasSearchResult && this.state.showInfo ? "yyui-map-search-result-info" : "yyui-map-search-result-hidden";
        return React.createElement(
            'div',
            null,
            this.props.show ? React.createElement(
                YYModal,
                { visible: this.props.show,
                    onOk: this.onOk,
                    onCancel: this.onCancel,
                    width: width + 10,
                    style: { height: height, top: docHeight * 0.1 } },
                React.createElement(
                    YYRow,
                    null,
                    React.createElement(
                        YYCol,
                        { span: 15 },
                        React.createElement(YYInput, { id: 'tipshow',
                            addonBefore: '\u6240\u9009\u4F4D\u7F6E:',
                            onClearClick: this.onSelectLocationClear,
                            value: this.state.address,
                            readOnly: true })
                    )
                ),
                React.createElement(
                    YYRow,
                    null,
                    React.createElement(
                        YYCol,
                        { span: 15 },
                        React.createElement(YYInputButton, { id: 'tipsearch',
                            ref: 'search',
                            className: 'yyui-map-search-input',
                            onPressEnter: this.onSearchEnter,
                            buttonClick: this.onSearchClick,
                            onClearClick: this.onSearchTextClear }),
                        React.createElement(
                            'div',
                            { className: resultInfoStyle, onMouseOver: this.onMouseOver },
                            React.createElement(
                                'font',
                                { size: '2', color: 'blue' },
                                '\u5C55\u5F00\u641C\u7D22\u7ED3\u679C'
                            )
                        ),
                        React.createElement('div', { id: 'panel', className: resultPanelStyle })
                    )
                ),
                map
            ) : null
        );
    }
});

module.exports = YYMap;