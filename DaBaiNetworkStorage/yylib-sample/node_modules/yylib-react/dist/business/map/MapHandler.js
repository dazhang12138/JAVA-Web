'use strict';

/**
 * Created by xiejunb on 2016/9/12.
 */
// var AMap = require('AMap');
var AMap = window.AMap;

var MapHandler = {
    //------------------------------------初始化------------------------------------
    map: null, //地图实例
    toolbar: null, //工具条
    scale: null, //比例尺
    // geolocation: null,//定位
    geocoder: null, //地址插件
    // autocomplete:null,//输入提示插件
    citySearch: null, //城市查询，IP定位获取当前城市信息
    placeSearch: null, //关键字搜索插件
    city: '', //所在城市
    marker: null, //选取的点标记
    //初始化地图
    init: function init(renderDomId) {
        //renderDomId ---> 渲染到某个dom的节点id
        if (AMap) {
            //创建地图实例
            var map = new AMap.Map(renderDomId, {
                resizeEnable: true //是否监控地图容器尺寸变化，默认值为false
            });
            this.map = map;
            return map;
        } else {
            console.error('高德地图API未引入,请在index.html文件中引入--->', '<script src="//webapi.amap.com/maps?v=1.3&key=1b330c4912d753c2def2885357d3070a&plugin=AMap.Scale,AMap.OverView,AMap.ToolBar,AMap.PlaceSearch,AMap.Autocomplete,AMap.Geocoder,AMap.Geolocation,AMap.MouseTool,AMap.DistrictSearch,AMap.CitySearch"></script>');
            console.warn('如果应用页面未采用懒加载,则引入高德API的script需放在应用的script之前,因为高德地图API按顺序加载,建议：高德API放在应用Script之前引入');
            return null;
        }
    },
    //指定地图显示位置
    setPosition: function setPosition(map, lng, lat, zoom) {
        //map地图实例,lng经度,lat纬度,zoom缩放级别
        //创建中心点坐标
        map.setZoomAndCenter(zoom, [lng, lat]);
    },
    //添加图层
    //------------------------------------添加控件------------------------------------
    //添加控件
    addPlugin: function addPlugin(map, pluginObj) {
        //1.加载插件 or 全局html异步加载--->2.创建控件对象--->3.添加控件
        map.addControl(pluginObj);
    },
    //移除控件
    removePlugin: function removePlugin(map, pluginObj) {
        map.removeControl(pluginObj);
    },
    //引入工具条
    _initToolBar: function _initToolBar() {
        if (!this.toolbar) {
            this.toolbar = new AMap.ToolBar({
                position: 'RB',
                ruler: false,
                direction: false,
                locate: false
            });
        }
        return this.toolbar;
    },
    //引入比例尺
    _initScale: function _initScale() {
        if (!this.scale) {
            this.scale = new AMap.Scale();
        }
        return this.scale;
    },
    //引入定位
    _initGeolocation: function _initGeolocation() {
        var pixel = new AMap.Pixel(20, 60);
        var geolocation = new AMap.Geolocation({
            timeout: 10000, //超过10秒后停止定位，默认：无穷大
            buttonPosition: 'RB', //定位按钮停靠位置，默认：'LB'，左下角
            zoomToAccuracy: true, //定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false
            buttonOffset: pixel
        });
        return geolocation;
    },
    //初始化控件
    initPlugin: function initPlugin(map, isInitLocation) {
        this.addPlugin(map, this._initToolBar());
        this.addPlugin(map, this._initScale());
        var geolocation = this._initGeolocation();
        if (isInitLocation) {
            //定位当前所在位置
            geolocation.getCurrentPosition();
        }
        //给定位控件绑定事件
        this._bindListener(geolocation, 'complete', this.onComplete); //返回定位信息
        this._bindListener(geolocation, 'error', this.onError); //返回定位出错信息
        this.addPlugin(map, geolocation);
    },
    //解析定位结果
    onComplete: function onComplete(data) {},
    //解析定位错误信息
    onError: function onError(data) {},
    //------------------------------------事件绑定------------------------------------
    //事件绑定
    _bindListener: function _bindListener(map, name, func) {
        map.on(name, func); //绑定事件--通用方式
    },
    //解除绑定
    _unBindListener: function _unBindListener(map, name, func) {
        map.off(name, func); //移除事件--通用方式
    },
    //强制触发某事件
    _fireTrigger: function _fireTrigger(map, name) {
        map.emit(name);
    },
    //监听地图点击
    onClick: function onClick(map, func, onDragEnd) {
        var that = this;
        this._bindListener(map, 'click', function (e) {
            var lng = e.lnglat.getLng(); //经度
            var lat = e.lnglat.getLat(); //纬度
            that._getAddress(lng, lat, function (address) {
                //获取经纬度,以及地址
                if (that.marker) {
                    that.moveMarker(lng, lat);
                } else {
                    that.addMarker(map, lng, lat, onDragEnd);
                }
                func(lng, lat, address);
            });
            that.clearSearchPOI();
        });
    },
    //清除搜索结果(POI标记)
    clearSearchPOI: function clearSearchPOI() {
        if (this.placeSearch) {
            this.placeSearch.clear();
        }
    },
    //监听地图缩放
    onZoomChange: function onZoomChange(map, func) {
        this._bindListener(map, 'zoomend', function () {
            func(map.getZoom());
        });
    },
    //监听地图拖拽
    onMapDragStart: function onMapDragStart(map, func) {
        this._bindListener(map, 'dragstart', func);
    },
    //------------------------------------插件引入------------------------------------
    //引入地址插件
    _initGeocoder: function _initGeocoder() {
        if (!this.geocoder) {
            this.geocoder = new AMap.Geocoder();
        }
        return this.geocoder;
    },
    //给搜索框,引入输入提示插件
    _initAutocomplete: function _initAutocomplete(inputId) {
        var autocomplete = new AMap.Autocomplete({
            input: inputId
            // city: '武汉(市)',//输入提示时限定城市。可选值：城市名（中文或中文全拼）、citycode、adcode；默认值：“全国”
        });
        return autocomplete;
    },
    //获取用户所在城市信息
    _getCityInfo: function _getCityInfo(func) {
        if (!this.citySearch) {
            //实例化城市查询类
            this.citySearch = new AMap.CitySearch();
        }
        //自动获取用户IP，返回当前城市
        this.citySearch.getLocalCity(function (status, result) {
            func(status, result);
        });
    },
    //------------------------------------搜索提示服务------------------------------------
    autoInfo: function autoInfo(map, inputId, func) {
        var auto = this._initAutocomplete(inputId);
        var that = this;
        //获取当前所在城市，限定搜索服务范围
        this._getCityInfo(function (status, result) {
            if (status === 'complete' && result.info === 'OK') {
                if (result && result.city) {
                    auto.setCity(result.city);
                    that.city = result.city;
                }
            }
        });
        //注册监听，当选中某条记录时会触发
        this._bindListener(auto, "select", function (e) {
            func(map, e);
        });
    },
    //------------------------------------关键字搜索------------------------------------
    onPlaceSearch: function onPlaceSearch(map, searchText, func, onPlaceSelectChanged) {
        this._initPlaceSearch(map, this.city);
        this._placeSearch(searchText, func);
        this._onPlaceSelectChanged(onPlaceSelectChanged);
    },
    _initPlaceSearch: function _initPlaceSearch(map, city) {
        this.placeSearch = new AMap.PlaceSearch({ //构造地点查询类
            city: city, //城市
            map: map,
            panel: "panel",
            pageSize: 4
        });
    },
    _placeSearch: function _placeSearch(searchText, func) {
        if (this.placeSearch) {
            //关键字查询
            this.placeSearch.search(searchText, func);
        } else {
            var status = 'error';
            var result = { info: '关键字搜索插件未初始化' };
            func(status, result);
        }
    },
    _onPlaceSelectChanged: function _onPlaceSelectChanged(func) {
        if (this.placeSearch) {
            this._bindListener(this.placeSearch, 'selectChanged', this._onPlaceChangedBack.bind(null, this, func));
        }
    },
    _onPlaceChangedBack: function _onPlaceChangedBack(that, func, e) {
        // console.log('POI---changed--->>>',e);
        var location = e.selected.data.location;
        var lng = location.lng;
        var lat = location.lat;
        that._getAddress(lng, lat, function (address) {
            func(lng, lat, address);
        });
    },
    //------------------------------------添加标记服务------------------------------------
    //添加鼠标点击时的---点标记
    addMarker: function addMarker(map, lng, lat, func) {
        if (!this.marker) {
            // 实例化点标记
            this.marker = new AMap.Marker({
                // icon: "http://webapi.amap.com/theme/v1.3/markers/n/mark_b.png",//蓝色点标记
                icon: "http://webapi.amap.com/theme/v1.3/markers/n/mark_r.png", //红色点标记
                position: [lng, lat],
                draggable: true, //设置点标记是否可拖拽移动，默认为false
                cursor: 'move', //指定鼠标悬停时的鼠标样式
                raiseOnDrag: true //设置拖拽点标记时是否开启点标记离开地图的效果
            });
        }
        this.marker.setMap(map);
        this.onMarkerDragEnd(this.marker, func);
    },
    //监听点标记拖拽结束
    onMarkerDragEnd: function onMarkerDragEnd(marker, func) {
        //鼠标点标记设置拖拽事件监听
        this._bindListener(marker, 'dragend', this._onDragEnd.bind(null, this, func));
    },
    _onDragEnd: function _onDragEnd(that, func, e) {
        // console.log('拖拽结束',e.lnglat);
        var lng = e.lnglat.lng;
        var lat = e.lnglat.lat;
        that._getAddress(lng, lat, function (address) {
            func(lng, lat, address);
        });
    },
    //清空点标记
    removeMarker: function removeMarker() {
        if (this.marker) {
            this.marker.setMap(null);
            this.marker = null;
        }
    },
    //隐藏点标记
    hideMarker: function hideMarker() {
        if (this.marker) {
            this.marker.hide();
        }
    },
    //显示点标记
    showMarker: function showMarker() {
        if (this.marker) {
            // this.marker.setMap(map);
            this.marker.show();
        }
    },
    moveMarker: function moveMarker(lng, lat) {
        if (this.marker) {
            var lnglat = new AMap.LngLat(lng, lat);
            this.marker.setPosition(lnglat);
        }
    },
    //------------------------------------地址插件服务------------------------------------
    //根据经纬度,获得地址
    _getAddress: function _getAddress(lng, lat, func) {
        var geocoder = this._initGeocoder();
        //逆地理编码
        var lnglatXY = [lng, lat]; //地图上所标点的坐标
        geocoder.getAddress(lnglatXY, function (status, result) {
            if (status === 'complete' && result.info === 'OK') {
                //获得了有效的地址信息: 即，result.regeocode.formattedAddress
                var address = result.regeocode.formattedAddress;
                func(address);
            } else {
                //获取地址失败
            }
        });
    },
    //根据地址,查询经纬度
    _getLocation: function _getLocation(address, func) {
        var geocoder = this._initGeocoder();
        //地理编码
        geocoder.getLocation(address, function (status, result) {
            if (status === 'complete' && result.info === 'OK') {
                //TODO:获得了有效经纬度，可以做一些展示工作
                //比如在获得的经纬度上打上一个Marker
                var lng = result.geocodes[0].location.lng;
                var lat = result.geocodes[0].location.lat;
                func(lng, lat);
            } else {
                //获取经纬度失败
            }
        });
    }
};

module.exports = MapHandler;