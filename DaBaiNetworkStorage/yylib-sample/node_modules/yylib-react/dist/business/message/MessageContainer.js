'use strict';

var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYPage = _require.YYPage,
    YYTabs = _require.YYTabs,
    YYTab = _require.YYTab,
    YYBadge = _require.YYBadge,
    YYCol = _require.YYCol,
    YYRow = _require.YYRow,
    YYMessage = _require.YYMessage;

var _ = require('lodash');
var ajax = require('yylib-utils/ajax');

require('./index.less');

//后端返回数据格式
var msgData = {
    "msg": "消息查询成功",
    "data": {
        "message": [{
            "id": "9f9aa420-c3a1-438b-9f9a-ec68c47ab141",
            "subject": "测试消息压力11",
            "content": "测试消息压力111",
            "msgtype": "task",
            "status": null,
            "sender": "duangongda",
            "sendtime": "2016-09-19 13:47:57",
            "billid": null,
            "busitype": null,
            "tenantid": null,
            "sysid": null,
            "tag": null,
            "exstatus01": null,
            "exstatus02": null,
            "exstatus03": null,
            "exdetail01": "http://www.baidu.com",
            "exdetail02": null,
            "exdetail03": null
        }],
        "msgtype": [{
            "typecode": "notice",
            "num": 0,
            "typename": "通知"
        }, {
            "typecode": "earlywarning",
            "num": 0,
            "typename": "预警"
        }, {
            "typecode": "task",
            "num": 6,
            "typename": "任务"
        }]
    },
    "status": 1

    //请求数据
};var req = {
    "msgtype": "notice",
    "pagenum": "1",
    "pagesize": 4,
    "receiver": "1fd1381a-34b7-48d7-8431-cd7d37f2986a",
    "status": "0",
    "starttime": "",
    "endtime": "",
    "search": ""
};

var MessageContainer = YYClass.create({
    getInitialState: function getInitialState() {
        return {
            msgData: [],
            activeKey: ''
        };
    },
    componentDidMount: function componentDidMount() {
        var msgConfig = this.props.msgConfig;
        if (msgConfig && msgConfig.length) {
            var initial = msgConfig[0];
            this._updateMsgData(initial.dataUrl, initial.msgtype);
        }
    },
    //请求消息输入
    _updateMsgData: function _updateMsgData(url, msgtype) {
        var _this = this;
        var req = {
            msgtype: msgtype,
            pagenum: 1,
            pagesize: 6,
            status: 0,
            starttime: '',
            endtime: '',
            search: '',
            receiver: '1fd1381a-34b7-48d7-8431-cd7d37f2986a'
            //测试
        };this.setState({ msgData: msgData.data, activeKey: msgtype });

        ajax.postJSON(url, req, function (result) {
            if (result.status === 1) {
                _this.setState({
                    activeKey: msgtype,
                    msgData: result.data
                });
            } else {
                YYMessage.error(result.msg);
            }
        });
    },
    //切换标签页
    onTabChange: function onTabChange(activeKey) {
        var _this = this;
        var msgConfig = this.props.msgConfig;
        _.forEach(msgConfig, function (item) {
            if (item.msgtype === activeKey) {
                _this._updateMsgData(item.dataUrl, activeKey);
            }
        });
    },
    //获取当前激活下的更多
    getCurrMore: function getCurrMore(config, activeKey) {
        var current = _.filter(config, function (item) {
            return item.msgtype === activeKey;
        });
        if (current && current.length) {
            return React.createElement(
                'a',
                { href: current[0].moreUrl },
                '\u66F4\u591A'
            );
        }
        return null;
    },
    //生成消息标签页
    renderTabs: function renderTabs(props) {
        var content = _.map(props.message, function (con, index) {
            return React.createElement(
                YYRow,
                { key: index, className: 'msg_row' },
                React.createElement(
                    YYCol,
                    { span: 6, offset: 1 },
                    React.createElement(
                        'a',
                        { className: 'msg_title', href: con.exdetail01 },
                        con.subject
                    )
                ),
                React.createElement(
                    YYCol,
                    { span: 10 },
                    React.createElement(
                        'p',
                        { className: 'msg_body', title: con.content },
                        con.content.slice(0, 20)
                    )
                ),
                React.createElement(
                    YYCol,
                    { span: 7 },
                    React.createElement(
                        'span',
                        null,
                        con.sendtime
                    ),
                    React.createElement(
                        'span',
                        { className: 'divide' },
                        '|'
                    ),
                    React.createElement(
                        'span',
                        null,
                        con.sender
                    )
                )
            );
        });
        return _.map(props.msgtype, function (item) {
            return React.createElement(
                YYTab,
                {
                    key: item.typecode,
                    tab: React.createElement(
                        YYBadge,
                        { count: item.num },
                        item.typename
                    ) },
                content
            );
        });
    },
    render: function render() {
        var msgConfig = this.props.msgConfig;
        var _state = this.state,
            msgData = _state.msgData,
            activeKey = _state.activeKey;

        return React.createElement(
            'div',
            null,
            React.createElement(
                YYTabs,
                {
                    className: 'message',
                    tabBarExtraContent: this.getCurrMore(msgConfig, activeKey),
                    onChange: this.onTabChange },
                this.renderTabs(msgData)
            )
        );
    }
});

module.exports = MessageContainer;