"use strict";

/**
 * 默认toFixed方法为四舍六入五成双算法
 * 例如：
 * 0.015.toFixed(2)=>"0.01"
 * 0.105.toFixed(2)=>"0.10"
 * 0.5255.toFixed(3)=>"0.525"
 * 重写toFixed方法调整为四舍五入算法
 */

Number.prototype.toFixed = function (d) {
    var s = this + "";
    if (!d) d = 0;
    if (typeof d == 'string') {
        d = Number(d);
    };
    if (s.indexOf(".") == -1) {
        s += ".";
    };
    s += new Array(d + 1).join("0");
    if (new RegExp("^(-|\\+)?(\\d+(\\.\\d{0," + (d + 1) + "})?)\\d*$").test(s)) {
        var _s = "0" + RegExp.$2,
            pm = RegExp.$1,
            a = RegExp.$3.length,
            b = true;
        if (a == d + 2) {
            a = _s.match(/\d/g);
            if (parseInt(a[a.length - 1]) > 4) {
                for (var i = a.length - 2; i >= 0; i--) {
                    a[i] = parseInt(a[i]) + 1;
                    if (a[i] == 10) {
                        a[i] = 0;
                        b = i != 1;
                    } else break;
                }
            }
            _s = a.join("").replace(new RegExp("(\\d+)(\\d{" + d + "})\\d$"), "$1.$2");
        }
        if (b) {
            _s = _s.substr(1);
        };
        return (pm + _s).replace(/\.$/, "");
    }
    return this + "";
};

/*
 * 功能：字符串之间的数字运算
 * @param c,d 字符串数值
 * @param n 运算类型： 0为加 1为减 2为乘 3为除
 */
function executeStr(c, d, n) {
    // 去掉空相
    var re = /\s/g;
    var a = c.replace(re, "");
    var b = d.replace(re, "");

    var cutN = "10000000000000";
    var cutZero = "00000000000";

    var dot = ".";

    // 将小数输入为整数
    var adot = a.indexOf(dot) > 0 ? a.length - a.indexOf(dot) : 0;
    var bdot = b.indexOf(dot) > 0 ? b.length - b.indexOf(dot) : 0;

    var cutA = adot > 0 ? parseInt(cutN.substr(0, adot)) : 1;
    var cutB = bdot > 0 ? parseInt(cutN.substr(0, bdot)) : 1;

    var maxcutAB = Math.max(cutA, cutB);
    var mincutAB = Math.min(cutA, cutB);

    var cutAB = maxcutAB / mincutAB;
    var numA = 0;
    var numB = 0;

    var inzero = cutZero.substr(0, cutAB.toString().length - 1);
    var cutLen = maxcutAB.toString().length - 1;

    if (adot == bdot) {
        numA = parseInt(a.replace(dot, ""), 10);
        numB = parseInt(b.replace(dot, ""), 10);
    } else if (adot > bdot) {
        numA = parseInt(a.replace(dot, ""), 10);
        numB = parseInt(b.replace(dot, "") + inzero, 10);
    } else {
        numB = parseInt(b.replace(dot, ""), 10);
        numA = parseInt(a.replace(dot, "") + inzero, 10);
    }

    var numAB = "0.0";
    var lastN = "0.0";

    switch (n) {
        case 0:
            // 加
            numAB = ((numA + numB) / maxcutAB).toString();
            break;
        case 1:
            // 减
            numAB = ((numA - numB) / maxcutAB).toString();
            break;
        case 2:
            // 乘
            numAB = Math.abs(numA * numB).toString();
            cutLen = cutLen * 2;
            break;
        case 3:
            // 除
            numAB = (numA / numB).toString();
            break;
    }
    // 对乘法的特别处理
    if (n == 2) {
        if (numAB.length <= cutLen) {
            numAB = cutZero.substr(0, cutLen - numAB.length + 1) + numAB;
        }
        if (Math.abs(numA * numB) != numA * numB) {
            numAB = "-" + numAB;
        }
        numAB = numAB.slice(0, numAB.length - cutLen) + "." + numAB.slice(numAB.length - cutLen);
    }
    return parseFloat(numAB).toString();
}

/**
 * 四则运算
 *
 * @param x
 * @param y
 * @param op 操作符，0：加；1：减；2：乘；3：除
 * @param acc 保留小数位个数，进行四舍五入
 */
function execute(x, y, op, acc) {
    var xx = Number(x == undefined ? 0 : x);
    var yy = Number(y == undefined ? 0 : y);

    var a = science(xx);
    var b = science(yy);

    var na = a.num;
    var nb = b.num;
    var ta = a.times;
    var tb = b.times;
    var maxt = ta > tb ? ta : tb;

    var result = 0;
    switch (parseInt(op, 10)) {
        case 0:
            // 加
            if (ta == tb) {
                result = na + nb;
            } else if (ta > tb) {
                result = na + nb * (ta / tb);
            } else {
                result = na * (tb / ta) + nb;
            }
            result = result / maxt;
            break;
        case 1:
            // 减
            if (ta === tb) {
                result = na - nb;
            } else if (ta > tb) {
                result = na - nb * (ta / tb);
            } else {
                result = na * (tb / ta) - nb;
            }
            result = result / maxt;
            break;
        case 2:
            // 乘
            result = na * nb / (ta * tb);
            break;
        case 3:
            // 除
            result = na / nb * (tb / ta);
        default:
    }

    if (acc != undefined && acc != null) {
        return Number(Number(result).toFixed(parseInt(acc)));
    } else {
        return Number(result);
    }
}

/**
 * 科学计数法
 *
 * @param num
 * @returns
 */
function science(num) {
    var re = {
        num: 0,
        times: 1
    };
    if (isInteger(num)) {
        re.num = num;
        return re;
    }
    var snum = scienceNum(num + ""); //处理0.123e-10类似问题
    var dotPos = snum.indexOf(".");
    var len = snum.substr(dotPos + 1).length;
    var times = Math.pow(10, len);
    var intNum = parseInt(snum.replace(".", ""));
    re.times = times;
    re.num = intNum;
    return re;
}

/**
 * 通过移动小数点  扩大倍数或缩小倍数(解决出现e+、e-的问题)
 * 
 * @param value 数字字符串
 */
function scienceNum(value) {
    var num = 0;
    if ((num = value.indexOf('E')) != -1 || (num = value.indexOf('e')) != -1) {
        var doubleStr = value.substring(0, num);
        var eStr = value.substring(num + 1, value.length);
        eStr = parseInt(eStr);
        var doubleStrList = doubleStr.split('.');
        var doubleStr1 = doubleStrList[0];
        var doubleStr2 = doubleStrList[1];

        if (eStr < 0) {
            //e- 很小的数
            var str1Len = doubleStr1.length;
            var eStrs = Math.abs(eStr);
            if (str1Len > eStrs) {
                var nums = doubleStr1.substring(0, eStrs);
                var nume = doubleStr1.substring(eStrs, str1Len);
                doubleStr = nums + "." + nume + nume;
            } else if (str1Len < eStrs) {
                var indexNum = eStrs - str1Len;
                var str = _makeZero(indexNum); //用0补齐
                doubleStr = '0.' + str + doubleStr1 + doubleStr2;
            } else {
                doubleStr = '0.' + doubleStr1 + doubleStr2;
            }
        } else {
            //e+ 很大的数
            var str2Len = doubleStr2.length;
            if (str2Len > eStr) {
                var _nums = doubleStr2.substring(0, eStr);
                var _nume = doubleStr2.substring(eStr, str2Len);
                doubleStr = doubleStr1 + _nums + '.' + _nume;
            } else if (doubleStr2.length < eStr) {
                var _indexNum = eStr - str2Len;
                var _str = _makeZero(_indexNum); //用0补齐
                doubleStr = doubleStr1 + doubleStr2 + _str;
            } else {
                doubleStr = doubleStr1 + doubleStr2;
            }
        }
        value = doubleStr;
    }
    return value;
}

//生成num个0的字符串
function _makeZero(num) {
    var str = '';
    for (var i = 0; i < num; i++) {
        str += '0';
    }
    return str;
}

/**
 * 判断是否为整数，字符整数也返回true
 *
 * @param num
 * @returns
 */
function isInteger(num) {
    return Math.floor(num) === Number(num);
}

//加法运算
function add(x, y, acc) {
    return execute(x, y, 0, acc);
}

//减法运算
function subtract(x, y, acc) {
    return execute(x, y, 1, acc);
}

//乘法运算
function multiply(x, y, acc) {
    return execute(x, y, 2, acc);
}

//除法运算
function divide(x, y, acc) {
    return execute(x, y, 3, acc);
}

module.exports = {
    execute: execute,
    executeStr: executeStr,
    isInteger: isInteger,
    add: add,
    subtract: subtract,
    multiply: multiply,
    divide: divide
};