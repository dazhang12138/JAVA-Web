"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @author Dio
 * @version v1.0.0
 * @desc 
 * @name jQuery.taglib.logger
 * @constructor
 */
var _ = require('lodash');
var Logger = {

	//缓存已注册的日志实例
	Regs: {},

	logger: function logger() {
		return this.create("taglib.ui.logger");
	},
	info: function info() {
		console.log(this.logger());
		this.logger().info(arguments);
	},
	debug: function debug() {
		this.logger().debug(arguments);
	},
	warn: function warn() {
		this.logger().warn(arguments);
	},
	error: function error() {
		console.log(arguments);
	},
	print: function print() {
		this.logger().print(arguments);
	}
	//日志级别的启用状态
	, level: {
		"info": true,
		"debug": true,
		"warn": true,
		"error": true,
		"print": true,
		"log": true
		//默认的日志级别
	}, defaultLogType: "info,error,debug,warn,log"
	//日志输出的打印方式
	, PRINT_TYPE: {
		CONSOLE: "consoleLog.console"
		//目前打印方式
	}, printType: 'CONSOLE'
	//设置缺省的日志打印级别
	, setDefaultLogType: function setDefaultLogType(logType) {
		if (_.isEmpty(logType) || logType == "") {
			this.defaultLogType = logType;
		}
	},
	setPrintType: function setPrintType(printType) {
		if (typeof printType == "string") {
			this.printType = printType;
		}
	},
	printInterval: null,
	printArray: []
	/*
  * @desc 浏览器控制台打印类
  * @static
  */
	, consoleLog: {
		browser: false,
		checkBrowser: function checkBrowser() {
			var browser = navigator.appName;
			var b_version = navigator.appVersion;
			var version = b_version.split(";");
			var trim_Version = "";
			if (version[1]) {
				trim_Version = version[1].replace(/[ ]/g, "");
			}
			this.browser = { 'type': browser, 'version': trim_Version };
		},
		isCheckedConsoleType: false,
		checkConsoleType: function checkConsoleType() {
			if (console.error == undefined) {
				console.error = console.log;
			}
			if (console.warn == undefined) {
				console.warn = console.log;
			}
			if (console.debug == undefined) {
				console.debug = console.log;
			}
			if (console.info == undefined) {
				console.info = console.log;
			}
			if (console.assert == undefined) {
				console.assert = console.log;
			}
		}
		//控制台打印方式
		, console: function (_console) {
			function console(_x, _x2, _x3) {
				return _console.apply(this, arguments);
			}

			console.toString = function () {
				return _console.toString();
			};

			return console;
		}(function (uiType, groupInfo, group) {
			if (window.console) {
				if (!Logger.consoleLog.isCheckedConsoleType) {
					Logger.consoleLog.checkConsoleType();
				}
				if (!Logger.consoleLog.browser) {
					Logger.consoleLog.checkBrowser();
				}
				if (groupInfo) {
					Logger.info("[" + Logger.getDateIndex() + "]", "[" + uiType + "]", groupInfo["groupId"], groupInfo["description"]);
				}
				if (group.length > 1 && console.groupCollapsed) {
					console.groupCollapsed();
				}
				if (group) {
					if (group.length > 1) {
						for (var i = 0; i < group.length; i++) {
							var index = i + 1;
							Logger.consoleLog.consoleItem(index, group[i]);
						}
					} else if (group.length > 0) {
						Logger.consoleLog.consoleItem("[" + Logger.getDateIndex() + "]" + " [" + uiType + "]", group[0]);
					}
				}
				if (group.length > 1 && console.groupEnd) {
					console.groupEnd();
				}
			}
		})
		//打印分组中的一个对象
		, consoleItem: function consoleItem(index, item) {
			var _browser = Logger.consoleLog.browser;
			//IE5 IE6 IE7 IE8下面进行转换，执行文本
			if (_browser['type'] == 'Microsoft Internet Explorer' && (_browser['version'] == 'MSIE8.0' || _browser['version'] == 'MSIE7.0' || _browser['version'] == 'MSIE6.0' || _browser['version'] == 'MSIE5.0')) {
				var _log = item['log'];
				if (typeof item['log'] == "number" || typeof item['log'] == "string" || _typeof(item['log']) == "object" && item['log'].length == undefined) {
					//item['log']=item["logType"]+":"+_log;
				} else {
					var _log_ = "[";
					if ((typeof _log === "undefined" ? "undefined" : _typeof(_log)) == 'object' && _log.length) {

						for (var i = 0; i < _log.length; i++) {
							_log_ += _log[i] + ",";
						}
					}
					if (_log_.indexOf(",") != -1) {
						_log_ = _log_.substring(0, _log_.length - 1);
					}
					_log_ += "]";
					item['log'] = _log_;
				}
				Logger.printArray.push(item['log']);
				Logger.printArray.push("\n");
				if (null == Logger.printInterval) {
					Logger.consoleLog.printInterval = window.setInterval(function () {
						var _array = Logger.printArray;
						var _len = _array.length;
						if (_len > 0) {
							console.log(_array.toString().replace(/,/g, "")); //IE下正常日志打印，请勿删除
							Logger.printArray = [];
						}
					}, 1000);
				}
				return false;
			} else {
				if (null != Logger.consoleLog.printInterval) {
					window.clearInterval(Logger.consoleLog.printInterval);
				}
			}
			var _headerStr = "";
			if (typeof index == 'number') {
				_headerStr = "#";
			}
			if (item['logType'] == 'error') {
				console.error(_headerStr + index, item['logType'], item['log']);
			} else if (item['logType'] == 'warn') {
				console.warn(_headerStr + index, item['logType'], item['log']);
			} else if (item['logType'] == 'debug') {
				console.debug(_headerStr + index, item['logType'], item['log']);
			} else if (item['logType'] == 'info') {
				console.info(_headerStr + index, item['logType'], item['log']);
			} else if (item['logType'] === 'assert') {
				console.asset(_headerStr + index, item['logType'], item['log']);
			} else {
				console.log(_headerStr + index, item['logType'], item['log']);
			}
		}
	},
	getDateIndex: function getDateIndex() {
		var date = new Date();
		return date.getHours() + ":" + date.getMinutes() + ":" + date.getSeconds() + "." + date.getMilliseconds();
	}
	//添加日志级别
	, addLevel: function addLevel(lv) {
		if (typeof lv != 'undefined' && lv.length > 0) {
			var levels = lv.split(",");
			for (var i = 0; i < levels.length; i++) {
				this.level[levels[i]] = true;
				for (var x in this.Regs) {
					this.Regs[x][levels[i]] = function () {
						//未开放日志级别，什么都不显示
					};
				}
			}
		}
	}
	//删除日志级别
	, removeLevel: function removeLevel(lv) {
		if (typeof lv != 'undefined' && lv.length > 0) {
			var levels = lv.split(",");
			for (var i = 0; i < levels.length; i++) {
				delete this.level[levels[i]];
				for (var x in this.Regs) {
					delete this.Regs[x][levels[i]];
				}
			}
		}
	}

	//设置组件日志级别的静态方法
	, setLevel: function setLevel(uiType, level) {
		if (this.Regs[uiType]) {
			this.Regs[uiType].resister(level);
		}
	}

	//返回日志对象的静态方法
	, create: function create(uiType, logType) {
		if (typeof this.Regs[uiType] == 'undefined') {
			var _reg = new this.Reg(uiType, logType);
			if (_reg) {
				this.Regs[uiType] = _reg;
			}
		} else {
			return this.Regs[uiType];
		}
		return _reg;
	}

	//日志类
	, Reg: function Reg(uiType, logType) {
		this.options = {
			uiType: null,
			logType: Logger.defaultLogType
		};

		this.LoggerPool = {
			/*
    groupId:{
   		 {info:'',obj:''}
    ,{info:'',obj:''}
    ,{info:'',obj:''}
    ,{info:'',obj:''}
    ]
   
    */
		};

		this.LoggerPoolList = []; //[groupId1,groupId2,groupId3。。。]
		//注册日志级别
		this.resister = function (logType) {
			var _this = this;
			this.unresister(Logger.defaultLogType);
			this.options.logType = logType;
			if (!_.isEmpty(logType)) {
				var logTypes = logType.split(",");
				for (var i = 0; i < logTypes.length; i++) {
					var lt = logTypes[i];
					if (Logger.level[lt]) {
						this[lt] = function (lt) {
							var fun = function fun() {
								if (Logger.defaultLogType.match(lt)) {
									_this.printLog(lt, arguments);
								}
							};
							return fun;
						}(lt);
					}
				}
			}
		};
		//卸载日志级别
		this.unresister = function (logType) {
			if (typeof logType != 'undefined' && logType.length > 0) {
				var logTypes = logType.split(",");
				for (var i = 0; i < logTypes.length; i++) {
					this[logTypes[i]] = function () {
						// alert("无！仅做测试");
					};
				}
			}
		};
		//打印日志
		this.printLog = function (logType, obj) {
			//只有一条消息时，不以数组的形式呈现
			if (obj && obj.length == 1) {
				obj = obj[0];
			}
			var poolList = this.LoggerPoolList;
			if (poolList.length > 0) {
				var index = poolList.length - 1;
				if (index < 0) {
					return false;
				}

				var pool = this.LoggerPool[poolList[index]["groupId"]] ? this.LoggerPool[poolList[index]["groupId"]] : [];
				/*if(typeof(pool[logType])=='undefined'){
     pool[logType]=[];
     }*/
				//只有一个参数，就不以数组形式传递
				pool.push({ "logType": logType, "log": obj });
				this.LoggerPool[poolList[index]["groupId"]] = pool;
			} else {
				try {
					var $logger = Logger;
					var className = $logger.PRINT_TYPE[$logger.printType].split(".");
					var _LOG = Logger[className[0]];
					var func = _LOG[className[1]];
					if (func) {
						func.call(this, uiType, null, [{ "logType": logType, "log": obj }]);
					}
				} catch (e) {
					throw new Error("打印日志未知异常:" + e);
				}
			}
		};

		//开始一个日志组
		this.begin = function (groupId) {
			var isbegin = true;
			if (groupId) {
				//添加了是否重复begin的判断
				for (var i = 0; i < this.LoggerPoolList.length; i++) {
					if (groupId == this.LoggerPoolList[i]["groupId"]) {
						isbegin = false;
						break;
					}
				}
				if (isbegin) {
					var description = [];
					if (arguments.length > 1) {
						for (var i = 1; i < arguments.length; i++) {
							description.push(arguments[i]);
						}
					}
					this.LoggerPool[groupId] = [];
					this.LoggerPoolList.push({ "groupId": groupId, "description": description });
				}
			}
		};

		//结束一个日志组
		this.end = function (groupId) {
			if (groupId) {
				var groupInfo = null;
				for (var i = 0; i < this.LoggerPoolList.length; i++) {
					if (groupId == this.LoggerPoolList[i]["groupId"]) {
						groupInfo = this.LoggerPoolList[i];
						this.LoggerPoolList.splice(i, 1);
						break;
					}
				}
				var group = this.LoggerPool[groupId];
				if (group == undefined) {
					return false;
				}
				try {
					var $logger = Logger;
					var className = $logger.PRINT_TYPE[$logger.printType].split(".");
					var _LOG = Logger[className[0]];
					var func = _LOG[className[1]];
					if (func) {
						func.call(this, uiType, groupInfo, group);
					}
				} catch (e) {
					throw new Error("打印日志未知异常:" + e);
				}
				delete this.LoggerPool[groupId];
			}
		};

		//初始化方法
		this.init = function (uiType, logType) {
			if (typeof uiType != 'undefined') {
				this.options.uiType = uiType;
				var levels = Logger.level;
				for (var x in levels) {
					if (levels[x]) {
						this[x] = function () {
							//默认添加所有级别，什么都不显示
						};
					}
				}
				if (typeof logType != 'undefined') {
					this.resister(logType);
				} else {
					this.resister(this.options.logType);
				}
				return this;
			} else {
				return false;
			}
		};
		return this.init(uiType, logType);
	}
};

module.exports = Logger;