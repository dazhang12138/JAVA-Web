'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 标签页组件
 */
var React = require('react');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var ReactUtils = require('../../utils/ReactUtils');

var _require2 = require('antd'),
    Tabs = _require2.Tabs;

var YYIcon = require('../icon/YYIcon');
var YYMenu = require('../menu/YYMenu');
var YYMenuItem = require('../menu/YYMenuItem');
var YYPopMenu = require('../popmenu/YYPopMenu');
var _ = require('lodash');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'tabs',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('popmenu', false, PropTypes.bool, false, '是否开启右击菜单, 当YYTab为closeable={true}时有效'), field('closeCurTab', null, PropTypes.func, false, '关闭当前标签页的回调'), field('closeAllTab', null, PropTypes.func, false, '关闭所有标签页的回调'), field('closeOthTab', null, PropTypes.func, false, '关闭其他标签页的回调'), field('activeKey', undefined, PropTypes.string, false, '当前激活tab面板的key'), field('defaultActiveKey', '', PropTypes.string, false, '初始化选中面板的 key，如果没有设置 activeKey  默认为第一个面板'), field('onChange', null, PropTypes.func, false, '切换面板的回调'), field('onTabClick', null, PropTypes.func, false, 'tab 被点击的回调 '), field('tabBarExtraContent', null, PropTypes.node, false, 'tab bar 上额外的元素'), field('type', 'line', PropTypes.oneOf(['line', 'card', 'editable-card', 'page']), false, '页签的基本样式，可选'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '大小，提供 default 和 small 两种大小  默认为 default'), field('tabPosition', 'top', PropTypes.oneOf(['top', 'right', 'bottom', 'left']), false, '页签位置，可选值有'), field('onEdit', null, PropTypes.func, false, '新增和删除页签的回调，在 type="editable-card" 时有效'), field('hideAdd', false, PropTypes.bool, false, '是否隐藏加号图标,是否隐藏加号图标，在 type="editable-card" 时有效'), field('editable', false, PropTypes.bool, false, '是否可以编辑, type="page" 和 type="editable-card" 时有效'), field('animation', 'slide-horizontal', PropTypes.bool, false, '是否启用动画切换Tabs，在tabPosition=top|bottom 时有效，当type="card"默认禁用效')]
};

var YYTabs = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        //存在activeKey则优先使用activeKey，否则使用defaultActiveKey
        var keys = this.props.activeKey ? this.props.activeKey : this.props.defaultActiveKey;
        return { activeKey: keys, disableCloseOth: false };
    },
    _onChange: function _onChange(keys) {
        var that = this;
        //控制antd组件的activeKey
        this.setState({ activeKey: keys }, function () {
            if (_.isFunction(that.props.onChange)) {
                that.props.onChange(keys);
            }
        });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultActiveKey' in nextProps) {
            if (this.props.defaultActiveKey != nextProps.defaultActiveKey) {
                this.setState({ activeKey: nextProps.defaultActiveKey });
            }
        }
        //activeKey优先级高于defaultActiveKey
        if ('activeKey' in nextProps) {
            if (this.props.activeKey != nextProps.activeKey) {
                this.setState({ activeKey: nextProps.activeKey });
            }
        }
    }
    //绑定右键弹出菜单
    , _bindContextMenuEvents: function _bindContextMenuEvents() {
        this.tabNavs = findDOMNode(this).querySelectorAll('.ant-tabs > .ant-tabs-bar .ant-tabs-tab');
        for (var i = 0; i < this.tabNavs.length; i++) {
            this.tabNavs[i].addEventListener('contextmenu', this.contextMenuHandler);
        }
    }
    //解绑定右键弹出菜单
    , _unbindContextMenuEvents: function _unbindContextMenuEvents() {
        for (var i = 0; i < this.tabNavs.length; i++) {
            if (this.tabNavs[i]) {
                this.tabNavs[i].removeEventListener('contextmenu', this.contextMenuHandler);
            }
        }
    },
    componentDidMount: function componentDidMount() {
        this._bindContextMenuEvents();
    },
    componentDidUpdate: function componentDidUpdate() {
        this._bindContextMenuEvents();
    },
    componentWillUnMount: function componentWillUnMount() {
        this._unbindContextMenuEvents();
    },
    contextMenuHandler: function contextMenuHandler(event) {
        if (!this.props.popmenu) return;
        event.preventDefault();
        event.stopPropagation();
        var target = event.target;
        var key = ''; //获取右击标签页的key
        var closeable; //判断标签页是否可关闭
        var closeableNum = 0; //可关闭的标签页

        var tabs = this.props.children ? this.props.children : [];
        if (!_.isArray(tabs)) {
            tabs = [this.props.children];
        }

        if (tabs.length > 0) {
            tabs.forEach(function (item) {
                var tabText = ReactUtils.getChildrenText(item.props.tab).join('');
                if (tabText === target.textContent) {
                    key = item.key;
                    closeable = item.props.closeable == true || item.props.closeable == 'true' ? true : false;
                }
            });
            //统计可关闭标签页数量
            tabs.forEach(function (item) {
                if (item.props.closeable == true || item.props.closeable == 'true') {
                    ++closeableNum;
                }
            });
        }
        //是否禁用关闭其他
        this.setState({ disableCloseOth: closeableNum <= 1 });
        //显示弹出菜单
        this.refs.tabspopmenu.show(event, key);
    },
    removeTab: function removeTab(targetKey, event) {
        event.stopPropagation();
        if (!targetKey) {
            return;
        }
        if (this.props.onEdit) {
            this.props.onEdit(targetKey, 'remove');
        }
    }
    //构建右键弹出菜单
    , _createContextMenuItems: function _createContextMenuItems() {
        var menuItems = [{ key: "closecur", text: "关闭当前" }, { key: "closeall", text: "关闭全部" }, { key: "closeoth", text: "关闭其他", disabled: this.state.disableCloseOth }];
        return this.props.popmenu ? React.createElement(YYPopMenu, { ref: 'tabspopmenu', onMenuClick: this._handleMenuClick, items: menuItems }) : null;
    }
    //右键弹出菜单相关回调
    , _handleMenuClick: function _handleMenuClick(event, key) {
        var action = event.key;
        if (action === 'closecur') {
            //关闭当前
            var closeCurTab = this.props.closeCurTab;
            if (_.isFunction(closeCurTab)) {
                closeCurTab(key);
            }
        } else if (action === 'closeall') {
            //关闭全部
            var closeAllTab = this.props.closeAllTab;
            if (_.isFunction(closeAllTab)) {
                closeAllTab(key);
            }
        } else if (action === 'closeoth') {
            //关闭其它
            var closeOthTab = this.props.closeOthTab;
            if (_.isFunction(closeOthTab)) {
                closeOthTab(key);
            }
        }
    },
    render: function render() {
        var _this = this;

        var _props = this.props,
            editable = _props.editable,
            type = _props.type,
            children = _props.children;

        var editCls = editable && type === 'page' ? 'ant-tabs-page' : '';
        var tabChildren = [];
        if (children && children.length) {
            React.Children.forEach(children, function (child, index) {
                if (child.props.closeable == true || child.props.closeable == 'true') {
                    tabChildren.push(React.cloneElement(child, {
                        tab: React.createElement(
                            'div',
                            null,
                            child.props.tab,
                            React.createElement(YYIcon, { type: 'cross', onClick: function onClick(e) {
                                    return _this.removeTab(child.key, e);
                                } })
                        ),
                        key: child.key || YYClass.uuid()
                    }));
                } else {
                    tabChildren.push(child);
                }
            });
        } else {
            tabChildren = children;
        }
        return React.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            React.createElement(
                Tabs,
                _extends({}, this.props, { className: editCls, onChange: this._onChange, activeKey: this.state.activeKey, style: null }),
                tabChildren
            ),
            this._createContextMenuItems()
        );
    }
});
module.exports = YYTabs;