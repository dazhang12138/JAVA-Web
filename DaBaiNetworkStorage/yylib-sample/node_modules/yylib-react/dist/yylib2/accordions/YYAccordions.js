'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/7/21.
 * 手风琴组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var RcCollapse = require('rc-collapse');
var _ = require('lodash');
var ReactUtils = require('../../utils/ReactUtils');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'accordions',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('defaultActiveKey', undefined, PropTypes.string, false, '初始化时需要展开子面板的key'), field('activeKey', undefined, PropTypes.oneOfType(['string', 'array']), false, '当前激活展开的面板key(优先级高于defaultActiveKey)，手风琴模式下(accordion属性启用时)默认为第一个元素'), field('accordion', undefined, PropTypes.bool, false, '是否同一时间只展开一个面板'), field('onChange', null, PropTypes.func, false, '切换面板的回调')]
};
var YYAccordions = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        //存在activeKey则优先使用activeKey，否则使用defaultActiveKey
        var keys = this.props.activeKey ? this.props.activeKey : this.props.defaultActiveKey;
        //同步isOpen属性值,如果activeKey、defaultActiveKey都不存在则无需同步
        if (this.props.activeKey || this.props.defaultActiveKey) {
            this._syncChildrenIsOpen(this.props.children, keys);
        }
        return { activeKey: keys };
    }
    //同步子集isOpen属性;
    , _syncChildrenIsOpen: function _syncChildrenIsOpen(children, keys) {
        if (children) {
            if (!_.isArray(children)) {
                children = [children];
            }
            React.Children.forEach(children, function (child, index) {
                var eq = _.isArray(keys) ? _.indexOf(keys, child.key) != -1 : keys == child.key;
                if (child.key && eq) {
                    child.props.isOpen = true;
                } else {
                    delete child.props.isOpen;
                }
            });
        }
    },
    _onChange: function _onChange(keys) {
        var that = this;
        //同步isOpen属性值
        this._syncChildrenIsOpen(this.props.children, keys);
        //控制antd组件的activeKey
        this.setState({ activeKey: keys }, function () {
            if (_.isFunction(that.props.onChange)) {
                that.props.onChange(keys);
            }
        });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultActiveKey' in nextProps) {
            //同步isOpen属性值
            this._syncChildrenIsOpen(nextProps.children, nextProps.defaultActiveKey);
            if (!ReactUtils.isArrayEqual(this.props.defaultActiveKey, nextProps.defaultActiveKey)) {
                this.setState({ activeKey: nextProps.defaultActiveKey });
            }
        }
        //activeKey优先级高于defaultActiveKey
        if ('activeKey' in nextProps) {
            //同步isOpen属性值
            this._syncChildrenIsOpen(nextProps.children, nextProps.activeKey);
            if (!ReactUtils.isArrayEqual(this.props.activeKey, nextProps.activeKey)) {
                this.setState({ activeKey: nextProps.activeKey });
            }
        }
    }
    //遍历子节点isOpen属性，获取需要展开子节点的keys
    , _getOpenKeys: function _getOpenKeys() {
        var openKeys = [];
        var children = this.props.children;
        if (children) {
            if (!_.isArray(children)) {
                children = [children];
            }
            React.Children.forEach(children, function (child, index) {
                if (child.props.isOpen) {
                    openKeys.push(child.key);
                }
            });
        }
        return openKeys;
    },
    render: function render() {
        //获取需要展开子节点的keys
        var openKeys = this._getOpenKeys();
        return React.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            React.createElement(
                RcCollapse,
                _extends({}, this.props, { style: null, className: null, onChange: this._onChange, activeKey: openKeys, prefixCls: 'ant-collapse' }),
                this.props.children
            )
        );
    }
});
module.exports = YYAccordions;