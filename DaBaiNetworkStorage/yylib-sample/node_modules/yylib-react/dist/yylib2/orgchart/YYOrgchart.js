'use strict';

/**
 * 组织结构图组件
 */
var React = require('react');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
require('./style/index.less');

var _require2 = require('./js-orgchart-2'),
    OrgNodeV2 = _require2.OrgNodeV2,
    OrgChartV2 = _require2.OrgChartV2;

var uiMeta = {
    name: 'orgchart',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('dataSource', [], PropTypes.array, false, '构建结构图的节点数据源'), field('lineSize', 2, PropTypes.number, false, '定义连线宽度'), field('lineColor', "#3388dd", PropTypes.string, false, '定义连线颜色'), field('nodeRender', null, PropTypes.func, true, '渲染出节点的HTML，传递参数：当前结点数据，注意：返回html的字符串'), field('nodesTop', 50, PropTypes.number, false, '定义最上边节点距离页面容器顶部的垂直距离'), field('nodesLeft', 50, PropTypes.number, false, '定义最左边节点距离页面容器左边线的水平距离'), field('nodeOnClick', null, PropTypes.func, false, '当节点点击时回调'), field('nodeWidth', 100, PropTypes.number, false, '定义节点宽度'), field('nodeMinWidth', 32, PropTypes.number, false, '定义节点最小宽度'), field('nodeMaxWidth', 128, PropTypes.number, false, '定义节点最大宽度'), field('nodeHeight', 100, PropTypes.number, false, '定义连线高度'), field('nodeMinHeight', 32, PropTypes.number, false, '定义节点最小高度'), field('nodeMaxHeight', 128, PropTypes.number, false, '定义节点最大高度')]
};

var YYOrgchart = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        //生成一个唯一标识ID
        this.UUID = this.uiMeta.name + "_" + YYClass.uuid();
        return {};
    }
    //  构建画布
    , _initOrgChart: function _initOrgChart() {
        var rootNodes = this._getRootNode();
        var chartParams = {
            options: {
                top: this.props.nodesTop,
                left: this.props.nodesLeft, //  视口偏移
                line: {
                    size: this.props.lineSize,
                    color: this.props.lineColor
                },
                node: {
                    width: this.props.nodeWidth,
                    minWidth: this.props.nodeMinWidth,
                    maxWidth: this.props.nodeMaxWidth,
                    height: this.props.nodeHeight,
                    minHeight: this.props.nodeMinHeight,
                    maxHeight: this.props.nodeMaxHeight
                    //,template:this.props.template
                }
            },
            event: {
                node: {
                    onProcess: null,
                    onClick: this.props.nodeOnClick || null,
                    onMouseMove: null,
                    onMouseOver: null,
                    onMouseOut: null
                },
                onCreate: null,
                onError: null,
                onFinish: null
            },
            nodes: rootNodes
        };
        var pChart = new OrgChartV2(chartParams);
        pChart.render();
    }
    //构建根节点
    , _getRootNode: function _getRootNode() {
        var rootParams = {
            options: {
                targetName: this.UUID,
                clsName: this.className('node'),
                //subTargetName: "rootChart",
                template: typeof this.props.nodeRender == 'function' ? this.props.nodeRender(this.props.dataSource.data) : ''
            },
            customParams: this.props.dataSource.data
        };
        var rootNode = new OrgNodeV2(rootParams);
        this._getChildNodes(rootNode, this.props.dataSource.childNodes);
        return rootNode;
    }
    //递归遍历构建子节点
    , _getChildNodes: function _getChildNodes(parentNode, childNodes) {
        if (!childNodes || childNodes.length == 0) return;
        for (var i = 0; i < childNodes.length; i++) {
            var childNode = childNodes[i];
            var hasChild = childNode.childNodes && childNode.childNodes.length > 0; //有子节点
            var childNodeParams = {
                options: {
                    targetName: this.UUID,
                    //subTargetName: "orgnode",
                    clsName: this.className('node'),
                    template: typeof this.props.nodeRender == 'function' ? this.props.nodeRender(childNode.data) : ''
                },
                customParams: childNode.data
            };
            var childNodeObj = new OrgNodeV2(childNodeParams);
            if (hasChild) {
                this._getChildNodes(childNodeObj, childNode.childNodes);
            }
            parentNode.addNodes(childNodeObj);
        }
    },
    componentDidMount: function componentDidMount() {
        this._initOrgChart();
    },
    render: function render() {
        return React.createElement('div', { id: this.UUID, className: this.className() });
    }
});
module.exports = YYOrgchart;