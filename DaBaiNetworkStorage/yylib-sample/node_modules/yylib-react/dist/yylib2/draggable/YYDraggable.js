'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * https://github.com/bokuweb/react-rnd
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var Draggable = require('react-rnd');
//定义META
var uiMeta = {
    name: 'draggable',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('onResizeStart', null, PropTypes.func, false, '对于可调整大小的组件点开始伸缩时调用'), field('onResize', null, PropTypes.func, false, '对于可调整大小的组件点伸缩时调用'), field('onResizeStop', null, PropTypes.func, false, '对于可调整大小的组件点结束伸缩时调用'), field('onDragStart', null, PropTypes.func, false, '开始拖拽时调用'), field('onDrag', null, PropTypes.func, false, '拖拽时调用'), field('onDragStop', null, PropTypes.func, false, '结束拖拽时调用'), field('onTouchStart', null, PropTypes.func, false, '对于可调整大小的组件触摸时调用'), field('onClick', null, PropTypes.func, false, '对于可调整大小的组件点击时调用'), field('onDoubleClick', null, PropTypes.func, false, '对于可调整大小的组件点双击调用'), field('minWidth', undefined, PropTypes.number, false, '设置组件的最小宽度。'), field('minHeight', undefined, PropTypes.number, false, '用于设置组件的最小高度'), field('maxWidth', undefined, PropTypes.number, false, '设置组件的最大宽度。'), field('maxHeight', undefined, PropTypes.number, false, '用于设置组件的最大高度'), field('zIndex', 100, PropTypes.number, false, '设置组件的层级'), field('className', '', PropTypes.string, false, ''), field('dragHandlerClassName', '', PropTypes.string, false, ''), field('style', {}, PropTypes.object, false, '用于设置组件的自定义样式。'), field('resizerHandleStyle', undefined, PropTypes.shape({ top: PropTypes.object, right: PropTypes.object, bottom: PropTypes.object, left: PropTypes.object, topRight: PropTypes.object, bottomRight: PropTypes.object, bottomLeft: PropTypes.object, topLeft: PropTypes.object }), false, ''), field('isResizable', { top: true, right: true, bottom: true, left: true, topRight: true, bottomRight: true, bottomLeft: true, topLeft: true }, PropTypes.shape({ top: PropTypes.bool, right: PropTypes.bool, bottom: PropTypes.bool, left: PropTypes.bool, topRight: PropTypes.bool, bottomRight: PropTypes.bool, bottomLeft: PropTypes.bool, topLeft: PropTypes.bool }), false, '用于设置一个可调整大小的组件的大小可调整的权限'), field('initial', { x: 0, y: 0, width: 'auto', height: 'auto' }, PropTypes.shape({ width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), x: PropTypes.number, y: PropTypes.number }), false, '宽度和高度属性用于设置组件的大小。x和Y属性用于设置组件的初始位置'), field('moveAxis', 'both', PropTypes.oneOf(['x', 'y', 'both', 'none']), false, '允许的运动方向拖'), field('moveGrid', [1, 1], PropTypes.arrayOf(PropTypes.number), false, '用于指定的增量移动应对齐。默认为[ 1，1 ]。'), field('resizeGrid', [1, 1], PropTypes.arrayOf(PropTypes.number), false, '用于指定增量调整应该对齐。默认为[ 1，1 ]'), field('bounds', undefined, PropTypes.oneOfType([PropTypes.string, PropTypes.object]), false, '指定运动边界'), field('lockAspectRatio', false, PropTypes.bool, false, '水平或竖直分割符')]
};
var YYDraggable = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        return React.createElement(
            Draggable,
            _extends({}, this.props, { className: this.className() + ' ' + this.props.className }),
            this.props.children
        );
    }
});
module.exports = YYDraggable;