'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by office on 2016/7/20.
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Tooltip = _require.Tooltip;
//定义META


var uiMeta = {
    name: 'tooltip',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('placement', 'top', PropTypes.oneOf(['top', 'left', 'right', 'bottom', 'topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'leftTop', 'leftBottom', 'rightTop', 'rightBottom']), false, '提示文字位置'), field('title', null, PropTypes.oneOfType(['string', 'element']), false, '提示文字'), field('getTooltipContainer', function () {
        return document.body;
    }, PropTypes.func, false, '浮层渲染父节点。默认渲染到 body上')]
};
var YYTooltip = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        var cls = this.className() + ' ant-tooltip';
        return React.createElement(
            Tooltip,
            _extends({}, this.props, { className: cls }),
            this.props.children
        );
    }
});
module.exports = YYTooltip;