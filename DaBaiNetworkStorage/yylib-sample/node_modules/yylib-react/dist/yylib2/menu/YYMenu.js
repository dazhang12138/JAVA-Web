'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/5/11.
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Menu = _require.Menu;

var YYMenuItem = require('./YYMenuItem');
var YYMenuSub = require('./YYMenuSub');

require('./style/index.less');
//定义META
var uiMeta = {
    name: 'menu',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('theme', 'light', PropTypes.oneOf(['light', 'dark']), false, '主题颜色'), field('mode', 'vertical', PropTypes.oneOf(['vertical', 'horizontal', 'inline']), false, '主题颜色'), field('selectedKeys', [], PropTypes.array, false, '当前选中的菜单项 key 数组，'), field('defaultSelectedKeys', [], PropTypes.array, false, '初始选中的菜单项 key 数组'), field('openKeys', undefined, PropTypes.array, false, '当前展开的 SubMenu 菜单项 key 数组'), field('defaultOpenKeys', undefined, PropTypes.array, false, '初始展开的 SubMenu 菜单项 key 数组'), field('onOpen', null, PropTypes.func, false, 'SubMenu 展开回调'), field('onClose', null, PropTypes.func, false, 'SubMenu 收起回调'), field('onSelect', null, PropTypes.func, false, '被选中时调'), field('onDeselect', null, PropTypes.func, false, '取消选中时调用，仅在 multiple 生效 Function({ item, key, selectedKeys })'), field('onClick', null, PropTypes.func, false, '点击 menuitem 调用此函数，参数为 {item, key, keyPath}'), field('style', {}, PropTypes.object, false, '根节点样式'), field('items', undefined, PropTypes.array, false, "[{key: //唯一标识,title: ''//菜单名称,subitems: []//嵌套子菜单")]
};
var YYMenu = YYClass.create({
    uiMeta: uiMeta
    //,statics:{
    //    Divider:Menu.Divider
    //    Item:Menu.Item
    //    ,Sub:Menu.SubMenu
    //    ,Group:Menu.ItemGroup
    //}
    , getInitialState: function getInitialState() {
        return {};
    },
    render: function render() {
        var loop = function loop(data) {
            return data.map(function (item) {
                if (item.subitems && item.subitems.length > 0) {
                    return React.createElement(
                        YYMenuSub,
                        { key: item.key, title: item.title },
                        loop(item.subitems)
                    );
                }
                return React.createElement(
                    YYMenuItem,
                    { key: item.key },
                    item.title
                );
            });
        };
        var children = this.props.items ? loop(this.props.items) : this.props.children;
        return React.createElement(
            Menu,
            _extends({}, this.props, { className: this.className() }),
            children
        );
    }
});

module.exports = YYMenu;