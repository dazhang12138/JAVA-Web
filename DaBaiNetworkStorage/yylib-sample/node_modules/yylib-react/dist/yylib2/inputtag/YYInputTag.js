'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./YYInputTag.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var YYClass = require('../base/YYClass');
var YYTag = require('../tag/YYTag');
var _ = require('lodash');

var YYInputTag = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            searchFields: [],
            onChange: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            //  输入框的值
            inputValue: '',
            //小标签的集合
            tags: [],
            //小标签序号
            index: 0,
            // 当前选中的搜索条件
            activeOptionsItem: -1
        };
    },
    componentDidUpdate: function componentDidUpdate() {},


    // 添加标签
    addTag: function addTag(txt, fieldKey) {
        var index = this.state.index;
        var tags = this.state.tags;
        if (fieldKey) {
            tags.push({
                key: ++index,
                name: txt,
                fieldKey: fieldKey
            });
        } else {
            tags.push({
                key: ++index,
                name: txt
            });
        }

        this.setState({
            inputValue: '',
            tags: tags,
            index: index,
            activeOptionsItem: -1
        });
    },


    //删除标签
    delTag: function delTag(key) {
        var len = this.state.tags.length;
        if (!len) {
            return;
        }
        // key不存在时默认删除最后一个
        key = key || this.state.tags[len - 1].key;
        if (key === 0) {
            return;
        }
        var tags = [].concat(_toConsumableArray(this.state.tags)).filter(function (tag) {
            return tag.key !== key && tag;
        });
        this.setState({
            tags: tags
        });
    },


    // 获取输入框的值
    inputChange: function inputChange(e) {
        e.preventDefault();
        this.setState({
            inputValue: e.target.value
        });
    },


    // 选择下拉框中的值
    selectValue: function selectValue(keyCode) {
        var len = this.props.searchFields.length;
        var activeOptionsItem = this.state.activeOptionsItem;
        //down
        if (keyCode === 40) {
            ++activeOptionsItem;
            if (activeOptionsItem < len) {
                this.setState({
                    activeOptionsItem: activeOptionsItem
                });
            } else {
                this.setState({
                    activeOptionsItem: 0
                });
            }
        }
        //up
        if (keyCode === 38) {
            --activeOptionsItem;
            if (activeOptionsItem >= 0) {
                this.setState({
                    activeOptionsItem: activeOptionsItem
                });
            } else {
                this.setState({
                    activeOptionsItem: len - 1
                });
            }
        }
    },


    // 获取标签组素有的值（arr）
    getValue: function getValue() {
        var value = [];
        this.state.tags.map(function (item) {
            if (item.hasOwnProperty('fieldKey')) {
                value.push({
                    fieldKey: item.fieldKey,
                    fieldName: item.name.split(':')[0],
                    fieldValue: item.name.split(':')[1]
                });
            } else {
                value.push(item.name);
            }
        });
        return value;
    },

    // 删除标签
    handleClose: function handleClose(key) {
        this.delTag(key);
        //处理回调onChange
        if (_.isFunction(this.props.onChange)) {
            this.props.onChange(this.getValue());
        }
    },


    // 处理回车按键
    handleKeyUp: function handleKeyUp(e) {
        var value = e.target.value.trim();
        // 未输入内容则不执行
        if (value === '') {
            return;
        }
        this.selectValue(e.keyCode);
        if (e.keyCode === 13) {
            var activeOptionsItem = this.state.activeOptionsItem;
            if (activeOptionsItem < 0) {
                this.addTag(value);
            } else {
                var refValue = 'optionsItem' + activeOptionsItem;
                var refKey = 'fieldKey' + activeOptionsItem;
                var _value = this.refs[refValue].innerText;
                var fieldKey = this.refs[refKey].value;
                this.addTag(_value, fieldKey);
            }
            //处理回调onChange
            if (_.isFunction(this.props.onChange)) {
                this.props.onChange(this.getValue());
            } else {
                console.error('Uncaught TypeError:The props of "onChange" is not a function');
            }
        }
    },


    //内容为空时删除最后一个标签
    handleKeyDown: function handleKeyDown(e) {
        if (e.target.value === '') {
            if (e.keyCode === 8) {
                this.delTag();
            }
        }
    },


    // input获取焦点
    handleInputClick: function handleInputClick(e) {
        var tagInput = this.refs.tagInput;
        tagInput.focus();
        this.refs.tagTextarea.style.border = '1px solid #2db7f5';
    },


    // 选择下拉框中的值
    handleSelectClick: function handleSelectClick(e) {
        var value = e.target.innerText.trim();
        var fieldKey = e.target.children[0].value;
        if (value.split(":")[1] === '') {
            return;
        }
        this.addTag(value, fieldKey);
        //处理回调onChange
        if (_.isFunction(this.props.onChange)) {
            this.props.onChange(this.getValue());
        }
    },


    // 失去焦点时，更改样式，取值
    handleBlur: function handleBlur(e) {
        this.refs.tagTextarea.style.border = '1px solid #d9d9d9';
        this.getValue();
    },
    render: function render() {
        var _this = this;

        var _state = this.state,
            tags = _state.tags,
            inputValue = _state.inputValue,
            activeOptionsItem = _state.activeOptionsItem;
        var searchFields = this.props.searchFields;

        var optionsItems = searchFields.map(function (item, index) {
            return _react2.default.createElement(
                'li',
                { className: activeOptionsItem === index ? 'options-item active-options-item' : 'options-item',
                    key: 'optionsItem' + index, ref: 'optionsItem' + index },
                item.fieldName + ':' + _this.state.inputValue.trim(),
                _react2.default.createElement('input', { type: 'hidden', value: item.fieldKey, ref: 'fieldKey' + index })
            );
        });
        return _react2.default.createElement(
            'div',
            { className: 'yyui-inputtag' },
            _react2.default.createElement(
                'div',
                { ref: 'tagTextarea', className: 'tag-textarea',
                    onClick: this.handleInputClick.bind(this) },
                tags.map(function (tag) {
                    return _react2.default.createElement(
                        YYTag,
                        { key: tag.key, closable: true,
                            afterClose: _this.handleClose.bind(_this, tag.key) },
                        tag.name
                    );
                }),
                _react2.default.createElement('input', { ref: 'tagInput', className: 'tag-input', type: 'text',
                    value: this.state.inputValue,
                    onChange: this.inputChange.bind(this),
                    onKeyDown: this.handleKeyDown.bind(this),
                    onKeyUp: this.handleKeyUp.bind(this),
                    onBlur: this.handleBlur.bind(this) })
            ),
            _react2.default.createElement(
                'div',
                { className: 'drop-down' },
                inputValue.trim() && searchFields.length > 0 ? _react2.default.createElement(
                    'ul',
                    { className: 'drop-down-menu', onClick: this.handleSelectClick.bind(this) },
                    optionsItems
                ) : ''
            )
        );
    }
});
module.exports = YYInputTag;