'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/5/11.
 * 自定义图标
 * 注意：对应的应用需要引入incofont.css字体图标
 */
require('./style/index.less');
var React = require('react');
var YYClass = require('../base/YYClass');
var YYToolTip = require('../tooltip/YYTooltip');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');
//定义META
var uiMeta = {
    name: 'icon',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', '', PropTypes.string, true, '设置图标类型'), field('title', '', PropTypes.string, false, '鼠标浮上后的提示'), field('size', null, PropTypes.number, false, '字体图标显示大小'), field('placement', 'bottom', PropTypes.string, false, '悬浮提示文字位置'), field('visible', true, PropTypes.bool, false, '组件是否显示'), field('fontClass', null, PropTypes.number, false, '使用自定义字体图标样式,当使用此属性时type属性将失效')]
};
var YYIcon = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            type: this.props.type
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('type' in nextProps) {
            this.setState({ type: nextProps.type });
        }
    },
    render: function render() {
        var _props = this.props,
            type = _props.type,
            fontClass = _props.fontClass,
            _props$className = _props.className,
            className = _props$className === undefined ? '' : _props$className;

        var cls = this.className() + ' ' + (className + ' anticon anticon-' + type).trim();
        if (fontClass) {
            cls = this.className() + ' ' + fontClass;
        }
        var title = this.props.title;
        var style = {};
        if (!!this.props.style === true) {
            _.assign(style, this.props.style);
        };
        if (!!this.props.size === true) {
            _.assign(style, { fontSize: this.props.size });
        }
        if (!!this.props.visible === false) {
            _.assign(style, { display: 'none' });
        }
        if (title && title.length != 0) {
            return React.createElement(
                YYToolTip,
                { title: title, placement: this.props.placement },
                React.createElement('i', _extends({}, this.props, { className: cls, style: style, title: null }))
            );
        } else {
            return React.createElement('i', _extends({}, this.props, { className: cls, style: style }));
        }
    }

});
module.exports = YYIcon;