'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var YYTab = require('../tabs/YYTab');
var YYTabs = require('../tabs/YYTabs');
var YYRow = require('../layout/YYRow');
var YYCol = require('../layout/YYCol');
var YYClass = require('../base/YYClass');
var YYIcon = require('../icon/YYIcon');

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

//定义META
var uiMeta = {
    name: 'assistant-popup',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('visiable', false, PropTypes.array, false, '配置'), field('contextMenus', [], PropTypes.array, false, '配置')]
};

var AssistantPopup = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return { Tabswidth: 0 };
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        if (this.props.visiable && this.state.Tabswidth === 0) {
            var dom = findDOMNode(this);
            var Tabswidth = dom && dom.offsetWidth;

            this.setState({ Tabswidth: Tabswidth });
        }
    },
    //渲染任务列表
    renderTaskList: function renderTaskList(tasks, span) {
        var _this = this;
        var chunkedTasks = _.chunk(tasks, span); //=>[[{tab:'',icon:''..},{}..],[]..]
        return _.map(chunkedTasks, function (row, rowIndex) {
            var cols = _.map(row, function (col, colIndex) {
                return React.createElement(
                    YYCol,
                    { span: Math.floor(24 / span) },
                    React.createElement(YYIcon, { type: col.icon, onClick: _this.props.onClickIcon.bind(_this, col) }),
                    React.createElement(
                        'p',
                        null,
                        col.title
                    )
                );
            });
            return React.createElement(
                YYRow,
                null,
                cols
            );
        });
    },
    //渲染标签页
    renderTabs: function renderTabs(tabs) {
        var _this = this;
        var length = tabs.length;
        return _.map(tabs, function (tab, tabIndex) {
            return React.createElement(
                YYTab,
                {
                    key: tabIndex,
                    tab: React.createElement(
                        'span',
                        null,
                        React.createElement(YYIcon, { type: tab.icon }),
                        tab.tab
                    ) },
                _this.renderTaskList(tab.tasks, length)
            );
        });
    },
    render: function render() {
        var contextMenus = this.props.contextMenus;
        var Tabswidth = this.state.Tabswidth;
        var visiStyle = this.props.visiable ? { display: 'block' } : { display: 'none' };
        var style = _.assign({}, { left: -Tabswidth / 2 + 30, bottom: 30 }, visiStyle);

        var content = null;
        if (_.isArray(contextMenus) && contextMenus.length) {
            content = React.createElement(
                'div',
                { style: style, className: this.className() },
                React.createElement(
                    YYTabs,
                    { defaultActiveKey: '0' },
                    this.renderTabs(contextMenus)
                )
            );
        }

        if (contextMenus.type && _.isFunction(contextMenus.type)) {
            console.log('Tabswidth', Tabswidth);
            content = React.createElement(
                'div',
                { style: _.assign(style, { left: 30 - Tabswidth / 2, bottom: 60 }), className: this.className() },
                contextMenus
            );
        }
        return content;
    }
});

module.exports = AssistantPopup;