'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var classnames = require('classnames');

var YYClass = require('../base/YYClass');
var YYCol = require('../layout/YYCol');
var YYRow = require('../layout/YYRow');
var YYIcon = require('../icon/YYIcon');
var YYPopover = require('../popover/YYPopover');
var YYDraggable = require('../draggable/YYDraggable');
var AssistantPopup = require('./AssistantPopup');

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

require('./style/index.less');

//定义META
var uiMeta = {
    name: 'assistant',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('onClick', null, PropTypes.func, false, '点击助手的回调'), field('initial', { x: 0, y: 0, width: 100, height: 100 }, PropTypes.shape({ width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]), x: PropTypes.number, y: PropTypes.number }), false, '宽度和高度属性用于设置组件的大小。x和Y属性用于设置组件的初始位置'), field('items', [], PropTypes.array, false, '点击配置,位置pos默认即type为circle时支持top||right||bottom||left,当type为square时另外还支持topLeft||topRight||bottomLeft||bottomRight'), field('icon', '', PropTypes.string, false, '助手中心点图标，默认为windows'), field('type', 'circle', PropTypes.oneOf(['circle', 'square']), false, '点击助手的形状，圆形和正方形,默认为circle'), field('contextMenus', [], PropTypes.array, false, '右键配置,支持标签页个数1,2,3,4,6')]
};

var ITEMS_ROW = 3; //行数
var ITEMS_COL = 3; //列数
var SORT_RULES = [['topLeft', 'top', 'topRight'], ['left', 'center', 'right'], ['bottomLeft', 'bottom', 'bottomRight']]; //排列规则

var YYAssistant = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            animated: false,
            visiable: true,
            showContextMenu: false
        };
    },
    componentDidMount: function componentDidMount() {
        //注册相关事件
        document.addEventListener('click', this.onDocumentClick);
    },
    componentWillUnmount: function componentWillUnmount() {
        document.removeEventListener('click', this.onDocumentClick);
    },
    //点击contextmenu以外的地方将其关闭
    onDocumentClick: function onDocumentClick(event) {
        var target = event.target;
        var popup = findDOMNode(this.refs.assistantPopup);
        if (!this._contains(popup, target)) {
            this.setState({ showContextMenu: false });
        }
    },
    //判断n是否在root内
    _contains: function _contains(root, n) {
        var node = n;
        while (node) {
            if (node === root) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    },
    //点击某个item时
    onClickIcon: function onClickIcon(item) {
        var _this = this;
        var onClick = this.props.onClick;
        if (_.isFunction(onClick)) {
            onClick(item);
            _this.setState({ animated: false, showContextMenu: false });
        }
    },
    //点击重点
    onClickCenter: function onClickCenter() {
        this.setState({ animated: !this.state.animated, showContextMenu: false });
    },
    onMouseLeave: function onMouseLeave() {
        this.setState({ animated: false });
    },
    //右键菜单
    onContextMenu: function onContextMenu() {
        event.preventDefault();
        this.setState({ animated: false, showContextMenu: true });
    },
    //对items格式华为SORT_RULES形式
    _formatItems: function _formatItems(items) {
        //items中所有位置pos 集合
        var itemsPosArry = _.map(items, function (item) {
            return item.pos;
        });

        var formatItems = new Array(ITEMS_ROW); //列
        _.forEach(SORT_RULES, function (rowRules, rowIndex) {
            var itemsRow = new Array(ITEMS_COL); //行

            _.forEach(rowRules, function (rule, colIndex) {
                _.forEach(items, function (item, itemIndex) {
                    //items中未定义的位置
                    if (itemsPosArry.indexOf(rule) === -1) {
                        itemsRow[colIndex] = { pos: rule };
                    }
                    //items中定义的位置
                    if (item.pos === rule) {
                        itemsRow[colIndex] = item;
                    }
                });
            });
            formatItems[rowIndex] = itemsRow;
        });
        return formatItems;
    },
    //渲染九宫格
    renderItems: function renderItems(items, animated, showItems) {
        var _this = this;
        var formatItems = this._formatItems(items);
        return _.map(formatItems, function (row, index) {

            return _.map(row, function (col, index) {
                var cls = 'assistant-item assistant-' + col.pos; //pos 类
                cls += animated && showItems ? ' animated ' : ''; //动画类
                //中点特殊处理
                if (col.pos === 'center') {
                    return React.createElement(
                        'div',
                        {
                            className: cls,
                            onClick: _this.onClickCenter,
                            onContextMenu: _this.onContextMenu },
                        React.createElement(YYIcon, { type: col.icon })
                    );
                }
                var taskItem = React.createElement(
                    'div',
                    { className: cls },
                    React.createElement(
                        YYIcon,
                        { onClick: _this.onClickIcon.bind(_this, col), type: col.icon },
                        React.createElement(
                            'span',
                            { className: 'icon-title' },
                            React.createElement(
                                'small',
                                null,
                                col.title
                            )
                        )
                    )
                );
                //如果type为circle只支持四个方向
                if (_this.props.type === 'circle') {
                    if (col.pos && ['left', 'right', 'top', 'bottom'].indexOf(col.pos) !== -1) {
                        return taskItem;
                    }
                } else {
                    return taskItem;
                }
            });
        });
    },
    render: function render() {
        var items = this.props.items || [];
        var center = { pos: 'center', icon: this.props.icon || 'windows' //中心位置
        };items = items.concat(center);
        var showItems = items.length === 1 ? false : true;

        var assistantCls = classnames({
            'yyui-assistant': true,
            'actived': this.state.animated && showItems,
            'yyui-assistant-circle': this.props.type === 'circle',
            'yyui-assistant-square': this.props.type === 'square'
        });

        return React.createElement(
            YYDraggable,
            { initial: this.props.initial, isResizable: { top: false, right: false, bottom: false, left: false, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false } },
            React.createElement(
                'div',
                {
                    className: assistantCls,
                    onDragStart: this.onDragStart,
                    onMouseLeave: this.onMouseLeave },
                this.renderItems(items, this.state.animated, showItems),
                React.createElement(AssistantPopup, {
                    ref: 'assistantPopup',
                    visiable: this.state.showContextMenu,
                    onClickIcon: this.onClickIcon,
                    contextMenus: this.props.contextMenus })
            )
        );
    }
});

module.exports = YYAssistant;