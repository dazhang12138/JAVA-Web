'use strict';

/**
 * 计算器组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYCalcButton = require('./YYCalcButton');
var YYCalcResult = require('./YYCalcResult');

var _require = require('lodash'),
    isFunction = _require.isFunction;

require('./style/index.less');
var _ = require('lodash');
function format(str) {
    // 传入值需去除逗号
    var decimal = str.split('.')[1]; //小数部分
    var tempArr = [];
    var revNumArr = str.split('.')[0].split("").reverse(); //倒序
    for (var i in revNumArr) {
        tempArr.push(revNumArr[i]);
        if ((i + 1) % 3 === 0 && i != revNumArr.length - 1) {
            tempArr.push(',');
        }
    }
    var zs = tempArr.reverse().join(''); //整数部分
    return decimal != undefined ? zs + '.' + decimal : zs;
}
//定义META
var uiMeta = {
    name: 'calc',
    fields: [field('isShow', 'false', PropTypes.bool, false, '计算器组件是否显示'), field('onEqual', null, PropTypes.func, false, '点击等于时使结果回显')]
};
var YYCalc = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            input_num: '',
            opr: '',
            formula: '',
            result: ''
        };
    },
    onButtonClick: function onButtonClick(type) {
        var _state = this.state,
            input_num = _state.input_num,
            opr = _state.opr,
            formula = _state.formula;

        switch (type) {
            case 'c':
                {
                    this.setState({
                        input_num: '',
                        opr: '',
                        formula: '',
                        result: '0'
                    });
                    break;
                }
            case 'back':
                {
                    if (input_num) {
                        this.setState({
                            input_num: input_num.slice(0, -1)
                        });
                    }
                    if (opr) {
                        this.setState({
                            opr: ''
                        });
                    }
                    break;
                }
            case '=':
                {
                    this.setState({
                        result: format(_.toString(eval((formula + opr + input_num).replace(/,/g, ''))))
                    });
                    break;
                }
            case '+':
            case '-':
            case '*':
            case '/':
                {
                    if (formula.slice(-1) == '+' || formula.slice(-1) == '-' || formula.slice(-1) == '*' || formula.slice(-1) == '/') {
                        type = '';
                    }
                    this.setState({
                        opr: type,
                        formula: formula + opr + input_num,
                        input_num: ''
                    });
                    break;
                }
            default:
                {
                    if (input_num.indexOf('.') > 0 && type == '.') {
                        type = '';
                    }
                    this.setState({
                        input_num: format((input_num + type).replace(/,/g, ''))
                    });
                }
        }
    },
    render: function render() {
        var _state2 = this.state,
            formula = _state2.formula,
            result = _state2.result,
            input_num = _state2.input_num,
            opr = _state2.opr;

        var exp = {
            formula: formula + opr + input_num,
            result: result
        };
        var show = this.props.isShow;
        var calc = !show ? null : React.createElement(
            'div',
            { className: this.className() },
            React.createElement(YYCalcResult, { exp: exp }),
            React.createElement(YYCalcButton, { onClick: this.onButtonClick, exp: exp })
        );
        return calc;
    }
});
module.exports = YYCalc;