'use strict';

/**
 * Created by aaa on 2016/7/18.
 */
var React = require('react');
var YYClass = require('../base/YYClass');

var _require = require('lodash'),
    isFunction = _require.isFunction;

var _require2 = require('antd'),
    Icon = _require2.Icon;

require('./style/pagingbutton.less');
var YYPagingButton = YYClass.create({
    uiName: 'paging',
    getDefaultProps: function getDefaultProps() {
        return {
            total: 0, //总页数
            current: 0, //当前页码
            onChange: null //当页码发生变更时的回调，传递参数：变更后的页码
        };
    },
    getInitialState: function getInitialState() {
        return {
            total: this.props.total,
            current: this.props.current,
            isfocus: false, //是否处于焦点状态
            editcurrent: this.props.current, //编辑模式下当前的值
            edit: false //是否为编辑模式
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('current' in nextProps) {
            this.setState({ current: nextProps.current, editcurrent: nextProps.current });
        }
        if ('total' in nextProps) {
            this.setState({ total: nextProps.total });
        }
    },
    //获取编辑模式下有效的值，值无效时则返回原始值
    _getCurrVal: function _getCurrVal() {
        var editVal = this.state.editcurrent;
        if (parseInt(editVal) > 0 && parseInt(editVal) <= this.props.total) {
            return parseInt(editVal);
        } else {
            return this.state.current;
        }
    },
    //执行回调函数：pageNum-变更后的页码
    _changeCallback: function _changeCallback(pageNum) {
        if (isFunction(this.props.onChange)) {
            if (pageNum != this.state.current) {
                //当值发生变更时回调
                this.props.onChange(pageNum);
            }
        }
    },
    //上一页
    _sub: function _sub() {
        if (this.state.current > 1) {
            var pageNum = this.state.current - 1;
            this._changeCallback(pageNum); //注意：在setState之前执行
            this.setState({ current: pageNum });
        }
    },
    //下一页
    _add: function _add() {
        if (this.state.current < this.props.total) {
            var pageNum = this.state.current + 1;
            this._changeCallback(pageNum); //注意：在setState之前执行
            this.setState({ current: pageNum });
        }
    },
    //鼠标移入
    _over: function _over() {
        if (this.state.edit == false) {
            this.setState({ edit: true, editcurrent: this.state.current });
        }
    },
    //回车确认
    _keyout: function _keyout(e) {
        if (e.keyCode == "13") {
            this._blur();
        }
    },
    //鼠标移出
    _out: function _out() {
        if (this.state.isfocus == false) {
            this._blur();
        }
    },
    //输入框获取焦点
    _focus: function _focus() {
        this.setState({ isfocus: true });
    },
    //输入框失去焦点
    _blur: function _blur() {
        //由编辑模式转为非编辑模式
        if (this.state.edit == true) {
            var newVal = this._getCurrVal();
            this._changeCallback(newVal); //注意：在setState之前执行
            this.setState({ isfocus: false, edit: false, current: newVal });
        } else {
            this.setState({ isfocus: false });
        }
    },
    //输入值发生变更
    _change: function _change(e) {
        if (e.target.value == '') {
            this.setState({ editcurrent: '' });
        } else {
            var newVal = parseInt(e.target.value);
            this.setState({ editcurrent: newVal });
        }
    },
    render: function render() {
        var view;
        var tagCls = this.className('tag');
        var hoverCls = this.className('tag-hover');
        var currCls = this.className('tag-curr');
        var divCls = this.className('tag-div');
        var sbuCls = this.className('tag-sbu');
        var totalCls = this.className('tag-total');
        var addCls = this.className('tag-add');

        if (this.state.edit === true) {
            //编辑模式
            view = React.createElement('input', { className: hoverCls, type: 'text', value: this.state.editcurrent, onChange: this._change, onKeyDown: this._keyout, onFocus: this._focus, onBlur: this._blur });
        } else {
            //只读模式
            view = React.createElement(
                'span',
                { className: currCls },
                this.state.current
            );
        }
        return React.createElement(
            'div',
            { className: tagCls, onMouseOut: this._out },
            React.createElement(Icon, { type: 'left', onClick: this._sub, className: sbuCls, title: '\u4E0A\u4E00\u9875' }),
            this.state.total > 0 ? React.createElement(
                'div',
                { className: divCls, onMouseOver: this._over },
                view,
                '/',
                React.createElement(
                    'span',
                    { className: totalCls },
                    this.props.total
                )
            ) : null,
            React.createElement(Icon, { type: 'right', onClick: this._add, className: addCls, title: '\u4E0B\u4E00\u9875' })
        );
    }
});

module.exports = YYPagingButton;