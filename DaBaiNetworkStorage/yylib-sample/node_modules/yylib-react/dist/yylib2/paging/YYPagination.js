'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 分页组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Pagination = _require.Pagination;

var DataUtil = require('../../utils/DataUtil');
var PAGE_SIZE_LOCAL_KEY = '_YYPAGINATION_PAGE_SIZE_'; //本地记录切换后的每页显示数
require('./style/index.less');
var uiMeta = {
    name: 'pagination',
    fields: [field('current', undefined, PropTypes.number, false, '当前页数'), field('defaultCurrent', 1, PropTypes.number, false, '默认当前页数'), field('total', 1, PropTypes.number, false, '数据总数'), field('defaultPageSize', 10, PropTypes.number, false, '初始每页条数'), field('onChange', null, PropTypes.func, false, '页码改变时的回调，参数为改变后的页码'), field('pageSize', 10, PropTypes.number, false, '每页条数'), field('showSizeChanger', false, PropTypes.bool, false, '是否可以改变pagesize'), field('pageSizeOptions', ['10', '20', '30', '40'], PropTypes.array, false, '指定每页可显示多少条'), field('onShowSizeChange', null, PropTypes.func, false, 'pageSize改变时的回调'), field('showQuickJumper', false, PropTypes.bool, false, '是否可快速跳转至某页'), field('size', '', PropTypes.string, false, '当为「small」时，是小尺寸分页 '), field('simple', null, PropTypes.object, false, '添加该属性时，显示为简单分页'), field('showTotal', null, PropTypes.func, false, '用于显示总共有多少条数据')]
};
var YYPagination = YYClass.create({
    uiMeta: uiMeta,
    _onShowSizeChange: function _onShowSizeChange(current, pageSize) {
        DataUtil.localSave(PAGE_SIZE_LOCAL_KEY + (this.props.key ? this.props.key : ''), pageSize); //本地记录每页显示数
        if (_.isFunction(this.props.onShowSizeChange)) {
            this.props.onShowSizeChange(current, pageSize);
        }
    },
    _getPageSize: function _getPageSize() {
        var pageSize = this.props.showSizeChanger ? DataUtil.localRead(PAGE_SIZE_LOCAL_KEY + (this.props.key ? this.props.key : '')) : null; //读取本地记录的每页显示数
        if (!pageSize) pageSize = this.props.pageSize;
        return pageSize;
    },
    render: function render() {

        return React.createElement(
            Pagination,
            _extends({}, this.props, { pageSize: this._getPageSize(), onShowSizeChange: this._onShowSizeChange, className: this.className() }),
            this.props.children
        );
    }
});

//规范属性类型
//var propTypes = {
//};
//YYPagination.PropTypes = propTypes;

module.exports = YYPagination;