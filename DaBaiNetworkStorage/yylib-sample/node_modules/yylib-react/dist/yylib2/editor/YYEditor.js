'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var ReactDOM = require('react-dom');
var YYClass = require('../base/YYClass');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var _ = require('lodash');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var Editor = require('react-umeditor');
var EditorSelection = require('react-umeditor/lib/utils/EditorSelection');
var EditorDOM = require('react-umeditor/lib/utils/EditorDOM');
var PasteImageUtils = require('../../utils/PasteImageUtils');
var YYMessage = require('../message/YYMessage');
var ADDR = require('../../business/BaseHost');
require('./index.less');
var ALL_DEFAULT_ICONS = ["source | undo redo | bold italic underline strikethrough fontborder emphasis | ", "paragraph fontfamily fontsize | superscript subscript | ", "forecolor backcolor | removeformat | insertorderedlist insertunorderedlist | selectall | ", "cleardoc | indent outdent | justifyleft justifycenter justifyright | touppercase tolowercase | ", "horizontal date time | image spechars | inserttable"];
var uiMeta = {
    name: 'editor',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('focusEditor', 'click', PropTypes.oneOf(['click', 'hover']), false, '编辑框获取焦点的方式'), field('defaultValue', '', PropTypes.string, false, '编辑器默认显示的内容'), field('value', '', PropTypes.string, false, '编辑器显示的内容值'), field('icons', undefined, PropTypes.any, false, '配置工具栏的图标启用状态'), field('uploadImgUrl', ADDR + '/icop-file/file/fileupload', PropTypes.string, false, '上传图片服务的URL地址'), field('uploadImgName', undefined, PropTypes.string, false, '上传图片服务的文件标识名'), field('plugins', {}, PropTypes.object, false, '配置第三方的插件'), field('enablePasteUpload', true, PropTypes.bool, false, '是否启用粘贴上传图片')]
};
// 返回格式 {"status":"success", "data": {"image_src":"xxx"}}
// status表示上传结果 url跟配置的request对应
var YYEditor = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        //默认的全部工具栏图标
        Icons: _.clone(ALL_DEFAULT_ICONS)
    },
    findDOMNode: function findDOMNode(nodename) {
        return this.refs.yyEditor.findDOMNode(nodename);
    },
    setContent: function setContent(content) {
        if (content) {
            return this.refs.yyEditor.setContent(content);
        }
    },
    getContent: function getContent() {
        return this.refs.yyEditor.getContent();
    },
    focusEditor: function focusEditor() {
        return this.refs.yyEditor.focusEditor();
    },
    componentDidUpdate: function componentDidUpdate() {
        //渲染禁用
        this._renderDisabled(this.props.disabled);
    },
    //渲染禁用
    _renderDisabled: function _renderDisabled(disabled) {
        var thisDom = ReactDOM.findDOMNode(this);
        var editorToolbar = thisDom.querySelector('.editor-toolbar');
        if (editorToolbar) {
            editorToolbar.style.display = disabled ? 'none' : '';
        }
        var editorContent = thisDom.querySelector('.editable-range');
        if (editorContent) {
            editorContent.contentEditable = disabled ? false : true;
        }
    },
    //  处理富文本工具栏图标
    _getIcons: function _getIcons() {
        var icons = this.props.icons;
        var defaultIcons = _.clone(ALL_DEFAULT_ICONS);
        var resultIcons = [];
        //配置被禁用掉的工具箱
        var settingIcons = { source: false, superscript: false, subscript: false, insertorderedlist: false, insertunorderedlist: false, image: false };
        if (_.isArray(icons)) {
            //覆盖工具栏
            defaultIcons = icons;
        } else if (_.isObject(icons) || !icons) {
            settingIcons = _.assign(settingIcons, icons);
            //配置启用|禁用
            _.forEach(defaultIcons, function (iconGroup) {
                for (var key in settingIcons) {
                    if (settingIcons[key] == false) {
                        iconGroup = iconGroup.replace(key, '');
                    }
                }
                //TODO 未处理重复分隔符的问题
                resultIcons.push(iconGroup);
            });
            defaultIcons = resultIcons;
        } else if (icons == false) {
            //icons==false时不显示工具栏
            defaultIcons = [];
        }
        return defaultIcons;
    },
    _getPlugins: function _getPlugins() {
        var plugins = _.assign({ image: { uploader: { name: 'file' } } }, this.props.plugins);
        //处理图片上传的配置
        if (this.props.uploadImgUrl || this.props.uploadImgName) {
            if (this.props.uploadImgUrl) plugins.image.uploader.url = this.props.uploadImgUrl;
            if (this.props.uploadImgName) plugins.image.uploader.name = this.props.uploadImgName;
        }
        return plugins;
    },
    _onChange: function _onChange(content) {
        this.setContent(content);
        if (typeof this.props.onChange == 'function') {
            this.props.onChange(content);
        }
    },
    //shouldComponentUpdate:function () {},
    componentDidMount: function componentDidMount() {
        if (this.props.enablePasteUpload == true) {
            this._bindPasteImgBase64Upload(); //上传后显示
        } else {
            this._bindPasteImgBase64(); //直接显示
        }
    },
    //绑定粘贴base64图片数据上传后通过返回的url进行显示
    _bindPasteImgBase64Upload: function _bindPasteImgBase64Upload() {
        var that = this;
        setTimeout(function () {
            if (!that.refs.yyEditor || !that.refs.yyEditor.refs.editor) return; //TODO 待测试
            var editareaDom = that.refs.yyEditor.refs.editor.findDOMNode('editarea').dom;
            var rootDom = that.refs.yyEditor.refs.editor.findDOMNode('root').dom;
            editareaDom.addEventListener('paste', function (event) {
                if (that._isPasteImgUploading == true) {
                    //确保同一时间处理上传一张图片
                    YYMessage.warning('正在上传粘贴的图片,请稍等待一下！');
                    return;
                }
                EditorSelection.storeRange();
                PasteImageUtils.getImageData(event, function (imgData) {
                    EditorSelection.restoreRange();
                    that._isPasteImgUploading = true;
                    //PasteImageUtils.zipImg(imgData,function(zipData){
                    PasteImageUtils.uploadImg({
                        imgData: imgData,
                        success: function success(result) {
                            //console.log('图片上传后：',result);
                            if (result && result.success) {
                                var html = '<img src="' + result.backData + '"/>';
                                if (EditorSelection.range && EditorSelection.validateRange(rootDom, EditorSelection.range)) {
                                    if (EditorSelection.range.pasteHTML) {
                                        EditorSelection.range.pasteHTML('<p>' + html + '</p>');
                                    } else {
                                        var p = EditorDOM.createNodeByTag('p', html);
                                        EditorSelection.range.deleteContents();
                                        EditorSelection.insertNode(p);
                                    }
                                } else {
                                    editareaDom.innerHTML += '<p>' + html + '</p>';
                                }
                            } else {
                                YYMessage.error('粘贴图片上传失败');
                            }
                            that._isPasteImgUploading = false;
                        },
                        error: function error() {
                            that._isPasteImgUploading = false;
                            YYMessage.error('粘贴图片上传失败');
                        }
                    });
                    //});
                });
                EditorDOM.stopPropagation(event);
            });
        }, 500);
    },
    //绑定粘贴base64图片，直接进行显示
    _bindPasteImgBase64: function _bindPasteImgBase64() {
        var that = this;
        setTimeout(function () {
            var editareaDom = that.refs.yyEditor.refs.editor.findDOMNode('editarea').dom;
            var rootDom = that.refs.yyEditor.refs.editor.findDOMNode('root').dom;
            editareaDom.addEventListener('paste', function (event) {
                //editarea.dom.focus();
                //EditorSelection.cloneRange();
                //EditorSelection.storeRange();
                EditorSelection.storeRange();
                PasteImageUtils.getImageData(event, function (imgData) {
                    EditorSelection.restoreRange();
                    PasteImageUtils.zipImg(imgData, function (zipData) {
                        var html = '<img src="' + zipData + '"/>';
                        if (EditorSelection.range && EditorSelection.validateRange(rootDom, EditorSelection.range)) {
                            if (EditorSelection.range.pasteHTML) {
                                EditorSelection.range.pasteHTML('<p>' + html + '</p>');
                            } else {
                                var p = EditorDOM.createNodeByTag('p', html);
                                EditorSelection.range.deleteContents();
                                EditorSelection.insertNode(p);
                            }
                        } else {
                            editareaDom.innerHTML += '<p>' + html + '</p>';
                        }
                    });
                    //EditorSelection.createRange();
                    //// range state
                    //handleRangeChange();
                });
                EditorDOM.stopPropagation(event);
            });
        }, 500);
    },
    componentWillUnmount: function componentWillUnmount() {
        //清理表单绑定的事件，否则会报错
        this.props.onChange = null;
        this.props.onChangeValidate = null;
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(Editor, _extends({}, this.props, { ref: 'yyEditor', onChange: this._onChange, plugins: this._getPlugins(), icons: this._getIcons() }))
        );
    }
});

module.exports = YYEditor;