'use strict';

/**
 * Created by Dio on 2016/7/12.
 * 菜单列表
 */

var React = require('react');

var _require = require('react-router'),
    Link = _require.Link;

var _require2 = require('antd'),
    Icon = _require2.Icon;

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYMenu = require('../menu/YYMenu');
var YYMenuItem = require('../menu/YYMenuItem');
var YYMenuSub = require('../menu/YYMenuSub');
//定义META
var uiMeta = {
    name: 'menulist',
    fields: [field('itemsData', [], PropTypes.array, false, "[{key: ''//唯一标识,title: ''//菜单名称,link:null//链接地址,icon:null//图标样式,route:true//是否启用路由,subitems: []//嵌套子菜单"), field('onItemClick', null, PropTypes.func, false, '当每个节点被点击时，传递参数节点数据'), field('openKeys', [], PropTypes.array, false, '展开的菜单节点标识')]
};
var YYMenuList = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        return React.createElement(
            YYMenu,
            { defaultOpenKeys: this.props.openKeys, theme: 'light', mode: 'inline', style: this.props.style, className: this.className() },
            this.generateSubMenus(this.props.itemsData)
        );
    }
    //递归遍历生成菜单
    , generateSubMenus: function generateSubMenus(items) {
        if (!items) return null;
        if (items.length == 0) return null;
        var views = [];
        for (var i = 0; i < items.length; i++) {
            var item = items[i];
            var hasChild = item.subitems && item.subitems.length > 0; //有子菜单
            var title = null;
            var itemClick = function itemClick() {};
            if (typeof this.props.onItemClick == 'function') {
                itemClick = this.props.onItemClick;
            }
            if (item.icon && item.icon.length > 0) {
                //有图标
                if (item.link && item.link.length > 0) {
                    if (item.route == false) {
                        //禁用路由
                        title = React.createElement(
                            'a',
                            { href: item.link, onClick: itemClick.bind(this, item) },
                            React.createElement(Icon, { type: item.icon }),
                            React.createElement(
                                'span',
                                null,
                                item.title
                            )
                        );
                    } else {
                        //启用路由
                        title = React.createElement(
                            Link,
                            { to: { pathname: item.link }, onClick: itemClick.bind(this, item) },
                            React.createElement(Icon, { type: item.icon }),
                            React.createElement(
                                'span',
                                null,
                                item.title
                            )
                        );
                    }
                } else {
                    title = React.createElement(
                        'span',
                        { onClick: itemClick.bind(this, item) },
                        React.createElement(Icon, { type: item.icon }),
                        React.createElement(
                            'span',
                            null,
                            item.title
                        )
                    );
                }
            } else {
                //无图标
                if (item.link && item.link.length > 0) {
                    //有链接
                    if (item.route == false) {
                        //禁用路由
                        title = React.createElement(
                            'a',
                            { href: item.link, onClick: itemClick.bind(this, item) },
                            React.createElement(
                                'span',
                                null,
                                item.title
                            )
                        );
                    } else {
                        //启用路由
                        title = React.createElement(
                            Link,
                            { to: { pathname: item.link }, onClick: itemClick.bind(this, item) },
                            React.createElement(
                                'span',
                                null,
                                item.title
                            )
                        );
                    }
                } else {
                    //无链接
                    title = React.createElement(
                        'span',
                        null,
                        item.title
                    );
                }
            }
            if (hasChild) {
                //有子菜单
                views.push(React.createElement(
                    YYMenuSub,
                    { key: item.key, title: title },
                    this.generateSubMenus(item.subitems)
                ));
            } else {
                //无子菜单
                views.push(React.createElement(
                    YYMenuItem,
                    { key: item.key },
                    title
                ));
            }
        }
        return views;
    }
});

module.exports = YYMenuList;