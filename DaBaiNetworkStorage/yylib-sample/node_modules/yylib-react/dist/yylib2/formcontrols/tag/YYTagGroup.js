'use strict';

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYTagItem = require('./YYTagItem');
var _ = require('lodash');
//定义META
var uiMeta = {
    name: 'taglist',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('onChange', null, PropTypes.func, false, '选中项改变时的回调'), field('items', null, PropTypes.array, false, 'children项的数组形式'), field('defaultValue', [], PropTypes.array, false, '默认选中的value集合'), field('disabled', false, PropTypes.bool, false, '是否启用禁用状态')]
};
var YYTagGroup = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            checkedValue: [],
            defaultValue: this.props.defaultValue
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultValue' in nextProps) {
            this.setState({
                defaultValue: nextProps.defaultValue
            });
        }
    },
    onChange: function onChange(value, text, checked) {
        var checkedValue = this.state.checkedValue;
        var index = _.indexOf(checkedValue, value);
        if (index > -1) {
            checkedValue = _.pull(checkedValue, checkedValue[index]);
        } else {
            checkedValue = checkedValue.concat([value]);
        }
        this.setState({
            checkedValue: checkedValue
        });
        if (_.isFunction(this.props.onChange)) {
            this.props.onChange(checkedValue, text, checked);
        }
    },
    getChildren: function getChildren() {
        var _props = this.props,
            children = _props.children,
            items = _props.items,
            disabled = _props.disabled;

        var defaultValue = this.state.defaultValue;
        var children = children ? children : items;
        var _this = this;
        var children = _.map(children, function (child, index) {
            var item = child.props ? child.props : child;
            var checked = _.includes(defaultValue, item.value);
            if (checked == true) {
                return React.createElement(YYTagItem, { text: item.text, disabled: disabled, key: index, value: item.value, onChange: _this.onChange, checked: checked });
            } else {
                return React.createElement(YYTagItem, { text: item.text, disabled: disabled, key: index, value: item.value, onChange: _this.onChange });
            }
        });
        return children;
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className() },
            this.getChildren()
        );
    }
});
module.exports = YYTagGroup;