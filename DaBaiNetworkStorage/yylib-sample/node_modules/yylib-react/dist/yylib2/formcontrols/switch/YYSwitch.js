'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Switch = _require.Switch;

require('./style/index.less');
//定义META
var uiMeta = {
    name: 'switch',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('checked', undefined, PropTypes.bool, false, '指定当前是否选中'), field('defaultChecked', false, PropTypes.bool, false, '初始是否选中'), field('onChange', null, PropTypes.func, false, '变化时回调函数'), field('checkedChildren', null, PropTypes.node, false, '选中时的内容'), field('unCheckedChildren', null, PropTypes.node, false, '非选中时的内容'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '开关大小'), field('disabled', false, PropTypes.bool, false, '是否禁用')]
};

var YYSwitch = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        //存在checked则优先使用checked，否则使用defaultChecked
        var checked = this.props.checked !== undefined ? this.props.checked : this.props.defaultChecked;
        return { checked: checked };
    },
    _onChange: function _onChange(checked) {
        var that = this;
        //控制antd组件的checked
        this.setState({ checked: checked }, function () {
            if (_.isFunction(that.props.onChange)) {
                that.props.onChange(checked);
            }
        });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultChecked' in nextProps) {
            if (this.props.defaultChecked !== nextProps.defaultChecked) {
                this.setState({ checked: nextProps.defaultChecked });
            }
        }
        //checked优先级高于defaultChecked
        if ('checked' in nextProps) {
            if (this.props.checked !== nextProps.checked) {
                this.setState({ checked: nextProps.checked });
            }
        }
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                Switch,
                _extends({}, this.props, { onChange: this._onChange, checked: this.state.checked }),
                this.props.children
            )
        );
    }
});

module.exports = YYSwitch;