'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var YYInput = require('../input/YYInput');
var _ = require('lodash');
var YYClass = require('../../base/YYClass');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var formatUtils = require('yylib-utils/formatUtils');
var uiMetaFields = require('./uiMetaFields');
//定义META
var uiMeta = {
    name: 'inputcurrency',
    fields: uiMetaFields
    //处理掉千分位
};var clearComma = function clearComma(value) {
    return value && typeof value == 'string' ? value.split(",").join("") : value;
};
/**
 * 格式化精确数值
 * @param value
 * @param options{
 *  symbol 货币符号
 *  decimal 小数位
 *  comma 是否显示千分位
 * }
 * @returns {string}
 */
var formatCurrency = function formatCurrency(value, options) {
    var symbol = options.symbol,
        decimal = options.decimal,
        comma = options.comma;

    var textValue = '';
    //处理掉千分位，后再进行格式化
    value = clearComma(value);
    if (comma === true) {
        //显示千分位逗号
        textValue = formatUtils.formatNumber(value, decimal, 3, value);
    } else {
        //不显示千分位逗号
        textValue = formatUtils.formatNumber(value, decimal, 0, value);
    }
    if (symbol && _.trim(symbol) && textValue !== '' && textValue !== undefined) {
        //显示货币符号
        textValue = _.trim(symbol) + textValue;
    }
    return textValue;
};

var YYInputCurrency = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        formatCurrency: formatCurrency,
        clearComma: clearComma
    },
    getInitialState: function getInitialState() {
        return {
            inputediting: false,
            value: this.props.value
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (!this.state.inputediting) {
            //非编辑时才生效
            if ('value' in nextProps) {
                var val = nextProps.value;
                // 计算为NAN时置为空字符串，否则数字格式化字符串
                val = val === undefined || val === null || _.isNaN(val) ? '' : val + '';
                this.setState({ inputediting: this.state.inputediting, value: val });
            }
        }
    },
    //处理小数点问题
    _handlePoint: function _handlePoint(preValue, value) {
        var pre_sub = preValue.slice(0, preValue.indexOf('.'));
        var cur_sub = value.slice(0, value.indexOf('.'));
        var index; // 记录小数点位置
        if (_.toNumber(pre_sub) != _.toNumber(cur_sub)) {
            // 小数点前移
            index = value.indexOf('.');
            value = value.replace(/\./g, '');
            value = value.slice(0, index) + '.' + value.slice(index);
        } else if (_.toNumber(pre_sub) == _.toNumber(cur_sub)) {
            // 小数点后移
            index = _.lastIndexOf(value, '.');
            value = value.replace(/\./g, '');
            value = value.slice(0, index - 1) + '.' + value.slice(index - 1);
        }
        return value;
    },
    //处理数字0问题
    _handleZero: function _handleZero(value) {
        var hasMinus = value.indexOf('-') > -1 ? true : false;
        value = value.replace(/-/g, '');
        var substr1 = value.substr(0, 1);
        var substr2 = value.substr(1, 1);
        var substr3 = value.substr(2);

        if (value.length > 1 && substr1 == 0 && substr2 != '.') {
            value = substr2 + substr3;
        }
        value = hasMinus ? '-' + value : value;
        return value;
    },
    //处理减号符
    _handleMinus: function _handleMinus(value) {
        var index = value.indexOf('-');
        if (index > -1) {
            value = value.replace(/-/g, '');
            if (this.props.minus) {
                value = '-' + value;
            }
        }
        return value;
    },
    //数值是否超出限制范围
    _handleRange: function _handleRange(value) {
        var _props = this.props,
            min = _props.min,
            max = _props.max;

        if (value) {
            if (min != undefined) value = _.toNumber(value) < _.toNumber(min) ? min : value;
            if (max != undefined) value = _.toNumber(value) > _.toNumber(max) ? max : value;
        }
        return value; //数值字符串
    },
    _handleKeyPress: function _handleKeyPress(e) {
        var _props2 = this.props,
            minus = _props2.minus,
            decimal = _props2.decimal;
        var charCode = e.charCode;

        if (charCode == 46) {
            //小数点
            if (decimal <= 0) {
                //不存在小数位，则不允许输入小数点
                e.stopPropagation();
                e.preventDefault();
            }
        } else if (charCode == 45) {
            //减号
            if (minus === false) {
                //不允许输入负数，则减号无效
                e.stopPropagation();
                e.preventDefault();
            }
        } else if (48 <= charCode && charCode <= 57) {//数字0~9
        } else if (charCode === undefined) {//非char字符，一般为功能键被按时，例如：回退删除
        } else {
            //其它char字符，则不允许按出来
            e.stopPropagation();
            e.preventDefault();
        }
    },
    _handleChange: function _handleChange(e) {
        var self = this;
        var value = '';
        if (e && e.target) {
            value = e.target.value;
            //处理掉千分位
            value = clearComma(value);
            //处理小数点的输入
            if (_.indexOf(value, '.') != _.lastIndexOf(value, '.')) {
                value = this._handlePoint(this.state.value, e.target.value);
            }
            //处理减号
            value = this._handleMinus(value);
            //处理0的输入
            value = this._handleZero(value);
        }
        this.setState({
            inputediting: this.state.inputediting,
            value: value
        }, function () {
            if (_.isFunction(self.props.onChange)) {
                var numVal = value;
                //如果onChange第一个参数为number类型将导致无法输入小数点
                if (value) {
                    numVal = _.toNumber(value);
                };
                self.props.onChange(value, numVal);
            }
        });
    },
    _handleFocus: function _handleFocus(e) {
        var value = this.state.value;
        //处理掉千分位

        value = clearComma(value);
        //标记为编辑进行时
        this.setState({ inputediting: true, value: value }, function () {
            if (_.isFunction(this.props.onFocus)) {
                this.props.onFocus(e);
            }
        });
    },
    _handleBlur: function _handleBlur(e) {
        var self = this;
        var decimal = this.props.decimal;
        var value = this.state.value;

        if (value) {
            value = formatUtils.formatNumber(value, decimal, 0); //保留小数位,注意不显示千分位
            value = _.toNumber(this._handleRange(value)); //数值限制范围
        }
        this.setState({ inputediting: false, value: value + '' }, function () {
            var numVal = value;
            if (_.isFunction(self.props.onChange)) {
                //失去焦点后才将值强转换为number，提供第二个参数确保同原本onChange参数列表一致
                if (value) {
                    numVal = _.toNumber(value);
                };
                self.props.onChange(value, numVal);
            }
            if (_.isFunction(this.props.onBlur)) {
                this.props.onBlur(e, value);
            }
        });
    },
    //清除内容
    _clickClear: function _clickClear(e) {
        this.setState({ inputediting: false, value: '' });
    },
    render: function render() {
        var _props3 = this.props,
            direction = _props3.direction,
            symbol = _props3.symbol,
            decimal = _props3.decimal,
            commaVisible = _props3.commaVisible;

        var cls = this.className() + (direction == 'right' ? ' text-right' : ''); //文本右对齐样式
        var value = this.state.value;
        var textValue = value;
        if (this.state.inputediting == false) {
            //非编辑进行时显示
            textValue = formatCurrency(value, { symbol: symbol, decimal: decimal, comma: commaVisible });
        } else {}
        return React.createElement(YYInput, _extends({}, this.props, {
            direction: null,
            step: null,
            type: 'text',
            className: cls,
            value: textValue,
            onKeyPress: this._handleKeyPress,
            onChange: this._handleChange,
            onFocus: this._handleFocus,
            onBlur: this._handleBlur,
            ref: 'inputCash',
            onClearClick: this._clickClear
        }));
    }
});
module.exports = YYInputCurrency;