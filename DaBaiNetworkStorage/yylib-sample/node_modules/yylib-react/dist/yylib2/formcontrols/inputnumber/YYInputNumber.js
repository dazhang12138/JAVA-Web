'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    InputNumber = _require.InputNumber;

var _require2 = require('react-dom'),
    findDOMNode = _require2.findDOMNode;

require('./index.less');
var YYInputCurrency = require('./YYInputCurrency');
var uiMetaFields = require('./uiMetaFields');
//定义META
var uiMeta = {
    name: 'inputnumber',
    fields: uiMetaFields
};

var YYInputNumber = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var _props = this.props,
            value = _props.value,
            defaultValue = _props.defaultValue;

        var value = value === null || value === undefined ? defaultValue : value;
        return {
            value: value
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultValue' in nextProps) {
            if (this.props.defaultValue != nextProps.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
        //value优先级高于defaultValue
        if ('value' in nextProps) {
            if (this.props.value != nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        }
    },
    _onChange: function _onChange(value) {
        var self = this;
        this.setState({ value: value }, function () {
            if (_.isFunction(self.props.onChange)) {
                self.props.onChange(value);
            }
        });
    },
    componentDidMount: function componentDidMount() {
        if (this.props.stepDisabled === true) {
            this.numHandler(true);
        }
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        if (prevProps.stepDisabled != this.props.stepDisabled) {
            this.numHandler(this.props.stepDisabled);
        }
    },
    numHandler: function numHandler(value) {
        var isVisible = value ? 'hidden' : 'visible';
        var inputnumber = this.refs.inputnumber;
        if (inputnumber) {
            var numHandler = findDOMNode(this.refs.inputnumber).querySelector('.ant-input-number-handler-wrap');
            numHandler.style.visibility = isVisible;
        }
    },
    //渲染前置后置内容
    renderLabledInput: function renderLabledInput(children) {
        var _props2 = this.props,
            addonBefore = _props2.addonBefore,
            addonAfter = _props2.addonAfter;

        var addonBeforeView = addonBefore ? React.createElement(
            'span',
            { className: 'ant-input-group-addon' },
            addonBefore
        ) : null;
        var addonAfterView = addonAfter ? React.createElement(
            'span',
            { className: 'ant-input-group-addon' },
            addonAfter
        ) : null;
        if (addonBefore || addonAfter) {
            return React.createElement(
                'span',
                { className: 'ant-input-wrapper ant-input-group' },
                addonBeforeView,
                children,
                addonAfterView
            );
        } else {
            return children;
        }
    },
    render: function render() {
        var _props3 = this.props,
            type = _props3.type,
            direction = _props3.direction;

        var cls = this.className() + (direction == 'right' ? ' text-right' : ''); //文本右对齐样式
        switch (type) {
            case 'number':
                {
                    var numView = React.createElement(InputNumber, _extends({}, this.props, { value: this.state.value, onChange: this._onChange, className: null, style: null, ref: 'inputnumber' }));
                    return React.createElement(
                        'div',
                        { className: cls, style: this.props.style },
                        this.renderLabledInput(numView)
                    );
                }
            case 'currency':
                {
                    return React.createElement(
                        YYInputCurrency,
                        this.props,
                        this.props.children
                    );
                }
        }
    }
});
module.exports = YYInputNumber;