'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require2 = require('antd'),
    Cascader = _require2.Cascader;

var _ = require('lodash');
var ajax = require('../../../utils/ajax');
//定义META
var uiMeta = {
    name: 'cascader',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('options', null, PropTypes.object, false, '本地数据项'), field('dataurl', null, PropTypes.string, false, '请求远程数据源的URL，注意当配置了dataurl时，options属性将失效'), field('dataparams', null, PropTypes.object, false, '请求远程数据时的自定义参数'), field('defaultValue', undefined, PropTypes.array, false, '默认的选中项'), field('value', undefined, PropTypes.array, false, '指定选中项'), field('style', {}, PropTypes.object, false, '自定义样式'), field('className', '', PropTypes.string, false, '自定义类名'), field('popupClassName', '', PropTypes.string, false, '自定义浮层类名'), field('placeholder', '请选择', PropTypes.string, false, '输入框占位文本'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '输入框大小'), field('disabled', false, PropTypes.bool, false, '禁用'), field('allowClear', true, PropTypes.bool, false, '是否支持清除'), field('changeOnSelect', false, PropTypes.bool, false, '当此项为 true 时，点选每级菜单选项值都会发生变化，具体见上面的演示'), field('popupPlacement', 'bottomLeft', PropTypes.oneOf(['bottomLeft', 'bottomRight', 'topLeft', 'topRight']), false, '浮层预设位置'), field('expandTrigger', 'click', PropTypes.oneOf(['click', 'hover']), false, '次级菜单的展开方式'), field('onChange', null, PropTypes.func, false, '选择完成后的回调'), field('displayRender', null, PropTypes.func, false, '选择后展示的渲染函数'), field('onChangeValueType', 'string', PropTypes.string, false, 'onChange或赋值时的取值类型，与options中的数据结构无关，options类型是数组对象; 在表单中默认是string，编辑表格中默认是object')]
};

var YYCascader = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            options: []
        };
    },
    componentDidMount: function componentDidMount() {
        var _props = this.props,
            dataurl = _props.dataurl,
            dataparams = _props.dataparams;

        this._requestData(dataurl, dataparams);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _props2 = this.props,
            dataurl = _props2.dataurl,
            dataparams = _props2.dataparams;

        if (nextProps.dataurl !== dataurl || !_.isEqual(nextProps.dataparams, dataparams)) {
            this._requestData(nextProps.dataurl, nextProps.dataparams);
        }
    },
    _requestData: function _requestData(dataurl, dataparams) {
        var _this = this;
        if (dataurl) {
            if (dataparams) {
                ajax.getJSON(dataurl, dataparams, function (result) {
                    _this.setState({ options: result });
                });
            } else {
                ajax.getJSON(dataurl, function (result) {
                    _this.setState({ options: result });
                });
            }
        }
    },
    handleKeyDown: function handleKeyDown(e) {
        var code = e.keyCode;
        var cascader = this.refs.cascader;
        if (code == 13) {
            cascader.setState({
                popupVisible: true
            });
        };
    },
    _treeToArr: function _treeToArr(options) {
        var _this2 = this;

        var optionArr = [];
        _.forEach(options, function (option) {
            if (_.isArray(option.children)) {
                optionArr.push(option);
                optionArr = optionArr.concat(_this2._treeToArr(option.children));
            } else {
                delete option.children;
                optionArr.push(option);
            }
        });
        return optionArr;
    },
    _onChange: function _onChange(value, selectOptions) {
        var _this3 = this;

        var onChangeValueType = this.props.onChangeValueType;

        var changeValue = [];
        var options = this.props.dataurl ? this.state.options : this.props.options;
        var optionArr = this._treeToArr(options);
        // var optionArr = this._treeToArr(_.cloneDeep(options))
        if (_.isArray(value)) {
            _.forEach(value, function (valueItem) {
                if (onChangeValueType == 'object') {
                    changeValue.push(_this3._findValueByPropKey(optionArr, valueItem));
                } else {
                    changeValue.push(valueItem);
                }
            });
        } else {
            changeValue = value;
        }

        if (_.isFunction(this.props.onChange)) {
            this.props.onChange(changeValue, selectOptions);
        }
    },
    _findValueByPropKey: function _findValueByPropKey(options, value) {
        var option = _.find(options, { 'value': value });
        // var { valueKey, textKey } = this.props
        // var option = _.find(options, [valueKey, value]);
        // var valueObj = {};
        // if(option){
        //     valueObj[valueKey] = option[valueKey];//键值
        //     valueObj[textKey] = option[textKey]//文本值
        // }
        return option;
    },
    render: function render() {
        var options = this.props.dataurl ? this.state.options : this.props.options;
        return React.createElement(
            'div',
            { className: this.className(), onKeyDown: this.handleKeyDown },
            React.createElement(
                Cascader,
                _extends({}, this.props, { options: options, ref: 'cascader', onChange: this._onChange }),
                this.props.children
            )
        );
    }
});

module.exports = YYCascader;