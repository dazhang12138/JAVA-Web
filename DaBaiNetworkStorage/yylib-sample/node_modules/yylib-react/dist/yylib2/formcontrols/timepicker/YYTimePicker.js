'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    TimePicker = _require.TimePicker;

require('./style/index.less');
//定义META
var uiMeta = {
    name: 'timepicker',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('defaultValue', new Date(), PropTypes.oneOf([PropTypes.string, PropTypes.instanceOf(Date)]), false, '初始默认时间'), field('value', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.instanceOf(Date)]), false, '默认时间'), field('placeholder', '请选择时间', PropTypes.string, false, '没有值的时候显示的内容'), field('onChange', null, PropTypes.func, false, '时间发生变化的回调'), field('format', 'HH:mm:ss', PropTypes.oneOf(['HH:mm:ss', 'HH:mm', 'mm:ss']), false, '展示的时间格式'), field('disabled', false, PropTypes.bool, false, '禁用全部操作'), field('disabledHours', null, PropTypes.func, false, '禁止选择部分小时选项'), field('disabledMinutes', null, PropTypes.func, false, '禁止选择部分分钟选项'), field('disabledSeconds', null, PropTypes.func, false, '禁止选择部分秒选项'), field('hideDisabledOptions', false, PropTypes.bool, false, '隐藏禁止选择的选项'), field('getPopupContainer', function () {
        return document.body;
    }, PropTypes.func, false, '定义浮层的容器，默认为 body 上新建 div'), field('locale', {}, PropTypes.object, false, '国际化配置')]
};

function getPopupContainer() {
    return document.body;
};
var YYTimePicker = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {};
    },
    render: function render() {
        return React.createElement(
            TimePicker,
            _extends({}, this.props, { className: this.className() }),
            this.props.children
        );
    }
});

module.exports = YYTimePicker;