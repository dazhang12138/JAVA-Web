'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 带按钮的文本输入框
 */
var React = require('react');

var _require = require('lodash'),
    isFunction = _require.isFunction,
    isString = _require.isString;

var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYInput = require('../input/YYInput');
var YYButton = require('../../button/YYButton');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'inputbutton',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', 'text', PropTypes.string, false, '声明 input 类型，同原生 input 标签的 type 属性。'), field('id', [], PropTypes.oneOf([PropTypes.string, PropTypes.number]), false, 'id'), field('value', undefined, PropTypes.any, false, 'value 值'), field('defaultValue', '', PropTypes.string, false, '设置初始默认值'), field('disabled', false, PropTypes.bool, false, '禁用'), field('addonBefore', '', PropTypes.node, false, '带标签的 input，设置前置标签 node'), field('addonAfter', '', PropTypes.node, false, '带标签的 input，设置后置标签  node'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '控件大小，默认值为 default'), field('onPressEnter', null, PropTypes.func, true, '按下回车的回调'), field('autosize', false, PropTypes.oneOf([PropTypes.bool, PropTypes.object]), false, '自适应内容高度，只对 type="textarea" 有效'), field('buttonClick', null, PropTypes.func, false, '按钮点击时的回调'), field('buttonText', null, PropTypes.string, false, '按钮显示的文本'), field('buttonIcon', 'search', PropTypes.string, false, '按钮显示的图标')]
};

var YYInputButton = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            value: this.props.value,
            size: this.props.size,
            buttonClick: this.props.buttonClick,
            buttonText: this.props.buttonText,
            buttonIcon: this.props.buttonIcon
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(props) {
        if ('value' in props) {
            this.setState({ value: props.value });
        }
        if ('size' in props) {
            this.setState({ size: props.size });
        }
        if ('buttonClick' in props) {
            this.setState({ buttonClick: props.buttonClick });
        }
        if ('buttonText' in props) {
            this.setState({ buttonText: props.buttonText });
        }
        if ('buttonIcon' in props) {
            this.setState({ buttonIcon: props.buttonIcon });
        }
    },
    //输入值变更时的回调
    _handInputChange: function _handInputChange(e) {
        this.setState({ value: e && e.target ? e.target.value : '' }, function () {
            if (isFunction(this.props.onChange)) {
                this.props.onChange(e, this.state.value);
            }
        });
    },
    //按钮点击的回调
    _handButtonClick: function _handButtonClick() {
        if (isFunction(this.props.buttonClick)) {
            this.props.buttonClick(this.state.value);
        }
    }
    //构建按钮
    , _getButton: function _getButton() {
        var btnView = null;
        //是否存在按钮文本
        if (isString(this.state.buttonText)) {
            btnView = React.createElement(
                YYButton,
                { disabled: this.props.disabled, size: this.state.size, onClick: this._handButtonClick, icon: this.state.buttonIcon },
                this.state.buttonText
            );
        } else {
            btnView = React.createElement(YYButton, { disabled: this.props.disabled, size: this.state.size, onClick: this._handButtonClick, icon: this.state.buttonIcon });
        }
        return btnView;
    },
    render: function render() {
        var cls = this.className() + " " + this.state.size;
        var btnView = this._getButton();
        return React.createElement(
            'div',
            { className: cls, style: this.props.style },
            React.createElement(YYInput, _extends({}, this.props, { className: null, style: null, value: this.state.value, size: this.state.size, onChange: this._handInputChange })),
            btnView
        );
    }
});
module.exports = YYInputButton;