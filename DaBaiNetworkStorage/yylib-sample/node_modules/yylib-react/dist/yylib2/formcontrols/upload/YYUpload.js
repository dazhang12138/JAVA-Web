'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Upload = _require.Upload;

require('./style/index.less');
var _ = require('lodash');
var AuthToken = require('../../../utils/AuthToken');
//定义META
var uiMeta = {
    name: 'upload',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('name', 'file', PropTypes.string, false, '上传的文件'), field('defaultFileList', [], PropTypes.array, false, '可选参数，默认已经上传的文件列表'), field('fileList', undefined, PropTypes.array, false, '可选参数，已经上传的文件列表'), field('action', '', PropTypes.string, true, '必选参数, 上传的地址'), field('data', null, PropTypes.oneOf([PropTypes.object, PropTypes.func]), false, '可选参数, 上传所需参数或返回上传参数的方法'), field('headers', null, PropTypes.object, false, '可选参数, 设置上传的请求头部，IE10 以上有效'), field('showUploadList', true, PropTypes.bool, false, '可选参数, 是否展示 uploadList'), field('multiple', false, PropTypes.bool, false, '可选参数, 是否支持多选文件，ie10+ 支持。开启后按住 ctrl 可选择多个文件。'), field('accept', '', PropTypes.string, true, '可选参数, 接受上传的文件类型, 详见 input accept Attribute'), field('beforeUpload', null, PropTypes.func, false, '可选参数, 上传文件之前的钩子，参数为上传的文件，若返回 false 或者 Promise 则停止上传。注意：该方法不支持老 IE。 '), field('onChange', null, PropTypes.func, false, '可选参数, 上传文件改变时的状态，详见 onChange'), field('listType', 'text', PropTypes.string, false, '上传列表的内建样式，支持两种基本样式 text or picture '), field('onPreview', null, PropTypes.func, false, '点击文件链接时的回调'), field('onRemove', null, PropTypes.func, false, '点击移除文件时的回调'), field('supportServerRender', false, PropTypes.bool, false, '服务端渲染时需要打开这个')]
};

var YYUpload = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        Dragger: Upload.Dragger
    },
    getInitialState: function getInitialState() {
        return {};
    },
    _getDefaultHeaders: function _getDefaultHeaders() {
        var headers = {};
        //注册权限头部信息
        if (AuthToken.getAuthenticationStr()) {
            headers.authority = AuthToken.getAuthenticationStr();
        }
        headers = _.assign(headers, this.props.headers);
        return headers;
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                Upload,
                _extends({}, this.props, { headers: this._getDefaultHeaders() }),
                this.props.children
            )
        );
    }
});
module.exports = YYUpload;