'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYInput = require('../input/YYInput');
require('../input/style/index.less');
//定义META
var uiMeta = {
    name: 'textarea',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('id', [], PropTypes.oneOf([PropTypes.string, PropTypes.number]), false, 'id'), field('value', undefined, PropTypes.any, false, 'value 值'), field('defaultValue', '', PropTypes.string, false, '设置初始默认值'), field('disabled', false, PropTypes.bool, false, '禁用'), field('addonBefore', '', PropTypes.node, false, '带标签的 input，设置前置标签 node'), field('addonAfter', '', PropTypes.node, false, '带标签的 input，设置后置标签  node'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '控件大小，默认值为 default'), field('onPressEnter', null, PropTypes.func, true, '按下回车的回调'), field('autosize', false, PropTypes.oneOf([PropTypes.bool, PropTypes.object]), false, '自适应内容高度，只对 type="textarea" 有效')]
};

var YYTextarea = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        return React.createElement(
            YYInput,
            _extends({}, this.props, { type: 'textarea' }),
            this.props.children
        );
    }
});
module.exports = YYTextarea;