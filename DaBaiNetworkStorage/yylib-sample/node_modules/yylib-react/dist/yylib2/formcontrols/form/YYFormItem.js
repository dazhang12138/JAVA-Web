'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var _ = require('lodash');

var _require = require('antd'),
    Form = _require.Form;

var FormItem = Form.Item;
var YYIcon = require('../../icon/YYIcon');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'formitem',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('label', '', PropTypes.oneOf([PropTypes.string, PropTypes.element]), false, 'label 标签的文本'), field('labelHelp', undefined, PropTypes.string, false, 'label标签的悬浮帮助提示信息'), field('labelHelpPlacement', undefined, PropTypes.string, false, 'label标签的悬浮帮助提示信息位置定义'), field('labelCol', {}, PropTypes.object, false, 'label 标签布局，通 <Col> 组件，设置 span offset 值，如 {span: 3, offset: 12}'), field('wrapperCol', {}, PropTypes.object, false, '需要为输入控件设置布局样式时，使用该属性，用法同 labelCol'), field('help', undefined, PropTypes.string, false, '提示信息，如不设置，则会根据校验规则自动生成 '), field('extra', undefined, PropTypes.string, false, '额外的提示信息，和 help 类似，当需要错误信息和提示文案同时出现时，可以使用这个。   '), field('required', undefined, PropTypes.bool, false, '是否必填，如不设置（即为undefined），则会根据校验规则自动生成'), field('validateStatus', undefined, PropTypes.oneOf(['success', 'warning', 'error', 'validating']), false, '浮层预设位置'), field('hasFeedback', false, PropTypes.bool, false, '配合 validateStatus 属性使用，展示校验状态图标，建议只配合 Input 组件使用   '), field('prefixCls', 'ant-form', PropTypes.string, false, '样式类名'), field('visible', undefined, PropTypes.bool, false, '是否隐藏当前项目')]
};

var YYFormItem = YYClass.create({
    uiMeta: uiMeta,
    _getLabel: function _getLabel() {
        //提供悬浮提示信息
        if (this.props.labelHelp) {
            return React.createElement(
                'span',
                null,
                React.createElement(YYIcon, { type: 'question-circle-o', title: this.props.labelHelp, placement: this.props.labelHelpPlacement, style: { paddingRight: 3 } }),
                this.props.label
            );
        } else {
            return this.props.label;
        }
    },
    render: function render() {
        var style = _.assign({}, this.props.style);
        if (this.props.visible == false) {
            style.display = 'none';
        }
        return React.createElement(
            FormItem,
            _extends({}, this.props, { label: this._getLabel(), className: this.className(), style: style }),
            this.props.children
        );
    }
});

module.exports = YYFormItem;