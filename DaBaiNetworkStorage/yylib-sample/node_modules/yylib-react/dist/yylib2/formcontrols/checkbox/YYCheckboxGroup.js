'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Checkbox = _require.Checkbox;

var CheckboxGroup = Checkbox.Group;
var _ = require('lodash');

var uiMeta = {
    name: 'checkboxgroup',
    fields: [,
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('defaultValue', [], PropTypes.array, false, '默认的选中项'), field('value', undefined, PropTypes.array, false, '指定选中的选项'), field('options', undefined, PropTypes.array, false, '指定可选项'), field('onChange', null, PropTypes.func, true, '变化时回调函数')]
};

var YYCheckboxGroup = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var _props = this.props,
            value = _props.value,
            defaultValue = _props.defaultValue;

        return { value: value !== undefined ? value : defaultValue };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultValue' in nextProps) {
            if (this.props.defaultValue != nextProps.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
        //value优先级高于defaultValue
        if ('value' in nextProps) {
            if (this.props.value != nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        }
    },
    _onChange: function _onChange(values) {
        var self = this;
        this.setState({ value: values }, function () {
            if (_.isFunction(self.props.onChange)) {
                self.props.onChange(values);
            }
        });
    },
    render: function render() {
        var options = [];
        var children = this.props.children;
        var _this = this;
        if (children && children.length) {
            _.forEach(children, function (child) {
                if (React.isValidElement(child)) {
                    options.push({
                        label: child.props.children,
                        value: child.props.value,
                        disabled: child.props.disabled ? child.props.disabled : _this.props.disabled
                    });
                }
            });
        } else {
            options = this.props.options;
        }
        return React.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            React.createElement(CheckboxGroup, _extends({}, this.props, { style: null, value: this.state.value, options: options, onChange: this._onChange }))
        );
    }
});
module.exports = YYCheckboxGroup;