'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Select = _require.Select;

var YYMessage = require('../../message/YYMessage');
var ajax = require('../../../utils/ajax');
require('./style/index.less');
var _ = require('lodash');
var uiMeta = {
    name: 'select',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('dataurl', null, PropTypes.string, false, '远程数据Url，注意:当配置此属性时，本地数据源即item、children属性将失效'), field('dataparams', null, PropTypes.string, false, '请求数据时的自定义参数'), field('multiple', false, PropTypes.bool, false, '支持多选'), field('allowClear', false, PropTypes.bool, false, '支持清除, 单选模式有效'), field('tags', false, PropTypes.bool, false, '可以把随意输入的条目作为 tag，输入项不需要与下拉选项匹配'), field('dropdownMatchSelectWidth', true, PropTypes.bool, false, '下拉菜单和选择器同宽'), field('combobox', false, PropTypes.bool, false, '输入框自动提示模式'), field('searchUrl', null, PropTypes.string, false, '当combobox为true时，提供搜索url支持输入远程搜索结果进行自动提示'), field('onSearchParams', null, PropTypes.func, false, '当combobox为true时，并且提供了searchUrl，需要自定义传递参数时使用此回调'), field('showSearch', false, PropTypes.bool, false, '在选择框中显示搜索框'), field('disabled', false, PropTypes.bool, false, '是否禁用'), field('defaultActiveFirstOption', false, PropTypes.bool, false, '是否默认高亮第一个选项')
    // ,field('labelInValue',false,PropTypes.bool,false,'是否把每个选项的 label 包装到 value 中，决定 Select 的 value 类型')
    , field('onSelect', null, PropTypes.func, false, '被选中时调用，参数为选中项的 value 值'), field('onDeselect', null, PropTypes.func, false, '取消选中时调用，参数为选中项的 option value 值，仅在 multiple 或 tags 模式下生效'), field('onChange', null, PropTypes.func, false, '选中 option，或 input 的 value 变化（combobox 模式下）时，调用此函数'), field('onSearch', null, PropTypes.func, false, '文本框值变化时回调'), field('onShowFilter', null, PropTypes.func, false, '自定义函数过滤出允许显示到下拉列表的项目,传递参数options,注意return允许显示的下拉项数组'), field('value', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.array]), false, '指定当前选中的条目'), field('defaultValue', undefined, PropTypes.oneOf([PropTypes.string, PropTypes.array]), false, '指定当前选中的条目'), field('filterOption', undefined, PropTypes.oneOf([PropTypes.bool, PropTypes.func]), false, '是否根据输入项进行筛选。当其为一个函数时，会接收 inputValue option 两个参数，当 option 符合筛选条件时，应返回 true，反之则返回 false。'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '选择框大小，可选 large small'), field('placeholder', '', PropTypes.string, false, '选择框默认文字'), field('notFoundContent', '暂无相关数据', PropTypes.string, false, '当下拉列表为空时显示的内容')
    //,field('optionFilterProp',undefined,PropTypes.string,false,'搜索时过滤对应的 option 属性，如设置为 children 表示对内嵌内容进行搜索')
    //,field('optionLabelProp',undefined,PropTypes.string,false,'选择框回填到选择框的 Option 的属性值，默认是 Option 的子元素。比如在子元素需要高亮效果时，此值可以设为 value默认文字')
    , field('getPopupContainer', function () {
        return document.body;
    }, PropTypes.func, false, '菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位'), field('items', null, PropTypes.array, false, '存放下拉菜单option的本地数据源，注意：当存在dataurl时，此属性失效'), field('valueType', 'string', PropTypes.string, false, '值类型string, object'), field('valueKey', 'value', PropTypes.string, false, '指定下拉选项的value取值'), field('textKey', 'text', PropTypes.string, false, '指定下拉选项的text取值'), field('propKey', null, PropTypes.oneOf([PropTypes.string, PropTypes.array]), false, '需要加到对象value里的其它属性')]
};
var YYSelect = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        //Option:Select.Option,
        OptGroup: Select.OptGroup
    },
    getInitialState: function getInitialState() {
        var _props = this.props,
            value = _props.value,
            defaultValue = _props.defaultValue,
            items = _props.items;

        var value = value === null || value === undefined ? defaultValue : value;
        return {
            value: value,
            items: items
        };
    },
    componentDidMount: function componentDidMount() {
        var _props2 = this.props,
            dataurl = _props2.dataurl,
            dataparams = _props2.dataparams;

        this._requestData(dataurl, dataparams);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var _props3 = this.props,
            dataurl = _props3.dataurl,
            dataparams = _props3.dataparams,
            items = _props3.items;

        if ('defaultValue' in nextProps) {
            if (this.props.defaultValue != nextProps.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
        //value优先级高于defaultValue
        if ('value' in nextProps) {
            if (this.props.value != nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        }
        //存在dataurl时，本地数据源items失效
        if (dataurl || nextProps.dataurl) {
            if (nextProps.dataurl !== dataurl || !_.isEqual(nextProps.dataparams, dataparams)) {
                this._requestData(nextProps.dataurl, nextProps.dataparams);
            }
        } else {
            if ('items' in nextProps) {
                this.setState({ items: nextProps.items });
            }
        }
    },
    _requestData: function _requestData(dataurl, dataparams) {
        var _this = this;
        if (dataurl) {
            ajax.getJSON(dataurl, dataparams, function (result) {
                if (result && result.success) {
                    _this.setState({
                        items: result.backData ? result.backData : []
                    });
                } else {
                    _this.setState({
                        items: null
                    });
                    YYMessage.error(result.backMsg);
                }
            });
        }
    }
    //自动提示搜索
    , _onSearch: function _onSearch(value) {
        var that = this;
        var _props4 = this.props,
            combobox = _props4.combobox,
            searchUrl = _props4.searchUrl,
            onSearchParams = _props4.onSearchParams;

        if (combobox) {
            clearTimeout(that._searchTimeOut);
            that._searchTimeOut = setTimeout(function () {
                that._requestSearchData(value, searchUrl, onSearchParams);
            }, 500);
        }
        if (_.isFunction(that.props.onSearch)) {
            that.props.onSearch(value);
        }
    }
    //执行搜索数据
    , _requestSearchData: function _requestSearchData(searchText, searchUrl, onSearchParams) {
        var _this = this;
        if (searchUrl) {
            var _searchParams = _.assign({ searchText: searchText });
            if (typeof onSearchParams == 'function') {
                _searchParams = onSearchParams(_searchParams);
            }
            ajax.getJSON(searchUrl, _searchParams, function (result) {
                var resultItems = [{ "text": searchText, "value": searchText }];
                if (result && result.success) {
                    _this.setState({
                        items: result.backData ? resultItems.concat(result.backData) : resultItems
                    });
                } else {
                    _this.setState({
                        items: resultItems
                    });
                    YYMessage.error(result.backMsg);
                }
            });
        }
    },
    _onChange: function _onChange(value) {
        var that = this;
        var _props5 = this.props,
            multiple = _props5.multiple,
            valueType = _props5.valueType,
            children = _props5.children;

        var items = this.state.items;
        var changeValue = value;
        if (valueType == 'object') {
            //对象类型值
            if (multiple) {
                //多选模式
                changeValue = _.map(value, function (val) {
                    return that._findValueByPropKey(val, items, children);
                }); // 返回[object, object]
            } else {
                //单选模式
                changeValue = that._findValueByPropKey(value, items, children); //返回object
            }
        } else {
            //字符串类型值
            changeValue = value; // 返回['', ''] 或 ''
        }
        //当allowClear=true时，清除value为undefined
        var changeValue = changeValue == undefined ? '' : changeValue;
        this.setState({ value: changeValue }, function () {
            if (_.isFunction(that.props.onChange)) {
                that.props.onChange(changeValue);
            }
        });
    }
    //通过键值字符串，查找返回对应的类型值
    , _findValueByPropKey: function _findValueByPropKey(value, items, children) {
        var _props6 = this.props,
            valueKey = _props6.valueKey,
            textKey = _props6.textKey,
            propKey = _props6.propKey;

        var extProps = _.isArray(propKey) ? propKey : [propKey];
        if (!propKey) extProps = [];
        // 优先取items， items为空则从children中取
        if (items == null) {
            var options = [];
            _.forEach(children, function (child) {
                var option = {};
                option[valueKey] = child.props.value; //键值
                option[textKey] = child.props.children; //文本值
                _.forEach(extProps, function (key) {
                    //其它属性值
                    option[key] = child.props[key];
                });
                options.push(option);
            });
            return _.find(options, [valueKey, value]);
        } else {
            var option = _.find(items, [valueKey, value]);
            var valueObj = {};
            if (option) {
                valueObj[valueKey] = option[valueKey]; //键值
                valueObj[textKey] = option[textKey]; //文本值
                _.forEach(extProps, function (key) {
                    //其它属性值
                    valueObj[key] = option[key];
                });
            }
            return valueObj;
        }
    }
    //构建内部标准的option的json对象
    , _getOptionObjs: function _getOptionObjs(items) {
        var options = [];
        var _props7 = this.props,
            valueKey = _props7.valueKey,
            textKey = _props7.textKey;

        if (_.isArray(items)) {
            _.forEach(items, function (item, index) {
                var optionValue,
                    optionKey,
                    optionText,
                    optionTitle,
                    optionProps = {};
                if (React.isValidElement(item)) {
                    //把YYOption对象，转换为Select.Option对象
                    optionProps = item.props;
                    optionValue = item.props.value;
                    optionKey = item.key;
                    optionText = item.props.children;
                    if (item.props[valueKey] != undefined) optionValue = item.props[valueKey];
                    if (item.props[textKey] != undefined) optionText = item.props[textKey];
                    optionTitle = item.props.title != undefined ? item.props.title : optionText;
                } else {
                    //简单的json数据对象
                    optionProps = item;
                    optionValue = item.value;
                    optionKey = item.key;
                    optionText = item.children;
                    if (item[valueKey] != undefined) optionValue = item[valueKey];
                    if (item[textKey] != undefined) optionText = item[textKey];
                    optionTitle = item.title != undefined ? item.title : optionText;
                }
                //内部标准option的json对象格式
                options.push({
                    props: optionProps,
                    key: optionKey,
                    value: optionValue,
                    title: optionTitle,
                    text: optionText
                });
            });
        }
        if (typeof this.props.onShowFilter == 'function') {
            var showOptions = this.props.onShowFilter(options);
            if (_.isArray(showOptions)) {
                //返回结果为数组则使用返回的结果
                options = showOptions;
            }
        }
        return options;
    }
    //依据内部标准的option的json对象构建Option视图组件
    , _getOptionViews: function _getOptionViews() {
        //items不存在则获取children
        var optionObjs = this._getOptionObjs(this.state.items == null ? this.props.children : this.state.items);
        var optionViews = _.map(optionObjs, function (option) {
            var props = option.props,
                key = option.key,
                value = option.value,
                title = option.title,
                text = option.text;

            return React.createElement(
                Select.Option,
                _extends({}, props, { key: key ? key : 'select_option_' + YYClass.uuid(), value: value, title: title }),
                text
            );
        });
        return optionViews;
    }
    //获取antd的下拉列表需要的值
    , _getSelectValue: function _getSelectValue(value) {
        var _props8 = this.props,
            multiple = _props8.multiple,
            valueType = _props8.valueType,
            valueKey = _props8.valueKey;

        var selectValue;
        if (multiple) {
            //多选模式
            value = value != undefined ? value : []; //值不存在则设置默认空值
            if (!_.isArray(value)) {
                // console.warn('多选模式下值必须为array类型');
                selectValue = [];
                if (_.isPlainObject(value)) {
                    value = value[valueKey]; //兼容处理
                } else {
                    value = value;
                }
                selectValue.push(value); //兼容处理(多选模式下,value值不是数组的兼容处理)
            } else {
                if (valueType == 'object') {
                    //对象类型值
                    //把value转成['xxx','xxx','xxx']的格式
                    selectValue = _.map(value, function (val) {
                        if (_.isPlainObject(val)) {
                            return val[valueKey];
                        } else {
                            return val; //兼容处理
                        }
                    });
                } else if (valueType == "string") {
                    //字符串类型值
                    if (_.isPlainObject(value)) {
                        selectValue = value[valueKey]; //兼容处理
                    } else {
                        selectValue = value;
                    }
                }
            }
        } else {
            //单选模式
            value = value != undefined ? value : ''; //值不存在则设置默认空值
            if (valueType == 'object') {
                //对象类型值
                if (_.isPlainObject(value)) {
                    selectValue = value[valueKey];
                } else {
                    selectValue = value;
                }
            } else if (valueType == "string") {
                //字符串类型值
                if (_.isPlainObject(value)) {
                    selectValue = value[valueKey]; //兼容处理
                } else {
                    selectValue = value;
                }
            }
        }
        return selectValue;
    },
    render: function render() {
        var optionViews = this._getOptionViews();
        var selectValue = this._getSelectValue(this.state.value);
        //存在下拉项，但是值不存在，并且配置了默认激活首项，则设置值为第一个下拉项的值
        if ((!selectValue || selectValue.length == 0) && optionViews && optionViews.length > 0 && this.props.defaultActiveFirstOption == true) {
            selectValue = this.props.multiple ? [optionViews[0].props.value] : optionViews[0].props.value;
            //默认选中首项时触发onChange，解决表单默认首选取不到值的问题
            if (_.isFunction(this._onChange)) {
                this._onChange(selectValue);
            }
        }
        return React.createElement(
            Select,
            _extends({}, this.props, { items: null,
                labelInValue: false,
                optionFilterProp: 'children',
                optionLabelProp: 'children',
                className: this.className(),
                onChange: this._onChange,
                onSearch: this._onSearch,
                value: selectValue,
                children: null }),
            optionViews
        );
    }
});
module.exports = YYSelect;