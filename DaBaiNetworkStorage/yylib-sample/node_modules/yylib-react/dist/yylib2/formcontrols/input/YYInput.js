'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Input = _require.Input;

var _require2 = require('lodash'),
    isFunction = _require2.isFunction;

var _require3 = require('react-dom'),
    findDOMNode = _require3.findDOMNode;

var YYIcon = require('../../icon/YYIcon');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'input',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', 'text', PropTypes.string, false, '声明 input 类型，同原生 input 标签的 type 属性。'), field('id', [], PropTypes.oneOf([PropTypes.string, PropTypes.number]), false, 'id'), field('value', undefined, PropTypes.any, false, 'value 值'), field('style', undefined, PropTypes.any, false, '组件的style样式'), field('inputStyle', undefined, PropTypes.any, false, '原始input的style样式'), field('defaultValue', '', PropTypes.string, false, '设置初始默认值'), field('disabled', false, PropTypes.bool, false, '禁用'), field('addonBefore', undefined, PropTypes.node, false, '带标签的 input，设置前置标签 node'), field('addonAfter', undefined, PropTypes.node, false, '带标签的 input，设置后置标签  node'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '控件大小，默认值为 default'), field('onPressEnter', null, PropTypes.func, true, '按下回车的回调'), field('disableClear', false, PropTypes.func, false, '是否禁用文本清除'), field('onClearClick', null, PropTypes.func, false, '文本框清除后的回调'), field('autosize', false, PropTypes.oneOf([PropTypes.bool, PropTypes.object]), false, '自适应内容高度，只对 type="textarea" 有效'), field('maxLength', undefined, PropTypes.oneOf([PropTypes.stringbool, PropTypes.number]), false, '可输入字符长度')]
};

var YYInput = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        Group: Input.Group
    },
    getInitialState: function getInitialState() {
        return {
            value: this.props.value
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ("value" in nextProps) {
            this.setState({
                value: nextProps.value
            });
        }
    },
    componentDidUpdate: function componentDidUpdate() {
        var _props = this.props,
            addonAfter = _props.addonAfter,
            addonBefore = _props.addonBefore,
            disabled = _props.disabled;

        var value = this.state.value;
        if (value && addonAfter && !disabled) {
            var index = addonBefore ? 1 : 0;
            var parentNode = findDOMNode(this.refs.input).parentNode;
            var addonAfterWidth = findDOMNode(this.refs.input).getElementsByClassName('ant-input-group-addon')[index].clientWidth;
            var clearEle = parentNode.querySelector('.yyui-input-clear');
            if (clearEle) {
                if (!clearEle.style) {
                    clearEle.style = {};
                }
                clearEle.style.marginRight = addonAfterWidth + 'px';
            }
        }
    },
    handleChange: function handleChange(e) {
        this.setState({
            value: e && e.target ? e.target.value : ''
        });
        if (this.props.onChange) {
            this.props.onChange(e);
        }
    },
    clearValue: function clearValue(e) {
        e.preventDefault();
        e.stopPropagation();
        var obj = { target: { value: '' } };
        this.handleChange(obj);
        if (isFunction(this.props.onClearClick)) {
            this.props.onClearClick(e);
        }
    },
    render: function render() {
        var value = this.state.value;
        var _props2 = this.props,
            disabled = _props2.disabled,
            disableClear = _props2.disableClear;

        var clearIcon = disableClear != true && !disabled && value ? React.createElement(YYIcon, {
            type: 'cross-circle',
            className: this.className('clear'),
            onClick: this.clearValue
        }) : null;
        return React.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            React.createElement(
                Input,
                _extends({ title: value }, this.props, {
                    className: null,
                    style: this.props.inputStyle ? this.props.inputStyle : null,
                    onChange: this.handleChange,
                    value: value,
                    ref: 'input' }),
                this.props.children
            ),
            clearIcon
        );
    }
});
module.exports = YYInput;