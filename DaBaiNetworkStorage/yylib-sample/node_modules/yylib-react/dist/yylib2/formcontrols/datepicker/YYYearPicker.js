'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _zh_CN = require('rc-calendar/lib/locale/zh_CN');

var _zh_CN2 = _interopRequireDefault(_zh_CN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*** by zhangzhzhc 2017/04/11
*** 年选择控件，基于YYYearCalendar、Trigger封装
**/
var React = require('react');
var Trigger = require('rc-trigger');
var _ = require('lodash');
var RcDatePicker = require('rc-calendar/lib/Picker');
var YYClass = require('../../base/YYClass');
var YYInput = require('../input/YYInput');
var YYYearCalendar = require('./YYYearCalendar');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

require('./style/index.less');
var uiMeta = {
    name: 'yearpicker',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('value', undefined, PropTypes.string, false, '年份值'), field('defaultValue', '', PropTypes.string, false, '默认年份'), field('placeholder', '请选择年份', PropTypes.string, false, '空内容时的提示信息'), field('onChange', null, PropTypes.func, true, '时间发生变化的回调'), field('disabled', false, PropTypes.bool, false, '禁用'), field('style', undefined, PropTypes.object, false, '自定义输入框样式'), field('popupStyle', undefined, PropTypes.object, false, '格外的弹出日历样式'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '输入框大小')
    //,field('locale',{},PropTypes.object,false,'国际化配置')
    ]
};
var YYYearPicker = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var props = this.props;
        return {
            open: false, //是否显示
            current: null,
            value: props.value || props.defaultValue
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('value' in nextProps) {
            this.setState({
                value: nextProps.value || nextProps.defaultValue
            });
        }
    },
    onPopupVisibleChange: function onPopupVisibleChange(open) {
        this.setState({ open: open });
    },
    //选择年调用
    onSelectYear: function onSelectYear(current) {
        if (current) {
            var value = current.getYear();
            this.setState({
                value: value,
                current: current,
                open: false
            });
            if (_.isFunction(this.props.onChange)) {
                this.props.onChange(value);
            }
        }
    },
    //清除年份
    _onClearClick: function _onClearClick(e) {
        this.setState({
            value: '',
            current: null
        });
        if (_.isFunction(this.props.onChange)) {
            this.props.onChange();
        }
    },
    render: function render() {
        var props = this.props;
        var state = this.state;
        var popup = React.createElement(YYYearCalendar, { value: this.state.current, locale: _zh_CN2.default, onSelect: this.onSelectYear });
        var inputProps = {
            disabled: props.disabled,
            style: props.style,
            size: props.size,
            value: state.value
        };
        return React.createElement(
            Trigger,
            {
                action: props.disabled ? [] : ['click'],
                popupAlign: { points: ['tl', 'bl'] },
                destroyPopupOnHide: true,
                onPopupVisibleChange: this.onPopupVisibleChange,
                popup: popup,
                getPopupContainer: props.getCalendarContainer,
                popupStyle: props.popupStyle,
                popupVisible: state.open },
            React.createElement(
                'div',
                { className: this.className() },
                React.createElement(
                    'span',
                    { className: 'ant-calendar-picker' },
                    React.createElement(YYInput, _extends({}, inputProps, { readOnly: true, onClearClick: this._onClearClick })),
                    React.createElement('span', { className: 'ant-calendar-picker-icon' })
                )
            )
        );
    }
});
module.exports = YYYearPicker;