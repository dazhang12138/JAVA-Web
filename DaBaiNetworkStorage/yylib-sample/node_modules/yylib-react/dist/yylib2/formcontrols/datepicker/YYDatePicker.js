'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var YYClass = require('../../base/YYClass');
var YYMounthPicker = require('./YYMonthPicker');
var YYYearPicker = require('./YYYearPicker');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require2 = require('antd'),
    DatePicker = _require2.DatePicker;

require('./style/index.less');
var uiMeta = {
    name: 'datepicker',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('value', undefined, PropTypes.oneOf([PropTypes.string], PropTypes.instanceOf(Date)), false, '日期'), field('defaultValue', '', PropTypes.oneOf([PropTypes.string, PropTypes.instanceOf(Date)]), false, '默认日期'), field('format', "yyyy-MM-dd", PropTypes.string, false, '展示的日期格式，如需只选择月份配置yyyy-MM或yyyy/MM，如只需选择年份配置yyyy。'), field('disabledDate', null, PropTypes.func, true, '不可选择的日期'), field('onChange', null, PropTypes.func, true, '时间发生变化的回调'), field('disabled', false, PropTypes.bool, false, '禁用'), field('style', {}, PropTypes.object, false, '自定义输入框样式'), field('popupStyle', {}, PropTypes.object, false, '格外的弹出日历样式'), field('size', 'default', PropTypes.oneOf(['large', 'default', 'small']), false, '输入框大小'), field('locale', {}, PropTypes.object, false, '国际化配置'), field('toggleOpen', null, PropTypes.func, true, '弹出日历和关闭日历的回调'), field('getCalendarContainer', null, PropTypes.func, true, '定义浮层的容器，默认为 body 上新建 div'), field('showTime', '', PropTypes.oneOf([PropTypes.object, PropTypes.bool]), false, '增加时间选择功能')]
};

var YYDatePicker = YYClass.create({
    uiMeta: uiMeta
    //,statics:{
    //    MonthPicker:DatePicker.MonthPicker,
    //    RangePicker:DatePicker.RangePicker
    //}
    , getInitialState: function getInitialState() {
        var open = false;
        var props = this.props;
        if ('open' in props) {
            open = props.open;
        }
        return { open: open };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('open' in nextProps) {
            this.setState({ open: nextProps.open });
        }
    },
    toggleOpen: function toggleOpen(open) {
        // this.setState({open: open});
        this.setState({ open: open.open });
        if (this.props.toggleOpen) {
            this.props.toggleOpen(open);
        }
    },
    simulateClick: function simulateClick(event) {
        if (event.keyCode !== 9) {
            //tab键
            var evt = new MouseEvent("click", {
                bubbles: true,
                cancelable: true,
                view: window
            });
            findDOMNode(this).querySelector('.ant-calendar-range-picker').dispatchEvent(evt);
        }
    },
    handleChange: function handleChange(date, dateString) {
        //输入合法或为空时调用
        this.setState({ open: false }); //点击日期或输入合法时
        if (this.props.onChange) {
            this.props.onChange(date, dateString);
        }
    }
    //只选月份
    , _isOnlyMonth: function _isOnlyMonth() {
        var isMonth = /^[y|Y]{1,4}.[m/M]{1,2}$/.test(this.props.format);
        return isMonth;
    }
    //只选年份
    , _isOnlyYear: function _isOnlyYear() {
        var isYear = /^[y|Y]{1,4}$/.test(this.props.format);
        return isYear;
    },
    render: function render() {
        if (this._isOnlyMonth()) {
            //只选择月份
            return React.createElement(YYMounthPicker, this.props);
        } else if (this._isOnlyYear()) {
            //只选择年份
            return React.createElement(YYYearPicker, this.props);
        } else {
            //选择日期时间
            return React.createElement(
                'div',
                { onKeyDown: this.simulateClick, className: this.className() },
                React.createElement(
                    DatePicker,
                    _extends({ ref: 'datepicker' }, this.props, { toggleOpen: this.toggleOpen, open: this.state.open, onChange: this.handleChange }),
                    this.props.children
                )
            );
        }
    }
});
module.exports = YYDatePicker;