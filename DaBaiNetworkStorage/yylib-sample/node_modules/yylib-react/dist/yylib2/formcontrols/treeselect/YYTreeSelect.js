'use strict';

var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    TreeSelect = _require.TreeSelect;

var TreeNode = TreeSelect.TreeNode;
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'treeselect',
    fields: [field('multiple', false, PropTypes.bool, false, '是否支持多选'), field('value', undefined, PropTypes.string, false, '指定当前选中的条目'), field('treeNodeFilterProp', 'value', PropTypes.string, false, '输入项过滤对应的 treeNode 属性'), field('treeNodeLabelProp', 'title', PropTypes.string, false, '作为显示的prop设置'), field('defaultValue', undefined, PropTypes.oneOf(PropTypes.string, PropTypes.array), false, '指定默认选中的条目'), field('labelInValue', false, PropTypes.bool, false, '是否把 label 嵌入到 value 里，设置后参考以上 value 类型写法'), field('showSearch', false, PropTypes.bool, false, '在下拉中显示搜索框(仅在单选模式下生效)'), field('disabled', false, PropTypes.bool, false, '是否禁用'), field('treeCheckable', false, PropTypes.bool, false, '显示checkbox'), field('treeCheckStrictly', false, PropTypes.bool, false, 'checkable状态下节点选择完全受控（父子节点选中状态不再关联）'), field('treeDefaultExpandAll', false, PropTypes.bool, false, '默认展开所有树节点'), field('placeholder', '', PropTypes.string, false, '选择框默认文字'), field('searchPlaceholder', '', PropTypes.string, false, '搜索框默认文字'), field('dropdownStyle', undefined, PropTypes.object, false, '下拉菜单的样式'), field('dropdownMatchSelectWidth', false, PropTypes.bool, false, '下拉菜单和选择器同宽'), field('size', 'default', PropTypes.oneOf(['large', 'small']), false, '下拉菜单和选择器同宽	'), field('showCheckedStrategy', TreeSelect.SHOW_ALL, PropTypes.oneOf([TreeSelect.SHOW_ALL, TreeSelect.SHOW_PARENT, TreeSelect.SHOW_CHILD]), false, '下拉菜单和选择器同宽	'), field('defaultExpandAll', false, PropTypes.bool, false, '默认展开所有树节点'), field('onSelect', null, PropTypes.func, false, '点击树节点触发'), field('onChange', null, PropTypes.func, false, '选中树节点时调用此函数'), field('onSearch', null, PropTypes.func, false, '文本框值变化时回调'), field('filterTreeNode', null, PropTypes.func, false, '按需筛选树节点（高亮），返回true'), field('loadData', null, PropTypes.func, false, '异步加载数据'), field('getPopupContainer', null, PropTypes.func, false, '菜单渲染父节点。默认渲染到 body 上，如果你遇到菜单滚动定位问题，试试修改为滚动的区域，并相对其定位。示例'), field('allowClear', false, PropTypes.bool, false, '显示清除按钮')]
};

var YYTreeSelect = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        TreeNode: TreeNode
    },
    getInitialState: function getInitialState() {
        return {};
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                TreeSelect,
                this.props,
                this.props.children
            )
        );
    }
});
module.exports = YYTreeSelect;