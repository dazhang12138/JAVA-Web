'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Created by Dio on 2016/7/22.
 */
var React = require('react');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require2 = require('antd'),
    Button = _require2.Button;

var _require3 = require('lodash'),
    isFunction = _require3.isFunction;

var classnames = require('classnames');
require('../style/effects/ripple.css');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'button',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', '', PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'error', '']), false, '设置按钮类型，可选值为 primary|success|info|warning|error 或者不设')
    //,field('htmlType','button',PropTypes.string,false,'设置 button 原生的 type 值')
    , field('ghost', null, PropTypes.string, false, '设置按钮为不填充形态'), field('dashed', null, PropTypes.string, false, '设置按钮在不填充形态下，边框为虚线'), field('icon', null, PropTypes.string, false, '设置按钮的图标类型'), field('shape', null, PropTypes.oneOf(['circle', '']), false, '设置按钮形状，可设为circle 或者不设'), field('size', 'default', PropTypes.oneOf(['small', 'large', '']), false, '设置按钮大小，可选值为 small large 或者不设'), field('loading', null, PropTypes.bool, false, '设置按钮载入状态'), field('onClick', null, PropTypes.func, false, 'click 事件的 handler'), field('visible', true, PropTypes.bool, false, '组件是否显示'), field('disabled', undefined, PropTypes.bool, false, '组件是否禁用')]
};
var YYButton = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        Group: Button.Group
        //,getInitialState: function () {
        //    return {}
        //}
        //清理按钮点击效果
    }, _clearButtonClick: function _clearButtonClick(button) {
        if (button.classList) button.classList.remove('clicked');
    }
    //处理按钮点击效果
    , _onClickHandle: function _onClickHandle(event) {
        var _this = this;

        var buttonNode = findDOMNode(this);
        this._clearButtonClick(buttonNode);
        this._clickedTimeout = setTimeout(function () {
            buttonNode.classList ? buttonNode.classList.add('clicked') : null;
        }, 10);
        clearTimeout(this._timeoutClicked);
        this._timeoutClicked = setTimeout(function () {
            return _this._clearButtonClick(buttonNode);
        }, 500);
        if (isFunction(this.props.onClick)) {
            this.props.onClick(event);
        }
    },
    render: function render() {
        var _classnames;

        var classes = classnames((_classnames = {}, _defineProperty(_classnames, this.className(), true), _defineProperty(_classnames, 'ghost', this.props.ghost), _defineProperty(_classnames, 'dashed', this.props.dashed), _defineProperty(_classnames, 'yyui-ripple', true), _classnames));
        var visible = this.props.visible;
        return !!visible === false ? null : React.createElement(
            Button,
            _extends({}, this.props, {
                onClick: this._onClickHandle,
                className: classes }),
            this.props.children
        );
    }
});
module.exports = YYButton;