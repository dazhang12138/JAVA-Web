'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYDropdownButton = require('../dropdown/YYDropdownButton');
var YYMenu = require('../menu/YYMenu');
var YYMenuItem = require('../menu/YYMenuItem');
//定义META
var uiMeta = {
    name: 'button-select',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', '', PropTypes.oneOf(['primary', 'success', 'info', 'warning', 'error', '']), false, '设置按钮类型，可选值为 primary|success|info|warning|error 或者不设'), field('buttonText', '下拉按钮', PropTypes.string, false, '设置按钮显示文本'), field('clickKey', undefined, PropTypes.string, false, '按钮点击的键值'), field('onClick', null, PropTypes.func, false, '点击按钮或下拉按钮项时的回调，传递参数：key-对应按钮的键值'), field('trigger', 'click', PropTypes.oneOf(['click', 'hover']), false, '触发下拉的行为'), field('disabled', false, PropTypes.bool, false, '是否禁用交互'), field('selectClassName', undefined, PropTypes.string, false, '自定义下拉层的样式名')]
};
var YYButtonSelect = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        var _props = this.props,
            selectClassName = _props.selectClassName,
            children = _props.children;

        var dropdownMenus = React.createElement('span', null);
        var menuItems = [];
        if (Array.isArray(children)) {
            for (var idx = 0; idx < children.length; idx++) {
                var child = children[idx];
                if (React.isValidElement(child)) {
                    //YYSelectItem
                    menuItems.push(React.createElement(
                        YYMenuItem,
                        { key: child.props.clickKey,
                            title: child.props.title !== undefined ? child.props.title : child.props.children,
                            className: child.props.className },
                        child.props.children
                    ));
                }
            }
            dropdownMenus = React.createElement(
                YYMenu,
                { className: selectClassName, onClick: this._handleMenuClick },
                menuItems
            );
        }
        return React.createElement(
            YYDropdownButton,
            _extends({}, this.props, { overlay: dropdownMenus, className: this.className(), onClick: this._handleButtonClick }),
            this.props.buttonText
        );
    },
    _handleMenuClick: function _handleMenuClick(item) {
        if (typeof this.props.onClick == 'function') {
            this.props.onClick(item.key);
        }
    },
    _handleButtonClick: function _handleButtonClick() {
        if (typeof this.props.onClick == 'function') {
            this.props.onClick(this.props.clickKey);
        }
    }
});
module.exports = YYButtonSelect;