'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 树形组件
 */
var React = require('react');

var _require = require('antd'),
    Tree = _require.Tree;

var TreeNode = Tree.TreeNode;

var _require2 = require('react-dom'),
    findDOMNode = _require2.findDOMNode;

var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

//定义META
var uiMeta = {
    name: 'treenode',
    fields: [//field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('isMove', undefined, PropTypes.boolean, false, '拖拽模式下本节点是否允许拖拽'), field('disabled', false, PropTypes.boolean, false, '禁掉响应'), field('disableCheckbox', false, PropTypes.boolean, false, '禁掉 checkbox'), field('title', '子节点', PropTypes.string, false, '标题'), field('key', undefined, PropTypes.string, false, '被树的 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys 属性所用。注意：整个树范围内的所有节点的 key 值不能重复！'), field('isLeaf', false, PropTypes.boolean, false, '设置为叶子节点'), field('draggable', undefined, PropTypes.boolean, false, '拖拽模式下本节点是否允许拖拽'), field('selectable', undefined, PropTypes.boolean, false, '节点是否可以被点击选中'), field('selected', false, PropTypes.bool, false, '节点是否被激活选中'), field('checked', false, PropTypes.bool, false, '节点是否被勾选'), field('expanded', false, PropTypes.bool, false, '节点是否被展开'), field('onDoubleClick', null, PropTypes.func, false, '响应节点双击事件')]
};
var YYTreeNode = YYClass.create({
    uiMeta: uiMeta,
    componentDidMount: function componentDidMount() {
        this.addEvent();
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        this.addEvent();
    },
    componentWillUnmount: function componentWillUnmount() {
        this.removeEvent();
    },
    addEvent: function addEvent() {
        var domTreeNode = findDOMNode(this.refs.yyTreeNode);
        var domNode = domTreeNode.querySelector('a');
        if (domNode && !this.props.disabled) {
            domNode.addEventListener('dblclick', this.handleDblClick);
        }
    },
    removeEvent: function removeEvent() {
        var domTreeNode = findDOMNode(this.refs.yyTreeNode);
        var domNode = domTreeNode.querySelector('a');
        if (domNode && !this.props.disabled) {
            domNode.removeEventListener('dblclick', this.handleDblClick);
        }
    },
    handleDblClick: function handleDblClick() {
        if (this.props.disabled === true) return;
        if (this.props.selectable === false) return;
        var event = _.assign({}, { event: 'dblclick', node: this });
        this.context.onNodeDblClick(this.props.eventKey, event);
    },
    render: function render() {
        var _props = this.props,
            draggable = _props.draggable,
            isMove = _props.isMove;
        //拖拽模式下本节点是否允许拖拽

        var draggable = draggable && isMove !== false ? true : false;
        return React.createElement(TreeNode, _extends({ ref: 'yyTreeNode' }, this.props, { draggable: draggable, className: this.className() }));
    }
});

YYTreeNode['isTreeNode'] = 1; //提供树节点标识，注意：rc-tree内部需要依据此标识进行判断，不要随意删除此行代码。
YYTreeNode.contextTypes = {
    onNodeDblClick: PropTypes.func
};
module.exports = YYTreeNode;