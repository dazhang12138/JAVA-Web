'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var YYClass = require('../base/YYClass');
var YYButton = require('../button/YYButton');
var _ = require('lodash');

var Trigger = require('rc-trigger');
var YYInputButton = require('../formcontrols/inputbutton/YYInputButton');

function PopToolbar(props) {
    return props.searchMultiple ? React.createElement(
        'div',
        { className: 'popupcontent-toolbar' },
        React.createElement(
            YYButton,
            { size: 'small', onClick: props.onOk },
            '\u786E\u5B9A'
        )
    ) : null;
}

function PopContent(props) {
    var _this = this;

    var popContent = [];
    var nodes = props.nodes,
        curHover = props.curHover,
        seletedContentKeys = props.seletedContentKeys,
        searchMultiple = props.searchMultiple,
        onChooseContent = props.onChooseContent,
        onHoverContent = props.onHoverContent;

    _.forEach(nodes, function (node, index) {
        var className = curHover === index + 1 ? 'popup-content hover' : 'popup-content';
        var key = node.key,
            title = node.title;

        if (searchMultiple) {
            //标出已勾选的
            var isChecked = _.includes(seletedContentKeys, key);
            popContent.push(React.createElement(
                'li',
                { name: key, key: key, title: title, className: className, onClick: onChooseContent.bind(_this, node), 'data-index': index + 1, onMouseOver: onHoverContent },
                React.createElement(
                    'label',
                    { htmlFor: key },
                    React.createElement('input', { type: 'checkbox', id: key, checked: isChecked }),
                    React.createElement(
                        'span',
                        { onClick: onChooseContent.bind(_this, node) },
                        title
                    )
                )
            ));
        } else {
            popContent.push(React.createElement(
                'li',
                { 'data-index': index + 1,
                    key: key,
                    title: title,
                    onMouseOver: onHoverContent,
                    onClick: onChooseContent.bind(_this, node),
                    className: className },
                title
            ));
        }
    });
    return React.createElement(
        'ul',
        { className: 'popupcontent-wrapper' },
        popContent
    );
}

var YYTreeSearchTrigger = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            treeNodes: [],
            onSearchResult: null,
            onSearchChoose: null,
            onSearchOk: null,
            searchMultiple: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            triggerVisible: false,
            filterStr: null,
            curHover: null,
            seletedContentKeys: [],
            seletedContents: [],
            filterNodes: []
        };
    },
    _onInputChange: function _onInputChange(e, filterStr) {
        var _this2 = this;

        var _state = this.state,
            triggerVisible = _state.triggerVisible,
            filterNodes = _state.filterNodes;

        if (filterStr && filterStr.trim().length) {

            filterNodes = _.filter(this.props.treeNodes, function (item) {
                return _.includes(item.title, filterStr);
            });
            triggerVisible = filterNodes && filterNodes.length;
        } else {
            triggerVisible = false;
            filterNodes = [];
        }
        this.setState({ triggerVisible: triggerVisible, filterNodes: filterNodes }, function () {
            if (_.isFunction(_this2.props.onSearchResult)) {
                _this2.props.onSearchResult(filterNodes);
            }
        });
    },
    onKeyUp: function onKeyUp(e) {
        var keyCode = e.keyCode;
        var curHover = this.state.curHover;
        if (keyCode === 13) {
            //enter
            this._onChooseContent(this.state.filterNodes[curHover - 1]);
            return;
        }
        if (keyCode === 38) {
            //up
            curHover = curHover > 1 ? curHover - 1 : curHover;
            console.log('curHover up', curHover);
        } else if (keyCode === 40) {
            //down
            var allLength = this.state.filterNodes ? this.state.filterNodes.length : 0;
            curHover = curHover < allLength ? curHover + 1 : curHover;
            console.log('curHover down', curHover);
        } else {
            return;
        }
        this.setState({ curHover: curHover });
    },
    _onHoverContent: function _onHoverContent(e) {
        var curHover = e.target && e.target.dataset.index ? e.target.dataset.index : this.state.curHover;
        this.setState({ curHover: Number(curHover) });
    },
    _onChooseContent: function _onChooseContent(treeNode, e) {
        var _this3 = this;

        if (this.props.searchMultiple) {
            var _state2 = this.state,
                seletedContentKeys = _state2.seletedContentKeys,
                seletedContents = _state2.seletedContents;

            if (_.includes(seletedContentKeys, treeNode.key)) {
                _.remove(seletedContentKeys, function (key) {
                    return treeNode.key === key;
                });
                _.remove(seletedContents, function (selectedContent) {
                    return selectedContent.key === treeNode.key;
                });
            } else {
                seletedContentKeys.push(treeNode.key);
                seletedContents.push(treeNode);
            }

            this.setState({ seletedContents: seletedContents, seletedContentKeys: seletedContentKeys }, function () {
                if (_.isFunction(_this3.props.onSearchChoose)) {
                    _this3.props.onSearchChoose(seletedContentKeys, seletedContents);
                }
            });
        } else {
            this.setState({ triggerVisible: false }, function () {
                if (_.isFunction(_this3.props.onSearchChoose)) {
                    _this3.props.onSearchChoose(treeNode.key, treeNode);
                }
            });
        }
    },
    _onOk: function _onOk() {
        var _this4 = this;

        this.setState({ triggerVisible: false }, function () {
            if (_.isFunction(_this4.props.onSearchOk)) {
                _this4.props.onSearchOk(_this4.state.seletedContentKeys, _this4.state.seletedContents);
            }
        });
    },
    render: function render() {
        var _this5 = this;

        var _state3 = this.state,
            triggerVisible = _state3.triggerVisible,
            filterNodes = _state3.filterNodes,
            curHover = _state3.curHover,
            seletedContentKeys = _state3.seletedContentKeys;
        var searchMultiple = this.props.searchMultiple;

        var popupView = React.createElement(
            'div',
            null,
            React.createElement(PopContent, { nodes: filterNodes,
                curHover: curHover,
                seletedContentKeys: seletedContentKeys,
                searchMultiple: searchMultiple,
                onChooseContent: this._onChooseContent,
                onHoverContent: this._onHoverContent
            }),
            React.createElement(PopToolbar, { onOk: this._onOk,
                searchMultiple: this.props.searchMultiple
            })
        );
        return React.createElement(
            'div',
            { onKeyUp: this.onKeyUp },
            React.createElement(
                Trigger,
                { maskClosable: true,
                    action: ["focus"],
                    popupAlign: { points: ['tl', 'bl'] },
                    popupClassName: 'yyui-tree-search-trigger',
                    onPopupVisibleChange: this._onPopupVisibleChange,
                    popupVisible: triggerVisible,
                    popup: popupView
                },
                React.createElement(YYInputButton, _extends({}, this.props.inputProps, {
                    onFocus: function onFocus(e, value) {
                        e.stopPropagation();
                        var triggerVisible = filterNodes && filterNodes.length;
                        _this5.setState({ triggerVisible: triggerVisible });
                    },
                    onChange: this._onInputChange,
                    onClearClick: this.props.onClearClick,
                    buttonText: '\u641C\u7D22', buttonIcon: null }))
            )
        );
    }
});

module.exports = YYTreeSearchTrigger;