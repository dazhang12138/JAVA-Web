'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 下拉菜单组件按钮组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var YYMenu = require('../menu/YYMenu');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var _ = require('lodash');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require2 = require('antd'),
    Dropdown = _require2.Dropdown,
    Menu = _require2.Menu;

var DropdownButton = Dropdown.Button;
require('./style/index.less');
var menu = React.createElement(YYMenu, null);
//定义META
var uiMeta = {
    name: 'dropdownbutton',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('type', '', PropTypes.oneOf(['primary', 'ghost', 'dashed', '']), false, '设置按钮类型，可选值为 primary ghost 或者不设'), field('onClick', null, PropTypes.func, false, '点击左侧按钮的回调'), field('trigger', 'hover', PropTypes.oneOf(['click', 'hover']), false, '触发下拉的行为'), field('overlay', null, PropTypes.instanceOf(Menu), false, '菜单'), field('visible', null, PropTypes.bool, false, '菜单是否显示'), field('onVisibleChange', null, PropTypes.func, false, '菜单显示状态改变时调用，参数为 { visible }'), field('disabled', false, PropTypes.bool, false, '组件是否被禁用')]
};
var YYDropdownButton = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var _props = this.props,
            overlay = _props.overlay,
            disabled = _props.disabled;

        return {
            overlay: disabled ? menu : overlay,
            disabled: disabled
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('disabled' in nextProps) {
            var disabled = nextProps.disabled;
            var overlay = disabled ? menu : nextProps.overlay ? nextProps.overlay : menu;
            this.setState({
                disabled: disabled,
                overlay: overlay
            });
        }
    },
    _handleAttr: function _handleAttr(doms, value) {
        _.forEach(doms, function (dom) {
            if (value === true) {
                dom.setAttribute('disabled', value);
            } else {
                dom.removeAttribute("disabled");
            }
        });
    },
    componentDidMount: function componentDidMount() {
        var disabled = this.state.disabled;
        var buttonDom = findDOMNode(this).getElementsByTagName('button');
        if (disabled == true) {
            this._handleAttr(buttonDom, true);
        }
    },
    componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
        var disabled = this.state.disabled;
        var buttonDom = findDOMNode(this).getElementsByTagName('button');
        if (disabled) {
            this._handleAttr(buttonDom, true);
        } else {
            this._handleAttr(buttonDom, false);
        }
    },
    render: function render() {
        var _state = this.state,
            disabled = _state.disabled,
            overlay = _state.overlay;

        var cls = disabled ? 'disabled' : '';
        return React.createElement(
            DropdownButton,
            _extends({}, this.props, {
                disabled: disabled,
                overlay: overlay,
                className: '' + (this.className() + ' ' + cls)
            }),
            this.props.children
        );
    }
});
module.exports = YYDropdownButton;