'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 ** Created by zhangzhzhc on 2017/4/13.
 ** 结合YYTimeline、YYSteps，使点击不同step时，展示不同的timeline
 */
var React = require('react');
var ReactDOM = require('react-dom');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Steps = _require.Steps;

var YYSteps = require('../steps/YYSteps');
var YYStep = require('../steps/YYStep');
var YYTimeLine = require('../timeline/YYTimeline');
var YYTimeLineItem = require('../timeline/YYTimelineItem');
var YYIcon = require('../icon/YYIcon');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'statetrack',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('current', 0, PropTypes.number, false, '指定当前步骤，从 0 开始记数。在子 Step 元素中，可以通过 status 属性覆盖状态'), field('status', 'process', PropTypes.oneOf(['wait', 'process', 'finish', 'error']), false, '指定当前步骤的状态'), field('size', 'default', PropTypes.oneOf(['default', 'small']), false, '大小'), field('direction', 'default', PropTypes.oneOf(['default', 'vertical']), false, '步骤条方向'), field('steps', null, PropTypes.arrayOf(PropTypes.object), true, '步骤条'), field('selectedStep', 0, PropTypes.number, false, '选择的step'), field('times', null, PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.object)), true, '时间轴'), field('pending', false, PropTypes.oneOfType([PropTypes.element, PropTypes.bool]), false, '指定最后一个幽灵节点是否存在或内容')]
};
var YYStateTrack = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            selectedStep: this.props.selectedStep,
            iconLeft: 0
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(props) {
        if ('selectedStep' in props && props.selectedStep !== this.props.selectedStep) {
            this.setState({ selectedStep: props.selectedStep });
        }
    },
    // step点击事件
    onClickStep: function onClickStep(index, e) {
        this.setState({
            selectedStep: index,
            iconLeft: this._getIconLeft(index)
        });
    },
    // 根据rc-steps中step的width、marginRight得出小三角的确切位置
    _getIconLeft: function _getIconLeft(index) {
        var iconLeft = 0;
        var domNode = ReactDOM.findDOMNode(this);
        var antSteps = domNode.children[0].children[0].children;
        var firstStep = antSteps ? antSteps[0] : null;
        if (firstStep && index > 0) {
            var marginRight = firstStep.style.marginRight;
            if (marginRight) {
                marginRight = marginRight.substring(0, marginRight.length - 3);
                iconLeft = parseFloat(marginRight).toFixed(2) * index;
            }
        }
        return iconLeft;
    },
    //获取steps组件数组
    _getSteps: function _getSteps() {
        var that = this;
        var items = [];
        var steps = this.props.steps;
        if (steps && steps instanceof Array && steps.length > 0) {
            items = steps.map(function (item, index) {
                return React.createElement(YYStep, _extends({}, item, { onClick: that.onClickStep.bind(this, index) }));
            });
        }
        return items;
    },
    //获取times组件数组
    _getTimes: function _getTimes() {
        var items = [];
        var times = this.props.times;
        var steps = this.props.steps;
        if (times && times instanceof Array && times.length > 0 && steps && steps instanceof Array && steps.length > 0) {
            var showTimes = times[this.state.selectedStep];
            items = showTimes.map(function (item, index) {
                return React.createElement(
                    YYTimeLineItem,
                    { color: item.color, dot: item.dot },
                    item.children
                );
            });
        }
        return items;
    },
    render: function render() {
        var steps = this._getSteps();
        var times = this._getTimes();
        var props = this.props;
        var stepsProps = {
            status: props.status,
            current: props.current,
            direction: props.direction,
            size: props.size
        };
        var clickedStep = this.state.selectedStep;
        var stepsCount = steps.length;
        //paddingLeft：根据ant.d中step样式的处理规律作的推导
        var paddingLeft = stepsCount === 0 ? 0 : clickedStep * (100 / (stepsCount - 1));
        var iconLeft = this.state.iconLeft;
        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                YYSteps,
                stepsProps,
                steps
            ),
            React.createElement(
                'div',
                { className: this.className('icon') },
                React.createElement(YYIcon, { type: 'caret-up', style: { marginLeft: iconLeft, paddingLeft: paddingLeft + '%', color: '#fff' } })
            ),
            React.createElement(
                YYTimeLine,
                { pending: props.pending },
                times
            )
        );
    }
});
module.exports = YYStateTrack;