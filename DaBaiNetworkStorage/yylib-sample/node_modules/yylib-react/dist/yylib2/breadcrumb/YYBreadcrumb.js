'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 面包屑组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('react-router'),
    Link = _require.Link;

var _require2 = require('antd'),
    Breadcrumb = _require2.Breadcrumb;

require('./style/index.less');
//定义META
var uiMeta = {
    name: 'breadcrumb',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('itemsData', [], PropTypes.array, true, "依据数据生成面包屑，各item信息如下：{title:'标题',href:'链接'}"), field('separator', '/', PropTypes.string, false, '自定义分隔符')]
};
var YYBreadcrumb = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        Item: Breadcrumb.Item
    },
    getInitialState: function getInitialState() {
        return { itemsData: this.props.itemsData };
    },
    componentWillReceiveProps: function componentWillReceiveProps(props) {
        if ('itemsData' in props) {
            this.setState({ itemsData: props.itemsData });
        }
    },
    render: function render() {
        var itemsView = [];
        //依据itemsData生成面包屑
        if (this.state.itemsData && this.state.itemsData.length > 0) {
            for (var i = 0; i < this.state.itemsData.length; i++) {
                var item = this.state.itemsData[i];
                if (item.href && item.href.length > 0) {
                    itemsView.push(React.createElement(
                        Breadcrumb.Item,
                        null,
                        React.createElement(
                            Link,
                            { to: { pathname: item.href } },
                            item.icon,
                            ' ',
                            item.title
                        )
                    ));
                } else {
                    itemsView.push(React.createElement(
                        Breadcrumb.Item,
                        null,
                        item.icon,
                        '  ',
                        item.title
                    ));
                }
            }
        } else {
            itemsView = this.props.children;
        }
        var cls = this.className() + ' ant-breadcrumb';
        return React.createElement(
            Breadcrumb,
            _extends({}, this.props, { prefixCls: cls }),
            itemsView
        );
    }
});

module.exports = YYBreadcrumb;