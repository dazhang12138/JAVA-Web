'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * https://github.com/hexa1/react-json-editor
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var YYTooltip = require('../tooltip/YYTooltip');
var YYPopover = require('../popover/YYPopover');
var YYButton = require('../button/YYButton');
var YYSelect = require('../formcontrols/select/YYSelect');
var YYOption = YYSelect.Option;

var _require = require('./lib'),
    EditorState = _require.EditorState,
    getValueType = _require.getValueType;

var Field = require('./components/Field');
var AddElementButton = require('./components/AddElementButton');
require('./jsonEditor.less');

var uiMeta = {
    name: 'json-editor',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('json', 'light', PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.array]), false, '初始编辑器json数据'), field('onChange', function () {}, PropTypes.func, false, '发生改变的回调')]
};

var YYJsonEditor = YYClass.create({
    uiMeta: uiMeta,
    childContextTypes: {
        jsonEditor: PropTypes.object
    },
    getInitialState: function getInitialState() {
        return { editorState: new EditorState(this.props.json) };
    },
    getChildContext: function getChildContext() {
        return {
            jsonEditor: {
                onFieldValueChange: this.onFieldValueChange,
                addArrayElement: this.addArrayElement,
                addMapElement: this.addMapElement,
                removeElement: this.removeElement,
                createDropdown: this.createDropdown,
                createTooltip: this.createTooltip
            }
        };
    },
    onFieldValueChange: function onFieldValueChange(path, value) {
        var _this = this;

        var onChange = this.props.onChange;
        var editorState = this.state.editorState;


        this.setState({
            editorState: editorState.setFieldValue(path, value)
        }, function () {
            if (onChange) {
                onChange(_this.state.editorState.getJson());
            }
        });
    },
    addArrayElement: function addArrayElement(path, value) {
        var _this2 = this;

        var onChange = this.props.onChange;
        var editorState = this.state.editorState;


        this.setState({
            editorState: editorState.addArrayElement(path, value)
        }, function () {
            if (onChange) {
                onChange(_this2.state.editorState.getJson());
            }
        });
    },
    addMapElement: function addMapElement(path, key, value) {
        var onChange = this.props.onChange;
        var editorState = this.state.editorState;


        var updatedState = editorState.addMapElement(path.concat(key), value);

        // addMapElement will return false if the key already exists
        if (!updatedState) return false;

        this.setState({
            editorState: updatedState
        });

        if (onChange) {
            onChange(updatedState.getJson());
        }

        return true;
    },
    removeElement: function removeElement(path) {
        var _this3 = this;

        var onChange = this.props.onChange;
        var editorState = this.state.editorState;


        this.setState({
            editorState: editorState.removeElement(path)
        }, function () {
            if (onChange) {
                onChange(_this3.state.editorState.getJson());
            }
        });
    },
    createDropdown: function createDropdown() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

        var _onChange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        var props = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

        return React.createElement(
            YYSelect,
            _extends({ style: { width: 100 }, value: value, onChange: function onChange(value) {
                    if (_onChange) _onChange(value);
                }, defaultValue: '' }, props),
            React.createElement(
                YYOption,
                { disabled: true, value: '' },
                props.placeholder
            ),
            options.map(function (opt, idx) {
                return React.createElement(
                    YYOption,
                    { value: opt.value, key: idx },
                    opt.label
                );
            })
        );
    },
    createTooltip: function createTooltip(tooltipText, triggerComponent) {
        var placement = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';
        var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

        var tooltip = React.createElement(
            'div',
            { id: id },
            tooltipText
        );
        return React.createElement(
            YYTooltip,
            { title: tooltip, placement: placement },
            triggerComponent
        );
    },
    undo: function undo() {
        this.setState({
            editorState: this.state.editorState.undo()
        });
    },
    redo: function redo() {
        this.setState({
            editorState: this.state.editorState.redo()
        });
    },
    render: function render() {
        var editorState = this.state.editorState;

        var json = editorState.getJson();

        return React.createElement(
            'div',
            { className: this.className() },
            Object.keys(json).map(function (key) {
                if (typeof json[key] === 'undefined') {
                    return null;
                }

                return React.createElement(Field, {
                    key: key,
                    fieldKey: key,
                    fieldValue: json[key],
                    isArrayElement: getValueType(json) === 'array'
                });
            }),
            React.createElement(
                'div',
                { className: 'editor-actions' },
                React.createElement(AddElementButton, { path: [], fieldValue: json }),
                editorState.canUndo() && React.createElement(
                    YYButton,
                    { size: 'small', icon: 'circle-o-left', onClick: this.undo },
                    '\u64A4\u9500'
                ),
                editorState.canRedo() && React.createElement(
                    YYButton,
                    { size: 'small', icon: 'repeat', onClick: this.redo },
                    '\u91CD\u505A'
                )
            )
        );
    }
});

module.exports = YYJsonEditor;