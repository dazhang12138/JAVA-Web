'use strict';

var cn = require('classnames');
var React = require('react');
var YYClass = require('../../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYIcon = require('../../icon/YYIcon');

var _require = require('../lib'),
    isPlainValue = _require.isPlainValue,
    getValueType = _require.getValueType,
    coerceToType = _require.coerceToType;

var ValueEditor = require('./ValueEditor');
var AddElementButton = require('./AddElementButton');

var typeSelectorOptions = [{
    label: 'String', value: 'string'
}, {
    label: 'Number', value: 'number'
}, {
    label: 'Boolean', value: 'boolean'
}, {
    label: 'Array', value: 'array'
}, {
    label: 'Map', value: 'map'
}];

var uiMeta = {
    name: 'menu',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('fieldValue', undefined, PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object, PropTypes.number, PropTypes.bool]), false, '属性值'), field('path', [], PropTypes.arrayOf(PropTypes.string), false, '属性查找路径'), field('fieldKey', undefined, PropTypes.string, false, '属性键'), field('isArrayElement', undefined, PropTypes.bool, false, '属性是否为数组')]
};

var JSONField = YYClass.create({
    uiMeta: uiMeta,
    contextTypes: {
        jsonEditor: PropTypes.object
    },
    getInitialState: function getInitialState() {
        return {
            expanded: true
        };
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        if (nextState.expanded !== this.state.expanded) {
            return true;
        }

        if (JSON.stringify(nextProps.fieldValue) !== JSON.stringify(this.props.fieldValue)) {
            return true;
        }

        return false;
    },

    toggleExpanded: function toggleExpanded() {
        this.setState({ expanded: !this.state.expanded });
    },

    // this will only be called for plain types - strings, numbers, booleans
    onValueChange: function onValueChange(value) {
        var fieldValue = this.props.fieldValue;
        var onFieldValueChange = this.context.jsonEditor.onFieldValueChange;

        var valueType = getValueType(fieldValue);

        onFieldValueChange(this.getFieldPath(), coerceToType(value, valueType));
    },

    onTypeChange: function onTypeChange(nextType) {
        var fieldValue = this.props.fieldValue;
        var onFieldValueChange = this.context.jsonEditor.onFieldValueChange;


        onFieldValueChange(this.getFieldPath(), coerceToType(fieldValue, nextType));
    },

    nullifyValue: function nullifyValue() {
        var onFieldValueChange = this.context.jsonEditor.onFieldValueChange;

        onFieldValueChange(this.getFieldPath(), null);
    },

    removeElement: function removeElement() {
        var removeElement = this.context.jsonEditor.removeElement;

        var path = this.getFieldPath();

        removeElement(path);
    },

    getFieldPath: function getFieldPath() {
        var _props = this.props,
            path = _props.path,
            fieldKey = _props.fieldKey,
            isArrayElement = _props.isArrayElement;

        return path.concat(isArrayElement ? parseInt(fieldKey, 10) : fieldKey);
    },

    renderValue: function renderValue() {
        var _props2 = this.props,
            fieldKey = _props2.fieldKey,
            fieldValue = _props2.fieldValue,
            path = _props2.path;
        var expanded = this.state.expanded;

        var isArray = getValueType(fieldValue) === 'array';

        if (fieldValue === null) {
            return React.createElement(
                'span',
                { className: 'null-value' },
                '[null]'
            );
        }

        // strings, numbers, and bools
        if (isPlainValue(fieldValue)) {
            return React.createElement(ValueEditor, { fieldValue: fieldValue, onChange: this.onValueChange });
        }

        // maps and arrays
        if (expanded) {
            return React.createElement(
                'div',
                { className: 'indented' },
                Object.keys(fieldValue).map(function (key, idx) {
                    if (typeof fieldValue[key] === 'undefined') {
                        return null;
                    }

                    return React.createElement(JSONField, {
                        key: key,
                        fieldKey: key,
                        fieldValue: fieldValue[key],
                        path: path.concat(fieldKey),
                        isArrayElement: isArray
                    });
                }),
                React.createElement(AddElementButton, { fieldValue: fieldValue, path: this.getFieldPath() })
            );
        }
    },

    renderTypeSelectorAndButtons: function renderTypeSelectorAndButtons() {
        var fieldValue = this.props.fieldValue;
        var createDropdown = this.context.jsonEditor.createDropdown;


        return React.createElement(
            'span',
            null,
            createDropdown(typeSelectorOptions, getValueType(fieldValue), this.onTypeChange, {
                placeholder: '类型'
            }),
            this.renderButtons()
        );
    },

    renderButtons: function renderButtons() {
        var fieldValue = this.props.fieldValue;
        var createTooltip = this.context.jsonEditor.createTooltip;


        var nullifyBtn = React.createElement(YYIcon, { type: 'minus-circle-o', onClick: this.nullifyValue });
        var nullifyTooltip = createTooltip('置为空', nullifyBtn, 'left', 'nullify');

        var removeBtn = React.createElement(YYIcon, { type: 'cross', onClick: this.removeElement });
        var removeTooltip = createTooltip('删除字段', removeBtn, 'left', 'remove');

        return React.createElement(
            'span',
            null,
            fieldValue !== null && (nullifyTooltip || nullifyBtn),
            removeTooltip || removeBtn
        );
    },

    render: function render() {
        var _props3 = this.props,
            fieldKey = _props3.fieldKey,
            fieldValue = _props3.fieldValue,
            isArrayElement = _props3.isArrayElement;
        var expanded = this.state.expanded;

        var valueIsPlain = isPlainValue(fieldValue);

        var expandIconType = cn('', {
            'plus-circle-o': !expanded,
            'minus-circle-o': expanded
        });

        var fieldClassname = cn('json-field', {
            'non-expandable': valueIsPlain
        });

        var fieldKeyLabel = fieldKey;
        if (isArrayElement) {
            fieldKeyLabel = '[' + fieldKeyLabel + ']';
        }

        return React.createElement(
            'div',
            { className: fieldClassname },
            !valueIsPlain && React.createElement(YYIcon, { type: expandIconType, onClick: this.toggleExpanded }),
            React.createElement(
                'strong',
                { className: 'field-key' },
                fieldKeyLabel,
                ': '
            ),
            !valueIsPlain && this.renderTypeSelectorAndButtons(),
            this.renderValue(),
            valueIsPlain && this.renderTypeSelectorAndButtons()
        );
    }
});

module.exports = JSONField;