'use strict';

var React = require('react');
var PropTypes = React.PropTypes;
var YYInput = require('../../formcontrols/input/YYInput');

var _require = require('../lib'),
    getValueType = _require.getValueType;

var boolOptions = [{
    value: 'true', label: 'True'
}, {
    value: 'false', label: 'False'
}];

// values in the bool options are strings for ease of use across dropdown components
// convert the value back to an actual boolean when updating the json value
function convertToActualBool(string) {
    return string === 'true' || string === true;
}

function validateKeyPress(evt, fieldValue, valueType) {
    // only allow digits and one decimal for numbers
    if (valueType === 'number') {
        if (/\./.test(String.fromCharCode(evt.charCode))) {
            if (String(fieldValue).indexOf('.') > -1) {
                evt.preventDefault();
            } else {
                return;
            }
        }

        if (/^\d+$/.test(String.fromCharCode(evt.charCode)) === false) {
            evt.preventDefault();
        }
    }
}

function ValueEditor(props, context) {
    var _onChange = props.onChange,
        fieldValue = props.fieldValue;
    var createDropdown = context.jsonEditor.createDropdown;

    var valueType = getValueType(fieldValue);

    if (valueType === 'boolean') {
        return React.createElement(
            'span',
            { className: 'bool-selector' },
            createDropdown(boolOptions, String(fieldValue), function (val) {
                return _onChange(convertToActualBool(val));
            }, {
                placeholder: 'å€¼'
            })
        );
    }

    return React.createElement(YYInput, {
        style: { width: 100 },
        value: fieldValue,
        onChange: function onChange(e) {
            return _onChange(e.target.value);
        },
        onKeyPress: function onKeyPress(evt) {
            return validateKeyPress(evt, fieldValue, valueType);
        }
    });
}

ValueEditor.propTypes = {
    fieldValue: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object, PropTypes.number, PropTypes.bool]),
    onChange: PropTypes.func
};

ValueEditor.contextTypes = {
    jsonEditor: PropTypes.object
};

module.exports = ValueEditor;