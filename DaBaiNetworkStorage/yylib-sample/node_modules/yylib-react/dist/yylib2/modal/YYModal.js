'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 模态对话框
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('antd'),
    Modal = _require.Modal;

var Draggable = require('react-draggable');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'modal',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('visible', null, PropTypes.bool, false, '对话框是否可见'), field('confirmLoading', null, PropTypes.bool, false, '确定按钮 loading'), field('title', null, PropTypes.element, false, '弹窗的头部标题'), field('closable', true, PropTypes.bool, false, '是否显示右上角的关闭按钮'), field('onOk', null, PropTypes.func, false, '点击确定回调'), field('onCancel', null, PropTypes.func, false, '点击遮罩层或右上角叉或取消按钮的回调'), field('width', 520, PropTypes.oneOfType([PropTypes.string, PropTypes.number]), false, '对话框宽度'), field('footer', undefined, PropTypes.element, false, '底部内容'), field('okText', '确定', PropTypes.string, false, '确认按钮文字'), field('cancelText', '取消', PropTypes.string, false, '取消按钮文字'), field('maskClosable', true, PropTypes.bool, false, '点击蒙层是否允许关闭'), field('style', null, PropTypes.object, false, '用于设置浮层的样式，可以用于调整浮层位置、尺寸等'), field('wrapClassName', '', PropTypes.string, false, '对话框外层容器的类名'), field('bodyStyle', null, PropTypes.string, false, '对话框内层body容器的类名'), field('draggable', true, PropTypes.bool, false, '对话框是否支持拖拽')]
};
var YYModal = YYClass.create({
    uiMeta: uiMeta,
    statics: {
        info: Modal.info,
        success: Modal.success,
        error: Modal.error,
        warning: Modal.warning,
        confirm: Modal.confirm
    },
    getInitialState: function getInitialState() {
        return {
            offsetLeft: null,
            offsetTop: null,
            mStyle: null
        };
    },
    handleCancel: function handleCancel(e) {
        this.props.onCancel(e);
    },
    handleOk: function handleOk() {
        this.props.onOk();
    }
    //渲染可拖拽区域的头部
    , renderDraggableHeader: function renderDraggableHeader() {
        var _props = this.props,
            title = _props.title,
            draggable = _props.draggable;

        var that = this;
        //如果未启用拖拽则默认返回原始title
        if (!draggable) return title;
        //包装拖拽的头部区域
        var headerTitle = null;
        if (title) {
            //如果存在头部标题|元素则直接在此基础上包装
            if (React.isValidElement(title)) {
                headerTitle = title;
            } else {
                headerTitle = React.createElement(
                    'div',
                    null,
                    title
                );
            }
        } else {
            //如果不存在头部标题则构建一个空的头部作为可拖拽区域
            headerTitle = React.createElement(
                'div',
                { className: 'empty-draggable-area' },
                '\u70B9\u6B64\u5904\u62D6\u62FD\u79FB\u52A8'
            );
        }
        var rndDiv = React.createElement(
            Draggable,
            {
                position: { x: 0, y: 0 },
                onStart: function onStart(e, data) {
                    //获取到yyui-modal ant-modal层级的元素矩阵
                    var modalRect = e.currentTarget.parentNode.parentNode.parentNode.parentNode.getBoundingClientRect();
                    //获取当前点击位置距离弹窗左上角的位置
                    var offsetLeft = e.clientX - modalRect.left;
                    var offsetTop = e.clientY - modalRect.top;
                    //清除默认的margin，定位到当前原始位置
                    that.setState({ mStyle: { margin: 0, left: modalRect.left, top: modalRect.top }, offsetLeft: offsetLeft, offsetTop: offsetTop });
                },
                onDrag: function onDrag(e, data) {
                    //移动到对应拖拽时的位置
                    that.setState({ mStyle: { margin: 0, left: e.clientX - that.state.offsetLeft, top: e.clientY - that.state.offsetTop } });
                },
                onStop: function onStop(e, data) {
                    // that.setState({mStyle:{left:e.clientX,top:e.clientY}});
                }
            },
            headerTitle
        );
        return rndDiv;
    },
    render: function render() {
        var modalTitle = this.renderDraggableHeader();
        return React.createElement(
            Modal,
            _extends({}, this.props, { title: modalTitle, style: _.assign({}, this.props.style, this.state.mStyle), prefixCls: this.className() + ' ant-modal' }),
            this.props.children
        );
    }
});
module.exports = YYModal;