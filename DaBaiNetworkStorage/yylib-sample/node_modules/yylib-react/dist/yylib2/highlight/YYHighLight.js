'use strict';

var React = require('react');
var ReactDOM = require('react-dom');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var ReactHighLight = require('./ReactHighLight');
var YYClipboard = require('../clipboard/YYClipboard');
var YYMessage = require('../message/YYMessage');
var ajax = require('../../utils/ajax');
require('./style/index.less');
//定义META
var uiMeta = {
    name: 'highlight',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('lang', '', PropTypes.string, true, '代码语言类别'), field('file', '', PropTypes.string, false, '源码地址')]
};

var YYHighLight = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            code: ''
        };
    },
    componentDidMount: function componentDidMount() {
        var file = this.props.file;
        this._requestData(file);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.file !== this.props.file) {
            this._requestData(nextProps.file);
        }
    },

    _requestData: function _requestData(file) {
        var _this = this;
        if (file) {
            ajax.request({
                url: file,
                type: 'text',
                accept: 'text',
                success: function success(data) {
                    _this.setState({
                        code: data
                    });
                }
            });
        }
    },
    _copySource: function _copySource() {
        YYMessage.success('源码复制成功');
    },
    _getText: function _getText() {
        var children = this.props.children && this.props.children.length > 0 ? this.props.children : '';
        var code = this.state.code;
        var text = code ? code : children;
        return text;
    },
    render: function render() {
        var lang = this.props.lang;

        return React.createElement(
            'div',
            { className: this.className() },
            React.createElement(
                YYClipboard,
                { text: this._getText(), onCopy: this._copySource },
                React.createElement(
                    'div',
                    { className: this.className('copy') },
                    '\u590D\u5236\u6E90\u7801'
                )
            ),
            React.createElement(
                ReactHighLight,
                { className: lang },
                this.props.file ? this.state.code : this.props.children
            )
        );
    }
});

module.exports = YYHighLight;