'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getHeaders = getHeaders;
exports.getColumns = getColumns;
exports.ifInArray = ifInArray;
exports.removeRow = removeRow;
exports.generateTreeNodes = generateTreeNodes;
exports.getNewTreeData = getNewTreeData;
exports.getPagination = getPagination;
exports.getDefaultRows = getDefaultRows;
exports.getDefaultKeys = getDefaultKeys;
exports.formatOftenToServer = formatOftenToServer;
exports.formatOftenFromServer = formatOftenFromServer;
exports.getOftenKeys = getOftenKeys;
exports.sortWithTableRows = sortWithTableRows;

var _ReferConstants = require('../constants/ReferConstants');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var React = require('react');


// 获取表头信息，优先使用参照注册信息中的表头，若没有，使用参照数据中的表头
function getHeaders(referHeaders, grid) {
	var headers = null;
	if (referHeaders && referHeaders.length > 0) {
		headers = referHeaders;
	} else if (grid) {
		headers = grid.header;
	}

	return headers;
}

//内部方法：根据列信息，给column、oftenColumn赋值
function _getColumn(header, operatefield, onClickOperate, columnWith, ifOften) {
	var headerCode = header.code;
	var column = {
		key: ifOften ? header.code + "often" : header.code,
		title: header.name,
		dataIndex: header.code,
		width: columnWith,
		render: function render(text, record) {
			if (headerCode === operatefield) {
				return React.createElement(
					'a',
					{ href: 'javascript:void(0);', onClick: onClickOperate.bind(null, record) },
					text
				);
			} else {
				return text;
			}
		}
	};
	//字段数据类型
	if (header.fieldtype) {
		column.fieldtype = header.fieldtype;
	}
	//小数位精度
	if (!isNaN(header.decimal)) {
		column.decimal = header.decimal;
	}
	//表头对齐
	column.titleAlign = header.titleAlign ? header.titleAlign : 'center';
	return column;
}
//从header中获取表格数据的columns信息
function getColumns(header, store, nameField, operatefield, operateurl, onClickOperate) {
	var columns = [];
	var oftenColumns = [];
	var totalWidth = 0;
	if (header) {
		var j = 0;
		// 从1 开始 是默认为第0个元素是 id，无需显示。但是有风险。应该靠hidden来控制。
		for (var i = 0; i <= header.length - 1; i++) {
			if (!nameField && header[i].backfiled) {
				nameField = header[i].code;
			}
			if (!header[i].hidden) {
				var columnWith = header[i].width ? header[i].width : _ReferConstants.REFER_DEFAULT_COLUMN_WIDTH;
				columns[j] = _getColumn(header[i], operatefield, onClickOperate, columnWith, false);
				oftenColumns[j] = _getColumn(header[i], operatefield, onClickOperate, columnWith, true);
				totalWidth += columnWith;
				j++;
			}
		};
	};

	return { columns: columns, oftenColumns: oftenColumns, totalWidth: totalWidth };
}

// //读取常用数据keys
// export function	readOftenKeys(storeData, idField){
// 	var oftenkeys =[];
// 	if(storeData){
// 		for(var key in storeData){
// 			oftenkeys.push(storeData[key][idField]);
// 		}
// 	};
// 	return oftenkeys;
// }

// //读取常用数据
// export function	readOftenData(storeData){
// 	var oftenData = [];
// 	if(storeData){
// 		for(var key in storeData){
// 			oftenData.push(storeData[key]);
// 		}
// 	};
// 	return oftenData;
// }

//判断是arr数组里是否含有val元素，  返回boolean
function ifInArray(arr, val) {
	var charCode = String.fromCharCode(2);
	var r = new RegExp(charCode + val + charCode);
	return r.test(charCode + arr.join(charCode) + charCode);
}

//移除数组中属性id == key的元素 
function removeRow(arr, key, idField) {
	var j = 0;
	for (var i = arr.length - 1; i >= 0; i--) {
		if (arr[i][idField] === key) {
			arr.splice(i, 1);
		}
	};
	return arr;
}

//树------start
//规范属性类型
function generateTreeNodes(treeNode) {
	var arr = [];
	var key = treeNode.props.eventKey;
	for (var i = 0; i < 3; i++) {
		// {
		//     "children" : null,
		//     "id" : "92fe52225c9311e7b5000242ac110006_false",
		//     "code" : "module_3",
		//     "name" : "合约云模块",
		//     "key" : "92fe52225c9311e7b5000242ac110006",
		//     "parent" : false,
		//     "extra" : {
		//     "type" : "app"
		// },
		//     "enableBtnPermission" : true
		// }
		arr.push({
			"children": null,
			"id": 'id-' + key + '-' + i,
			"code": 'module-' + key + '-' + i,
			"name": 'leaf ' + key + '-' + i,
			"key": key + '-' + i,
			"parent": false,
			"extra": {
				"type": "app"
			},
			"enableBtnPermission": true
		});
		// arr.push({ name: `leaf ${key}-${i}`, key: `${key}-${i}` });
	}
	return arr;
}

function setLeaf(treeData, curKey, level) {
	var loopLeaf = function loopLeaf(data, lev) {
		var l = lev - 1;
		data.forEach(function (item) {
			if (item.key.length > curKey.length ? item.key.indexOf(curKey) !== 0 : curKey.indexOf(item.key) !== 0) {
				return;
			}
			if (item.children) {
				loopLeaf(item.children, l);
			} else if (l < 1) {
				item.isLeaf = true;
			}
		});
	};
	loopLeaf(treeData, level + 1);
}

function getNewTreeData(treeData, curKey, child, level) {
	var loop = function loop(data) {
		if (level < 1 || curKey.length - 3 > level * 2) return;
		data.forEach(function (item) {
			if (curKey.indexOf(item.key) === 0) {
				if (item.children) {
					loop(item.children);
				} else {
					item.children = child;
				}
			}
		});
	};
	loop(treeData);
	setLeaf(treeData, curKey, level);
}
//树------end

// table分页配置
function getPagination(totalsize, current, onChangePage, onChangePageSize, size) {
	var that = this;
	var pagination = {
		total: totalsize,
		//size: 'small',
		showSizeChanger: true,
		showQuickJumper: false, //参照禁用掉跳转页码
		current: current,
		onShowSizeChange: function onShowSizeChange(current, pageSize) {
			onChangePageSize(current, pageSize);
		},
		onChange: function onChange(current) {
			onChangePage(current);
		}
	};
	size ? pagination.size = size : null;

	return pagination;
}

// 获取默认值
// 表参照、树表参照 获取默认值：将参照暴露对外的值逆转化为参照里的业务值,defaultValue中存储的是id、code、name
// 2016.12.20,根据multiselect返回适当值，加强参照健壮性，以应对以下场景： 多选时传入初始值类型为object，单选时传入初始值类型为array
function getDefaultRows(defaultValue, idField, codeField, nameField, multiselect) {
	var that = this;
	// 创建新defaultRows，不在defaultValue上直接处理，避免字段冗余
	var defaultRows = null;
	if (defaultValue) {
		if (defaultValue instanceof Array) {
			// 初始值是数组
			defaultRows = [];
			for (var i = 0; i < defaultValue.length; i++) {
				if (defaultValue[i].id || defaultValue[i].code || defaultValue[i].name) {
					// 增强代码健壮性：应对传入初始值{id: null, code: null, name: null} 的场景
					// todo 场景比较多， 考虑只判断 id是否 null 也可以。 暂时目前处理
					defaultValue[i][idField] = defaultValue[i].id;
					defaultValue[i][codeField] = defaultValue[i].code;
					defaultValue[i][nameField] = defaultValue[i].name;
					defaultRows.push(defaultValue[i]);
				}
			}
			if (multiselect !== true) {
				// 单选时返回object
				defaultRows = defaultRows[0];
			}
		} else {
			// 初始值是对象
			if (defaultValue.id || defaultValue.code || defaultValue.name) {
				defaultRows = {};
				// 增强代码健壮性：应对传入初始值{id: null, code: null, name: null} 的场景
				defaultRows[idField] = defaultValue.id;
				defaultRows[codeField] = defaultValue.code;
				defaultRows[nameField] = defaultValue.name;
			}
			if (multiselect === true && defaultRows !== null) {
				// 多选时返回array
				var tempArr = [];
				tempArr[0] = defaultRows;
				defaultRows = tempArr;
			}
		}
		return defaultRows;
	}
	return null;
}

//表参照、树表参照 获取默认值keys， defaultValue中存储的是id、code、name
function getDefaultKeys(defaultValue, multiselect) {
	var defaultKeys = null;
	if (defaultValue) {
		if (defaultValue instanceof Array) {
			// 初始值是array
			defaultKeys = [];
			if (defaultValue.length > 0) {
				for (var i = 0; i < defaultValue.length; i++) {
					if (defaultValue[i].id) {
						defaultKeys.push(defaultValue[i].id);
					}
				}
			}
			if (multiselect !== true) {
				// 单选时返回string
				defaultKeys = defaultKeys[0];
			}
		} else {
			// 初始值是string
			if (defaultValue.id) {
				defaultKeys = defaultValue.id;
			}
			if (multiselect === true) {
				// 多选时返回array
				var tempArr = [];
				tempArr[0] = defaultKeys;
				defaultKeys = tempArr;
			}
		}
	}

	return defaultKeys;
}

// 规范化常用数据为[{id,data},{id,data}]格式
function formatOftenToServer(oftenDatas, idField) {
	var result = [];
	if (oftenDatas) {
		if (oftenDatas instanceof Array) {
			for (var i = 0; i < oftenDatas.length; i++) {
				result[i] = { 'id': oftenDatas[i][idField], 'data': oftenDatas[i] };
			}
		} else {
			var tempArray = [];
			tempArray[0] = { 'id': oftenDatas[idField], 'data': oftenDatas };
			result = tempArray;
		}
	}

	return result;
}
// 规范化常用数据为数组
function formatOftenFromServer(oftenDatas) {
	var result = [];
	if (oftenDatas && oftenDatas.dataset && oftenDatas.dataset instanceof Array) {
		var dataset = oftenDatas.dataset;
		for (var i = 0; i < dataset.length; i++) {
			result[i] = dataset[i].data;
		}
	}

	return result;
}

// 从服务器返回的常用数据中提取ids
function getOftenKeys(oftenDatas) {
	var keys = [];
	if (oftenDatas && oftenDatas.dataset && oftenDatas.dataset instanceof Array) {
		var dataset = oftenDatas.dataset;
		for (var i = 0; i < dataset.length; i++) {
			keys[i] = dataset[i].id;
		}
	}

	return keys;
}

/**为当前页选择的rows进行排序*/
function sortWithTableRows(rows, tableRows, pageCurrent, idField) {
	var result = [];
	_lodash2.default.forEach(tableRows, function (tableRow, index) {
		var found = false;
		// console.log('rows', rows)
		rows = _lodash2.default.filter(rows, function (row) {
			if (!found && row[idField] == tableRow[idField]) {
				row.pageCurrent = pageCurrent;
				result.push(row);
				found = true;
				return false;
			} else {
				return true;
			}
		});
	});
	return result;
}