'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reference = require('./actions/reference');

var _YYReferTree = require('./YYReferTree');

var _YYReferTree2 = _interopRequireDefault(_YYReferTree);

var _YYReferGrid = require('./YYReferGrid');

var _YYReferGrid2 = _interopRequireDefault(_YYReferGrid);

var _YYReferTreeGrid = require('./YYReferTreeGrid');

var _YYReferTreeGrid2 = _interopRequireDefault(_YYReferTreeGrid);

var _ReferConstants = require('./constants/ReferConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
** 参照窗
** 1. 应用代码直接调用
** 2. YYReferInput调用
**/
var YYClass = require('../base/YYClass');
var Modal = require('../modal/YYModal');
var field = YYClass.field;
var PropTypes = YYClass.PropTypes;

var AuthToken = require("../../utils/AuthToken");

var mapStateToProps = function mapStateToProps(state) {
	return {
		refinfo: state.refinfo
	};
};
var uiMeta = {
	name: 'refer-dialog',
	fields: [
	//field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
	field('serverUrl', null, PropTypes.string, true, '参照服务url'), field('show', false, PropTypes.bool, false, '是否显示参照框'), field('often', false, PropTypes.bool, false, '是否显示常用'), field('multiselect', false, PropTypes.bool, false, '是否支持多选'), field('initialValue', null, PropTypes.oneOfType([PropTypes.object, PropTypes.Array]), false, '默认初始值'), field('onOk', null, PropTypes.func, true, '确认操作回调函数'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数'), field('refinfokey', null, PropTypes.string, true, '参照code'), field('customheader', null, PropTypes.element, false, '自定义header'), field('dialogWidth', null, PropTypes.number, false, '自定义窗口宽度'), field('queryparam', null, PropTypes.oneOfType([PropTypes.func, PropTypes.object]), false, '查询条件(过期)'), field('condition', null, PropTypes.oneOfType([PropTypes.func, PropTypes.object]), false, '自定义查询条件'), field('maskClosable', false, PropTypes.bool, false, '点击蒙层是否关闭参照窗口'), field('checkControl', true, PropTypes.bool, false, '树节点是否父子联动'), field('treeValue', null, PropTypes.string, false, '树表参照中，树默认初始值节点id'), field('multiTreeValue', null, PropTypes.Array, false, '树表参照(树切换场景)中，树默认初始值节点ids'), field('tagNodes', null, PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]), false, '默认高亮绿色显示的节点'), field('searchPlaceholder', null, PropTypes.string, false, '搜索框显示信息'), field('customButtons', null, PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]), false, '自定义按钮')]
};
var YYReferDialog = YYClass.create({
	uiMeta: uiMeta,
	getInitialState: function getInitialState() {
		return {
			dataurl: null, //请求数据url
			refinfo: this.props.refinfo.info, //参照注册信息
			ifDoRender: false // 初始化时不走render，因为componentDidMount中确定是重新查询refinfo还是用上次的。经过判断，避免多余查询
		};
	},
	componentDidMount: function componentDidMount() {
		// 根据传入的参照code，查询参照注册信息
		var _props = this.props,
		    refinfokey = _props.refinfokey,
		    dispatch = _props.dispatch,
		    refinfo = _props.refinfo;

		if (!refinfokey) {
			console.warn("refinfokey不能为空");
		} else if (refinfokey !== refinfo.refinfokey) {
			//当打开的参照和上次不是同一个时，做查询
			var serverUrl = this.props.serverUrl;
			dispatch((0, _reference.getRefinfo)(serverUrl, refinfokey, { refCode: refinfokey }));

			//查询常用数据
			if (this.props.often) {
				var userId = AuthToken.getUserId();
				dispatch((0, _reference.getOften)(serverUrl, { userId: userId, refinfokey: refinfokey, searchtext: null }));
			}
		} else {
			//当打开的参照和上次是同一个时，直接用之前的查询结果
			var refinfoData = refinfo.info;
			this._onGetRefInfo(refinfoData);
		}
	},

	getDefaultProps: function getDefaultProps() {
		return {
			keyField: {
				idField: "id",
				codeField: "code",
				nameField: "name"
			}
		};
	},
	_onGetRefInfo: function _onGetRefInfo(refinfo) {
		this.setState({
			ifDoRender: true
		});
		if (refinfo && refinfo.data) {
			this.setState({
				dataurl: refinfo.data.dataurl,
				refinfo: refinfo
			});
			this.props.keyField.idField = "id";
			this.props.keyField.codeField = "code";
			this.props.keyField.nameField = "name";
			if (refinfo.data.idField != null && refinfo.data.idField !== "") {
				this.props.keyField.idField = refinfo.data.idField;
			}
			if (refinfo.data.codeField != null && refinfo.data.codeField !== "") {
				this.props.keyField.codeField = refinfo.data.codeField;
			}
			if (refinfo.data.nameField != null && refinfo.data.nameField !== "") {
				this.props.keyField.nameField = refinfo.data.nameField;
			}
			// 添加存储进store，供YYReferInput单选时根据输入的内容显示可选常用数据
			var store = window.localStorage;
			if (store) {
				var userCode = AuthToken.getUserCode();
				var storeKey = _ReferConstants.REFER_KEYFIELD + userCode + "-" + this.props.refinfokey;
				store.setItem(storeKey, JSON.stringify(this.props.keyField));
			}
		} else {
			this.setState({
				dataurl: null,
				refinfo: refinfo
			});
		}
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (nextProps.refinfo.refinfokey !== this.props.refinfo.refinfokey) {
			// refinfokey 不相同时，说明refinfo有更新。 
			// 后期如果referinput中打开dialog方式有优化，则在此处条件添加props.refinfokey变化时重查询功能
			var refinfo = nextProps.refinfo.info;
			this._onGetRefInfo(refinfo);
		}
	},
	_getStandardedValue: function _getStandardedValue(value) {
		var retVal = null;
		if (value) {
			if (value instanceof Array) {
				// 多选时返回对象
				retVal = [];
				for (var i = 0, l = value.length; i < l; i++) {
					var tempObj = {};
					tempObj.id = value[i][this.props.keyField.idField];
					tempObj.code = value[i][this.props.keyField.codeField];
					tempObj.name = value[i][this.props.keyField.nameField];
					retVal.push(tempObj);
				}
			} else {
				// 单选时、返回对象
				retVal = {};
				retVal.id = value[this.props.keyField.idField];
				retVal.code = value[this.props.keyField.codeField];
				retVal.name = value[this.props.keyField.nameField];
			}
		}
		return retVal;
	},

	//  selectedNode：选择的树节点 只对树表参照有效
	onOk: function onOk(fullValue, selectedNode) {
		var shortValue = this._getStandardedValue(fullValue);
		if (this.props.onOk) {
			this.props.onOk(shortValue, this.props.keyField, fullValue, selectedNode);
		}
	},

	// 选择的树节点改变后，回调。（非关闭dialog的情形）
	onSelectedChanged: function onSelectedChanged(fullValue) {
		var shortValue = this._getStandardedValue(fullValue);
		if (this.props.onSelectedChanged) {
			this.props.onSelectedChanged(shortValue, this.props.keyField, fullValue);
		}
	},
	onCancel: function onCancel() {
		if (this.props.onCancel) {
			this.props.onCancel();
		}
	},

	//根据传递的参数，组织查询条件为  cond1=val1&cond2=val2&cond3=val3&
	getQueryStr: function getQueryStr(conds) {
		if (conds) {
			if (typeof conds === 'function') {
				//查询条件是 function, 则先执行func获取到结果对象
				conds = conds();
			}
			if ((typeof conds === 'undefined' ? 'undefined' : _typeof(conds)) === 'object') {
				//查询条件是 object
				var arr = [];
				for (var i = 0, keys = Object.keys(conds), l = keys.length; i < l; i++) {
					arr.push(keys[i] + "=" + conds[keys[i]]);
				}
				return arr.join('&');
			}
		}
		return '';
	},

	// 供应用代码调用，刷新参照数据，触发重新查询
	doReload: function doReload() {
		var refinfo = this.props.refinfo.info;
		var refType = refinfo && refinfo.data ? refinfo.data.refType : null;
		if (refType) {
			switch (refType) {
				case 'tree':
					this.refs.treerefer.getWrappedInstance().onReload();
					break;
				case 'grid':
					this.refs.gridrefer.getWrappedInstance().onReload();
					break;
				case 'treegrid':
					this.refs.treegridrefer.getWrappedInstance().onReload();
					break;
				default:
					break;
			}
		}
	},
	// 在渲染前清除上次打开参照的数据，避免出现数据错乱情况
	componentWillMount: function componentWillMount() {
		var dispatch = this.props.dispatch;

		dispatch((0, _reference.clearPreDatas)());
	},
	//获取所选数据API：调用者根据this.refs.设置的ref名.getCurrentSelected来获取数据
	getCurrentSelected: function getCurrentSelected() {
		if (this.refs.privateRefContent && this.refs.privateRefContent.refs.wrappedInstance) {
			var currentSelected = this.refs.privateRefContent.refs.wrappedInstance.getCurrentSelected();
			if (currentSelected) {
				var fullValue = currentSelected.fullValue;
				return {
					shortValue: this._getStandardedValue(fullValue),
					keyField: this.props.keyField,
					fullValue: fullValue,
					selectedNode: currentSelected.selectedNode
				};
			}
		}
		return null;
	},
	render: function render() {
		var that = this;
		if (this.state.ifDoRender) {
			var refcode = null,
			    refname = null,
			    refType = null,
			    operateurl = null,
			    operatefield = null,
			    treerelyurl = null,
			    gridrelyurl = null,
			    relyfield = null,
			    orderfield = null,
			    treerelyselect = [],
			    gridheaders = null,
			    pageSize = null,
			    lazyTree = null;
			var refinfo = this.state.refinfo;
			if (refinfo) {
				var data = refinfo.data;
				if (data) {
					refcode = data.refCode;
					refname = data.refName;
					refType = data.refType;
					operateurl = data.operateurl;
					operatefield = data.operatefield;
					treerelyurl = data.treerelyurl;
					gridrelyurl = data.gridrelyurl;
					relyfield = data.relyfield;
					orderfield = data.orderfield;
					treerelyselect = data.treerelyselect;
					gridheaders = data.gridheaders;
					pageSize = data.pageSize;
				}
			}

			var dataurl = null;
			if (this.state.dataurl) {
				dataurl = this.state.dataurl;
			}
			var querystr = this.getQueryStr(this.props.queryparam);

			var keyField = this.props.keyField;
			var nameField = keyField.nameField ? keyField.nameField : 'name';
			var idField = keyField.idField ? keyField.idField : 'id';
			var codeField = keyField.codeField ? keyField.codeField : 'code';

			var initialValue = this.props.initialValue;
			if (typeof initialValue !== "array" && (typeof initialValue === 'undefined' ? 'undefined' : _typeof(initialValue)) !== "object") {
				// 目前只支持初始值传递array 或者 object
				initialValue = null;
			};
			var props = {
				nameField: nameField,
				idField: idField,
				codeField: codeField,
				refinfokey: this.props.refinfokey,
				customheader: this.props.customheader,
				refcode: refcode,
				refname: refname,
				dataurl: dataurl,
				searchPlaceholder: this.props.searchPlaceholder ? this.props.searchPlaceholder : "请输入搜索的" + refname,
				operateurl: operateurl,
				operatefield: operatefield,
				orderfield: orderfield,
				often: this.props.often ? this.props.often : false,
				multiselect: this.props.multiselect,
				querystr: querystr,
				condition: this.props.condition,
				onOk: this.onOk,
				onCancel: this.onCancel,
				onSelectedChanged: this.onSelectedChanged,
				treerelyselect: treerelyselect,
				initialValue: initialValue,
				gridheaders: gridheaders,
				serverUrl: this.props.serverUrl,
				pageSize: pageSize,
				customButtons: this.props.customButtons

			};
			var component = null;
			//获取窗口的高度、宽度。高度80%，宽度80%，margin 10%。树的宽度固定。
			var docWidth = document.documentElement.clientWidth;
			var docHeight = document.documentElement.clientHeight;
			var customizeWidth = this.props.dialogWidth;
			var customizeHeight = this.props.dialogHeight;
			var dialogWidth = 0;
			var dialogHeight = customizeHeight ? customizeHeight : docHeight * 0.8;
			var footerH = this.props.multiselect ? 100 : 44; //单选时不需要显示已选择的标签区域
			var headerH = 45;
			var contentH = dialogHeight - footerH - headerH - 15 - 5; //内容区域的高度随着窗口的高度适应、15:padding-bottom、5:paddingTop
			if (refType && this.state.dataurl) {
				if (refType === 'tree' || refType === 'lazytree') {
					dialogWidth = customizeWidth ? customizeWidth : 480;
					component = _react2.default.createElement(_YYReferTree2.default, _extends({ ref: 'privateRefContent' }, props, { lazytree: refType === 'lazytree' ? true : false, tagNodes: this.props.tagNodes, checkControl: that.props.checkControl, contentH: contentH }));
				} else if (refType === 'grid') {
					dialogWidth = customizeWidth ? customizeWidth : docWidth * 0.8;
					component = _react2.default.createElement(_YYReferGrid2.default, _extends({ ref: 'privateRefContent' }, props, { contentH: contentH }));
				} else if (refType === 'treegrid' || refType === 'lazytreegrid') {
					dialogWidth = customizeWidth ? customizeWidth : docWidth * 0.85;
					component = _react2.default.createElement(_YYReferTreeGrid2.default, _extends({ ref: 'privateRefContent' }, props, { lazytree: refType === 'lazytreegrid' ? true : false, tagNodes: this.props.tagNodes, treeValue: that.props.treeValue, multiTreeValue: this.props.multiTreeValue, treerelyurl: treerelyurl, gridrelyurl: gridrelyurl, relyfield: relyfield, onNodeSelect: this.props.onNodeSelect, dialogWidth: dialogWidth, contentH: contentH }));
				}
			}
			var modalTitle = !this.props.often ? refname : null;
			return _react2.default.createElement(
				'div',
				{ className: this.className() },
				refinfo && dataurl ? _react2.default.createElement(
					Modal,
					{
						width: dialogWidth,
						title: modalTitle,
						style: { height: dialogHeight, top: docHeight * 0.1 },
						footer: null,
						closable: true,
						maskClosable: that.props.maskClosable === true ? true : false,
						onCancel: this.onCancel,
						className: this.className('modal'),
						visible: this.props.show },
					component
				) : null
			);
		} else {
			return null;
		}
	}
});

module.exports = (0, _reactRedux.connect)(mapStateToProps, null, null, { withRef: true })(YYReferDialog);