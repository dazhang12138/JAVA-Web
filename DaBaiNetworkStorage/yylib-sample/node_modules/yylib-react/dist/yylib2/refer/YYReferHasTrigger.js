'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                  ** 单选模式的参照输入框
                                                                                                                                                                                                                                                                  ** 与YYReferInput相比，只是多了单选下拉等交互
                                                                                                                                                                                                                                                                  **
                                                                                                                                                                                                                                                                  **/


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ReferConstants = require('./constants/ReferConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var YYClass = require('../base/YYClass');
var Trigger = require('rc-trigger');
var _ = require('lodash');
var ajax = require('../../utils/ajax');
var AuthToken = require("../../utils/AuthToken");

var field = YYClass.field;
var PropTypes = YYClass.PropTypes;
var YYInputButton = require('../formcontrols/inputbutton/YYInputButton');


var uiMeta = {
    name: 'refer-trigger',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('serverUrl', null, PropTypes.string, true, '参照服务url'), field('refinfokey', null, PropTypes.string, true, '参照code'), field('often', false, PropTypes.bool, false, '是否显示常用'), field('value', null, PropTypes.string, false, '输入框显示的值'), field('inputProps', null, PropTypes.object, true, '输入框的props对象'), field('onClearClick', null, PropTypes.func, true, '清除数据回调'),, field('onChoose', null, PropTypes.func, true, '选择下拉数据后回调'),, field('searchShow', ['name', 'code'], PropTypes.array, false, '下拉内容显示字段')]
};
var selectedDatas = {};
var YYReferHasTrigger = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            value: this.props.value,
            keyFields: { idField: 'id', nameField: 'name', codeField: 'code' },
            dataUrl: null,
            treeData: null, // 树型参照的话， 档案数据，存储到state，避免多次查询
            ifTree: false, //是否是树型参照，树型参照前台实现筛选，表、树表参照后台接口支持直接调用得到结果
            ifShowTrigger: false, //是否显示trigger
            oftenData: null, //下拉里显示的数据源。初始需求来自常用数据，现在改成直接根据条件查询
            curHover: 0 //当前hover，或者根据上下键盘按钮选择到的下拉数据条目
        };
    },

    componentDidMount: function componentDidMount() {
        this._getKeyFields();
    },
    componentWillReceiveProps: function componentWillReceiveProps(props) {
        if (props.value !== this.props.value || this.state.value !== props.value) {
            this.setState({
                value: props.value
            });
        }
    },
    // 查询参照信息,为了获取keyfields
    _getKeyFields: function _getKeyFields() {
        var refCode = this.props.refinfokey;
        var that = this;
        ajax.request({
            method: 'GET',
            url: this.props.serverUrl + _ReferConstants.GET_REFINFO_BYCODE,
            query: { refCode: refCode },
            type: 'json',
            success: function success(data) {
                if (data && data.data) {
                    var info = data.data;
                    var ifTree = info.refType === 'tree' ? true : false;
                    that.setState({
                        keyFields: { idField: info.idField, nameField: info.nameField, codeField: info.codeField },
                        dataUrl: info.dataurl,
                        ifTree: ifTree
                    });
                }
            },
            error: function error(data) {
                // 暂不做处理
            }
        });
    },
    //刷选树数据
    _getSearchedTreeData: function _getSearchedTreeData(nodes, propName, propCode, propValue) {
        var _results = [];
        var _nodes = _.isArray(nodes) ? nodes : [];
        var _childPropName = 'children';
        for (var i = 0; i < _nodes.length; i++) {
            var node = _nodes[i];
            if (!_.isObject(node)) continue;
            if (node[propName] && node[propName].indexOf(propValue) > -1 || node[propCode] && node[propCode].indexOf(propValue) > -1) {
                _results.push(node);
            }
            if (node[_childPropName] && node[_childPropName].length > 0) {
                var currResults = this._getSearchedTreeData(node[_childPropName], propName, propCode, propValue);
                if (currResults != null) {
                    _results = _results.concat(currResults);
                }
            }
        }
        return _results;
    },
    // 发起请求查询数据，不走reducer流程是为了避免以下情形带来的bug：componentWillReceiveProps多次调用
    _doQueryOften: function _doQueryOften(searchText, ifShowTrigger) {
        var that = this;
        var userId = AuthToken.getUserId();
        var refinfokey = this.props.refinfokey;
        var keyFields = that.state.keyFields;
        if (that.state.ifTree && that.state.treeData !== null) {
            //如果已经查询过treedata，那么从treedata中获取，不重复查询
            this.setState({
                oftenData: that._getSearchedTreeData(that.state.treeData, keyFields.nameField, keyFields.codeField, searchText),
                value: searchText,
                ifShowTrigger: ifShowTrigger,
                curhover: 0
            });
        } else {
            var request = {
                method: 'GET',
                url: that.state.dataUrl,
                type: 'json',
                success: function success(data) {
                    if (data) {
                        if (that.state.ifTree === true) {
                            that.setState({
                                oftenData: that._getSearchedTreeData(data, keyFields.nameField, keyFields.codeField, searchText),
                                treeData: data,
                                value: searchText,
                                ifShowTrigger: ifShowTrigger,
                                curhover: 0
                            });
                        } else if (data.data && data.data.content) {
                            that.setState({
                                oftenData: data.data.content,
                                value: searchText,
                                ifShowTrigger: ifShowTrigger,
                                curhover: 0
                            });
                        }
                    }
                },
                error: function error(data) {}
            };
            that.state.ifTree ? null : request.query = searchText;
            ajax.request(request);
        }
    },
    onFocus: function onFocus() {
        var curValue = this.state.value;
        if (curValue && curValue.length > 0 && _.trim(curValue).length > 0) {
            // 根据搜索条件查询常用数据
            this._doQueryOften(curValue, true);
        } else {
            this.setState({
                oftenData: null
            });
        }
    },
    // 输入框内容改变触发
    onChangeValue: function onChangeValue(e, curValue) {
        if (curValue && curValue.length > 0 && _.trim(curValue).length > 0) {
            // 根据搜索条件查询常用数据
            this._doQueryOften(curValue, true);
        } else {
            this.setState({
                ifShowTrigger: false,
                value: curValue,
                oftenData: null
            });
        }
    },
    // 通过选择的数据id，得到整条数据
    _getFullValue: function _getFullValue(dataId) {
        var fullValue = null;
        var oftenData = this.state.oftenData;
        if (oftenData && oftenData.length > 0) {
            for (var i = 0; i < oftenData.length; i++) {
                // if(oftenData[i].id === dataId){
                if (oftenData[i][this.state.keyFields.idField] === dataId) {
                    // return oftenData[i].data;
                    return oftenData[i];
                }
            }
        }
    },
    onHoverContent: function onHoverContent(e) {
        this.setState({
            curHover: e.target && e.target.index ? e.target.index : this.state.curHover
        });
    },
    onChooseContent: function onChooseContent(e) {
        e.stopPropagation();
        this.setState({ curHover: 0 });
        e && e.target ? this._onChoose(e.target.id) : null;
    },
    _onChoose: function _onChoose(id) {
        if (id) {
            var fullValue = this._getFullValue(id);
            if (fullValue) {
                var keyFields = this.state.keyFields;
                var idField = keyFields.idField;
                var codeField = keyFields.codeField;
                var nameField = keyFields.nameField;
                var shortValue = { id: fullValue[idField], name: fullValue[nameField], code: fullValue[codeField] };
                this.props.onChoose(shortValue, keyFields, fullValue);
            }
        }
    },
    onKeyUp: function onKeyUp(e) {
        var keyCode = e.keyCode;
        var curHover = this.state.curHover;
        if (!this.state.ifShowTrigger) {
            this.setState({ ifShowTrigger: true });
            return;
        }
        if (keyCode === 13) {
            //enter
            this.setState({ ifShowTrigger: false });
            this._onChoose(this.state.oftenData[curHover][this.state.keyFields.idField]);
            return;
        }
        if (keyCode === 38) {
            //up
            curHover = curHover > 0 ? curHover - 1 : curHover;
        } else if (keyCode === 40) {
            //down
            var allLength = this.state.oftenData ? this.state.oftenData.length : 0;
            curHover = curHover < allLength - 1 ? curHover + 1 : curHover;
        } else {
            return;
        }
        this.setState({ curHover: curHover });
    },
    // 获取下拉显示内容 name、code是必须显示的字段
    _getPopupContent: function _getPopupContent() {
        var that = this;
        var popupContent = [];
        var oftenData = this.state.oftenData;
        var keyFields = this.state.keyFields;
        if (this.state.ifShowTrigger && oftenData && keyFields) {
            var handInputValue = this.state.value;
            var searchShow = this.props.searchShow;
            for (var i = 0; i < oftenData.length; i++) {
                var curData = oftenData[i];
                var curContent = '';
                var ifMatched = false;
                for (var _i = 0; _i < searchShow.length; _i++) {
                    var curShow = searchShow[_i] === 'name' ? keyFields.nameField : searchShow[_i] === 'code' ? keyFields.codeField : searchScope[_i];
                    if (curData[curShow]) {
                        curContent += curData[curShow] + '/';
                        if (curData[curShow].indexOf(handInputValue) !== -1) {
                            ifMatched = true;
                        }
                    }
                }
                if (!ifMatched) {
                    // 如果匹配的字段不在searchShow内，那么将匹配字段也显示在下拉内容中
                    for (var key in curData) {
                        if (curData[key] && curData[key].toString().indexOf(handInputValue) !== -1) {
                            curContent += curData[key] + '/';
                            break;
                        }
                    }
                }

                if (curContent) {
                    var curId = oftenData[i][this.state.keyFields.idField];
                    curContent = curContent.substring(0, curContent.length - 1); //去掉最后多余的'/'
                    var className = this.className('popup-content');
                    // 如果是当前hover的条目，拼接classname控制样式
                    var fullClassName = i === this.state.curHover ? className + ' curhover' : className;
                    popupContent.push(_react2.default.createElement(
                        'div',
                        { 'data-index': i, id: curId, onMouseOver: that.onHoverContent, onClick: that.onChooseContent, className: fullClassName },
                        curContent
                    ));
                }
            }
        }
        if (popupContent.length > 0) {
            return _react2.default.createElement(
                'div',
                null,
                popupContent
            );
        } else {
            return _react2.default.createElement('div', null);
        }
    },
    onPopupVisibleChange: function onPopupVisibleChange(popupVisible) {
        this.setState({
            ifShowTrigger: popupVisible
        });
    },
    render: function render() {
        var popupContent = this._getPopupContent();
        return _react2.default.createElement(
            'div',
            { onKeyUp: this.onKeyUp },
            _react2.default.createElement(
                Trigger,
                {
                    action: ["focus"],
                    popupAlign: { points: ['tl', 'bl'] },
                    onPopupVisibleChange: this.onPopupVisibleChange,
                    popup: popupContent,
                    popupClassName: this.className('popup'),
                    popupVisible: this.state.ifShowTrigger },
                _react2.default.createElement(YYInputButton, _extends({}, this.props.inputProps, { onFocus: this.onFocus, value: this.state.value, onChange: this.onChangeValue, onClearClick: this.props.onClearClick, buttonText: '\u9009\u62E9', buttonIcon: null }))
            )
        );
    }
});

module.exports = YYReferHasTrigger;