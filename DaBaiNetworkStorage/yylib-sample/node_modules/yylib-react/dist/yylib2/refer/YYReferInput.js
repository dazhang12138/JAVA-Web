'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                  ** 参照输入框
                                                                                                                                                                                                                                                                  ** 点击选择按钮，打开YYReferDialog
                                                                                                                                                                                                                                                                  ** 可在表单中使用
                                                                                                                                                                                                                                                                  **/

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reference = require('./actions/reference');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var YYClass = require('../base/YYClass');


var field = YYClass.field;
var PropTypes = YYClass.PropTypes;
var BaseHost = require('../../business/BaseHost');
var YYReferDialog = require('./YYReferDialog');
var YYInputButton = require('../formcontrols/inputbutton/YYInputButton');
var YYReferHasTrigger = require('./YYReferHasTrigger');


var uiMeta = {
    name: 'refer-input',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('serverUrl', BaseHost, PropTypes.string, true, '参照服务url'), field('often', false, PropTypes.bool, false, '是否显示常用'), field('multiselect', false, PropTypes.bool, false, '是否支持多选'), field('disabled', false, PropTypes.bool, false, '禁用'), field('onChange', null, PropTypes.func, true, '确认操作回调函数'), field('onShow', null, PropTypes.func, false, '打开参照前回调，回调返回false时，不打开参照'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数'), field('refinfokey', null, PropTypes.string, true, '参照code'), field('customheader', null, PropTypes.element, false, '自定义header'), field('value', null, PropTypes.oneOfType([PropTypes.object, PropTypes.Array]), false, '默认初始值'), field('treeValue', null, PropTypes.string, false, '树表参照中，树默认初始值节点id'), field('multiTreeValue', null, PropTypes.Array, false, '树表参照(树切换场景)中，树默认初始值节点ids'), field('dialogWidth', null, PropTypes.number, false, '自定义窗口宽度'), field('formatter', 'name', PropTypes.oneOfType([PropTypes.string, PropTypes.func]), false, '显示的列'), field('condition', null, PropTypes.oneOfType([PropTypes.func, PropTypes.object]), false, '查询条件'), field('onNodeSelect', null, PropTypes.func, false, '树表型参照树节点被选择时回调'), field('maskClosable', false, PropTypes.bool, false, '点击蒙层是否关闭参照窗口'), field('checkControl', true, PropTypes.bool, false, '树节点是否父子联动'), field('placeholder', null, PropTypes.string, false, '占位字符串'), field('inputSearch ', false, PropTypes.bool, false, '是否支持输入框搜索'), field('searchShow', ['name', 'code'], PropTypes.array, false, '下拉内容显示字段'), field('tagNodes', null, PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]), false, '默认高亮绿色显示的节点'), field('searchPlaceholder', null, PropTypes.string, false, '搜索框显示信息'), field('customButtons', null, PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]), false, '自定义按钮'), field('onBeforeChange', null, PropTypes.func, false, '返回true/false控制是否关闭选择窗口')]
};
var selectedDatas = {};
var YYReferInput = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        //var value = null;
        //if (this.props.__meta != undefined && this.props.__meta.initialValue != undefined) {
        //    value = this.props.__meta.initialValue;
        //} else if (this.props.value != undefined) {
        //    value = this.props.value;
        //} else if ((this.props.defaultValue != undefined)) {
        //    value = this.props.defaultValue;
        //}
        var _props = this.props,
            value = _props.value,
            defaultValue = _props.defaultValue;

        var value = value === null || value === undefined ? defaultValue : value;
        return {
            show: false,
            keyField: null,
            value: value,
            fullValue: null
        };
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('defaultValue' in nextProps) {
            if (this.props.defaultValue != nextProps.defaultValue) {
                this.setState({ value: nextProps.defaultValue });
            }
        }
        //value优先级高于defaultValue
        if ('value' in nextProps) {
            if (this.props.value != nextProps.value) {
                this.setState({ value: nextProps.value });
            }
        }
        //this.setState({
        //    value: props.value?props.value:props.defaultValue
        //});
    },
    // 打开参照dialog
    onOpenRef: function onOpenRef() {
        var onShow = this.props.onShow;
        if (onShow && typeof onShow === 'function' && onShow() === false) {
            return false;
        }
        this.setState({
            show: true
        });
    },
    onCancel: function onCancel() {
        this.setState({
            show: false
        });
    },
    //在dialog中点击确定回调    selectedNode：选择的树节点 只对树表参照有效
    onOk: function onOk(shortValue, keyField, fullValue, selectedNode) {
        var isValidate = true;
        if (this.props.onBeforeChange) {
            isValidate = this.props.onBeforeChange(shortValue, keyField, fullValue, selectedNode);
        }
        if (!isValidate) {
            return false;
        }
        if (!keyField) {
            keyField = this.state.keyField;
        }
        if (this.props.onChange != undefined) {
            this.props.onChange(shortValue, keyField, fullValue, selectedNode);
        }
        this.setState({
            show: false,
            keyField: keyField,
            value: shortValue, // obj  id/name/code
            fullValue: fullValue
        });
    },
    //当dialog中选择的tree节点变化后回调
    onSelectedChanged: function onSelectedChanged(shortValue, keyField, fullValue) {
        selectedDatas.shortValue = shortValue;
        selectedDatas.keyField = keyField;
        selectedDatas.fullValue = fullValue;
    },
    //按照formatter规范化input里显示的内容
    formatShowValue: function formatShowValue() {
        var value = this.state.value;
        var fullValue = this.state.fullValue;
        if (typeof value === 'string' && value === fullValue) {
            return value;
        } else {
            var formatter = this.props.formatter;
            if (formatter) {
                if (typeof formatter === 'function') {
                    //当formatter是function 执行回调得出值
                    return formatter(value, fullValue);
                } else if (typeof formatter === 'string') {
                    //当formatter为单值
                    return this.getValBySingleShowField(value, formatter);
                }
            } else {
                //showFields为空时，取 name
                return this.getValBySingleShowField(value, 'name');
            }
            return '';
        }
    },
    //触发dialog中表格数据的重新查询
    doReload: function doReload() {
        var dispatch = this.props.dispatch;

        dispatch((0, _reference.doReload)());
    },
    //供外部应用组件调用，实时获取参照中选择的数据(dialog未关闭、未确定情况下)
    getSelected: function getSelected() {
        return selectedDatas;
    },
    //当formatter是单个字段时，规范化input里显示的内容
    getValBySingleShowField: function getValBySingleShowField(curVal, showFields) {
        var retVal = '';
        if (curVal != null) {
            if (typeof curVal == "string") {
                retVal = curVal;
            } else if (curVal instanceof Array) {
                //当获取的值是 数组
                var back = [];
                for (var i = 0, l = curVal.length; i < l; i++) {
                    back.push(curVal[i][showFields]);
                }
                return back.join(",");
            } else {
                //当获取的是单值对象
                retVal = curVal[showFields];
            }
        }
        return retVal;
    },
    // 清除
    onClearClick: function onClearClick() {
        if (this.props.onChange != undefined) {
            var keyField = this.state.keyField;
            this.props.onChange(null, keyField, null);
        }
        this.setState({
            value: null,
            fullValue: null
        });
    },

    //获取所选数据API：调用者根据this.refs.设置的ref名.getCurrentSelected来获取数据
    getCurrentSelected: function getCurrentSelected() {
        return this.refs.privateRefDialog && this.refs.privateRefDialog.refs && this.refs.privateRefDialog.refs.wrappedInstance ? this.refs.privateRefDialog.refs.wrappedInstance.getCurrentSelected() : null;
    },
    render: function render() {
        var props = this.props;
        var formatValue = this.formatShowValue();
        var inputProps = {
            placeholder: props.placeholder,
            disabled: props.disabled,
            buttonClick: this.onOpenRef,
            title: formatValue
        };
        props.show = true;
        props.onOk = this.onOk;
        props.onCancel = this.onCancel;
        props.onSelectedChanged = this.onSelectedChanged;
        props.initialValue = this.state.value;
        return _react2.default.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            !props.multiselect && props.inputSearch ? _react2.default.createElement(YYReferHasTrigger, { inputProps: inputProps, refinfokey: props.refinfokey, serverUrl: props.serverUrl,
                searchShow: props.searchShow, onClearClick: this.onClearClick,
                onChoose: this.onOk, value: formatValue }) : _react2.default.createElement(YYInputButton, _extends({}, inputProps, { value: formatValue, readOnly: true, onClearClick: this.onClearClick, buttonText: '\u9009\u62E9', buttonIcon: null })),
            this.state.show ? _react2.default.createElement(YYReferDialog, _extends({ ref: 'privateRefDialog' }, props)) : null
        );
    }
});

//解除不必要的reducer关联，只是用到store.dispatch,以解决componentWillReceiveProps多次调用引起的赋值bug
module.exports = (0, _reactRedux.connect)(null, null, null, { withRef: true })(YYReferInput);