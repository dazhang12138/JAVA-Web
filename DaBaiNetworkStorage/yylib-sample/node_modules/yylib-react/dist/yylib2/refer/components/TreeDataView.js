'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var React = require('react');
var _ = require('lodash');
var YYClass = require('../../base/YYClass');
var YYButton = require('../../button/YYButton');
var YYScrollbars = require('../../scrollbar/YYScrollbar');

var _require = require('../actions/reference'),
    getTreeData = _require.getTreeData,
    addOften = _require.addOften,
    deleteOften = _require.deleteOften,
    getLazyTreeData = _require.getLazyTreeData;

var YYTreeInRefer = require('../YYTreeInRefer');

var _require2 = require('../constants/ReferConstants'),
    REFER_ADD_OFTEN = _require2.REFER_ADD_OFTEN;

require('../style/index.less');

var _require3 = require('../utils/YYReferUtils'),
    formatOftenToServer = _require3.formatOftenToServer,
    formatOftenFromServer = _require3.formatOftenFromServer;

var AuthToken = require("../../../utils/AuthToken");
var ajax = require('../../../utils/ajax');
var store = window.localStorage;
function noop() {};
var DataView = YYClass.create({
    getInitialState: function getInitialState() {
        return {
            checkedKeys: this.props.checkedKeys,
            checkedNodes: this.props.checkedNodes,
            selectedNode: this.props.selectedNode,
            selectedNodeKey: this.props.selectedNodeKey
        };
    },
    //处理树数据的子数据
    _getTreeChildren: function _getTreeChildren(childrenData) {
        var _this = this;

        var data = [];
        if (childrenData && childrenData.length > 0) {
            childrenData.map(function (elem, eindex) {
                var node = _.cloneDeep(elem);
                node.key = elem.id;
                if (elem.children && elem.children.length > 0) {
                    node.children = _this._getTreeChildren(elem.children);
                } else {
                    node.isLeaf = node.isLeaf == null ? true : node.isLeaf; //如果isLeaf存在，就保留原始值， 否则设置isLeaf=true
                }
                data.push(node);
            });
        }
        return data;
    },
    //获取树结构的数据
    _getTreeData: function _getTreeData() {
        var _this2 = this;

        var treeData = [];
        // var nodes = this.props.refinfo.tree;
        var nodes = this.props.refTreeData;
        if (nodes && nodes.length > 0) {
            nodes.map(function (elem, idx) {
                var node = _.cloneDeep(elem);
                node.key = elem.id;
                node.children = _this2._getTreeChildren(elem.children);
                treeData.push(node);
            });
        }
        return treeData;
    },
    // 保存/删除 常用数据到服务器. oper=0: 手动， oper=1：自动
    _saveOften: function _saveOften(records, oper, isDelete, ifShowMsg) {
        var dispatch = this.props.dispatch;
        var userId = AuthToken.getUserId();
        var refinfokey = this.props.refinfokey;
        var idField = this.props.idField;
        var serverUrl = this.props.serverUrl;
        if (isDelete === true) {
            var ids = records[idField]; // 当前删除只支持单个删除，后续支持批量删除后在此扩展
            dispatch(deleteOften(serverUrl, { userId: userId, refinfokey: refinfokey, ids: ids }));
        } else {
            var dataset = formatOftenToServer(records, idField);
            if (dataset && dataset.length > 0) {
                dispatch(addOften(serverUrl, { userId: userId, refinfokey: refinfokey, oper: oper, dataset: dataset }, ifShowMsg));
            }
        }
    },

    //添加常用
    addOften: function addOften(e) {
        var multiselect = this.props.multiselect;

        var nodes = multiselect ? this.state.checkedNodes : this.state.selectedNode;
        var nodeKey = null;
        if (store && nodes) {
            this._saveOften(nodes, 0, false, true);
        }
    },
    onCheckNodes: function onCheckNodes(info, e) {
        var _this3 = this;

        var checkedNodes = [];
        if (info.length > 0 && e.checkedNodes.length > 0) {
            var nodes = e.checkedNodes;
            for (var i = nodes.length - 1; i >= 0; i--) {
                checkedNodes[i] = {
                    key: nodes[i].key,
                    id: nodes[i].key,
                    code: nodes[i].props.code,
                    name: nodes[i].props.title,
                    extdata: nodes[i].props.extdata
                };
            };
        }
        this.setState({
            checkedKeys: info,
            checkedNodes: checkedNodes
        }, function () {
            if (_.isFunction(_this3.props.onCheckNodes)) {
                _this3.props.onCheckNodes(_this3.state.checkedKeys, _this3.state.checkedNodes);
            }
        });
        this.doHandleDatas(checkedNodes, null, false);
    },
    //选择节点
    onSelectNode: function onSelectNode(info, e) {
        this._onSelectSingleNode(info, e, false);
    },
    //双击节点
    onNodeDblClick: function onNodeDblClick(info, e) {
        this._onSelectSingleNode(info, e, true);
    },
    // 处理onSelect、onNodeDblClick
    _onSelectSingleNode: function _onSelectSingleNode(info, e, ifHandleOK) {
        var _this4 = this;

        if (info) {
            var nodeInfo = info;
            var nodeProps = {};
            if (info instanceof Array && info.length > 0) {
                nodeInfo = info[0];
                nodeProps = e.selectedNodes[0].props;
            } else {
                nodeProps = e.node.props;
            }
            var selectedNode = {
                key: nodeInfo,
                id: nodeInfo,
                code: nodeProps.code,
                name: nodeProps.title,
                extdata: nodeProps.extdata
            };
            this.setState({
                selectedNodeKey: nodeInfo,
                selectedNode: selectedNode
            }, function () {
                if (_.isFunction(_this4.props.onSelectNode)) {
                    _this4.props.onSelectNode(_this4.state.selectedNodeKey, _this4.state.selectedNode);
                }
                if (_.isFunction(_this4.props.onNodeDblClick)) {
                    _this4.props.onNodeDblClick(_this4.state.selectedNodeKey, _this4.state.selectedNode);
                }
            });
            this.doHandleDatas(null, selectedNode, ifHandleOK);
        }
    }
    // 获取查询条件
    , getQuery: function getQuery(querystr, condition, searchText, orderfield) {
        var getQuery = {};
        if (querystr && querystr.length > 0) getQuery.relyCondition = querystr;
        if (orderfield && orderfield.length > 0) getQuery.orderCondition = orderfield;
        if (searchText && searchText.length > 0) getQuery.searchText = searchText;
        var _condition = ajax.getParams(condition);
        if (!_.isEmpty(_condition) && _.isPlainObject(_condition)) {
            //转成JSON格式字符串
            getQuery.condition = JSON.stringify(_condition);
        }
        return getQuery;
    },
    //异步加载树节点
    _loadData: function _loadData(treeNode) {
        var _this5 = this;

        var _props = this.props,
            querystr = _props.querystr,
            condition = _props.condition,
            orderfield = _props.orderfield,
            dataurl = _props.dataurl,
            dispatch = _props.dispatch;

        var queryData = this.getQuery(querystr, condition, null, null, orderfield, 1);
        return new Promise(function (resolve) {
            getLazyTreeData({
                dispatch: dispatch,
                dataurl: dataurl,
                queryData: queryData,
                treeData: _this5.props.refinfo.tree,
                curKey: treeNode.props.eventKey,
                resolve: resolve
            });
        });
    },
    doHandleDatas: function doHandleDatas(checkedNodes, selectedNode, isHandleOk) {
        var nodes = checkedNodes ? checkedNodes : this.state.checkedNodes;
        var node = selectedNode ? selectedNode : this.state.selectedNode;
        var multiselect = this.props.multiselect;

        var selNode = null;
        if (multiselect) {
            selNode = nodes;
        } else {
            selNode = node;
        }
        if (isHandleOk) {
            if (this.props.often) {
                this._saveOften(selNode, 1, false);
            }
            //点击确认按钮 逻辑
            this.props.onOk(selNode);
        } else {
            //实时传递选择的数据 逻辑
            this.props.onSelectedChanged(selNode);
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('checkedNodes' in nextProps) {
            this.setState({ checkedNodes: nextProps.checkedNodes });
        }
        if ('selectedNode' in nextProps) {
            this.setState({ selectedNode: nextProps.selectedNode });
        }
        if ('selectedNodeKey' in nextProps) {
            this.setState({ selectedNodeKey: nextProps.selectedNodeKey });
        }
    },
    render: function render() {
        var _props2 = this.props,
            often = _props2.often,
            multiselect = _props2.multiselect,
            tagNodes = _props2.tagNodes,
            searchPlaceholder = _props2.searchPlaceholder,
            checkControl = _props2.checkControl,
            lazytree = _props2.lazytree,
            customheader = _props2.customheader,
            contentH = _props2.contentH,
            checkedKeys = _props2.checkedKeys,
            selectedNodeKey = _props2.selectedNodeKey,
            refinfo = _props2.refinfo;
        var _state = this.state,
            checkedKeys = _state.checkedKeys,
            selectedNodeKey = _state.selectedNodeKey;

        //是否显示常用按钮

        var showOftenBtn = !selectedNodeKey && !checkedKeys;

        //获取树结构数据
        var treeData = this._getTreeData();
        //异步树属性
        var lazyProps = {};
        if (lazytree) {
            lazyProps.loadData = this._loadData;
        }
        //当有添加常用的按钮时，流出常用按钮的区域高度
        var treeH = often ? contentH - 52 : contentH;
        return React.createElement(
            'div',
            null,
            customheader,
            React.createElement(
                YYScrollbars,
                { style: { height: treeH } },
                React.createElement(YYTreeInRefer, _extends({
                    placeholder: searchPlaceholder,
                    searchFilter: true,
                    treeData: treeData,
                    checkable: multiselect,
                    tagNodes: tagNodes,
                    checkedKeys: checkedKeys,
                    selectedKeys: selectedNodeKey,
                    checkStrictly: checkControl === false ? true : false,
                    onCheckNodes: multiselect ? this.onCheckNodes : noop,
                    onNodeDblClick: multiselect ? noop : this.onNodeDblClick,
                    onSelectNode: this.onSelectNode,
                    loading: this.props.loading,
                    lazytree: lazytree,
                    emptyView: React.createElement(
                        'div',
                        { className: 'yyui-refer-nodata' },
                        this.props.loading ? '正在加载数据' : '暂无相关数据'
                    )
                }, lazyProps))
            ),
            often ? React.createElement(
                'div',
                { className: 'yyui-refer-addoften', style: { padding: 10, height: 52 } },
                React.createElement(
                    YYButton,
                    { disabled: showOftenBtn, className: 'yyui-refer-button-ghost', ghost: true, onClick: this.addOften },
                    REFER_ADD_OFTEN
                )
            ) : null
        );
    }
});

module.exports = DataView;