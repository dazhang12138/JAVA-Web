'use strict';

var _YYReferOperateDlg = require('./YYReferOperateDlg');

var _YYReferOperateDlg2 = _interopRequireDefault(_YYReferOperateDlg);

var _ReferConstants = require('./constants/ReferConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
** 表型参照：由YYReferDialog调用
**/
var React = require('react');
var _ = require('lodash');
var ajax = require('../../utils/ajax');
var YYClass = require('../base/YYClass');
var YYTabs = require('../tabs/YYTabs');
var YYTab = require('../tabs/YYTab');
var YYIcon = require('../icon/YYIcon');
var YYRow = require('../layout/YYRow');
var YYCol = require('../layout/YYCol');
var YYButton = require('../button/YYButton');
var YYTable = require('../table/YYTable');
var YYPagination = require('../paging/YYPagination');
var YYSelect = require('../formcontrols/select/YYSelect');
var YYMessage = require('../message/YYMessage');
var YYScrollbar = require('../scrollbar/YYScrollbar');
var YYInputButton = require('../formcontrols/inputbutton/YYInputButton');
var YYFootInRefer = require('./YYFootInRefer');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('react-redux'),
    connect = _require.connect;

var _require2 = require('./actions/reference'),
    getGridData = _require2.getGridData,
    addOften = _require2.addOften,
    deleteOften = _require2.deleteOften,
    loadingReferGrid = _require2.loadingReferGrid;

require('./style/index.less');
var AuthToken = require("../../utils/AuthToken");
var DataUtil = require('../../utils/DataUtil');
// var pageSize = 10;
var store = window.localStorage;
var tableKey = null;
var charCode = String.fromCharCode(2);

var _require3 = require('./utils/YYReferUtils'),
    getColumns = _require3.getColumns,
    ifInArray = _require3.ifInArray,
    removeRow = _require3.removeRow,
    getPagination = _require3.getPagination,
    sortWithTableRows = _require3.sortWithTableRows,
    getDefaultRows = _require3.getDefaultRows,
    getDefaultKeys = _require3.getDefaultKeys,
    getHeaders = _require3.getHeaders,
    formatOftenToServer = _require3.formatOftenToServer,
    formatOftenFromServer = _require3.formatOftenFromServer,
    getOftenKeys = _require3.getOftenKeys;

var mapStateToProps = function mapStateToProps(state) {
	return {
		refinfo: state.refinfo,
		loadingReferGrid: state.refinfo.loadingReferGrid
	};
};

function noop() {};
//定义META
var uiMeta = {
	name: 'refer-grid',
	fields: [
	//field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
	field('refinfokey', null, PropTypes.string, true, '参照key'), field('refname', null, PropTypes.string, true, '参照名称'), field('dataurl', null, PropTypes.string, true, '查询url'), field('operateurl', null, PropTypes.string, true, '操作url'), field('initialValue', null, PropTypes.oneOfType([PropTypes.object, PropTypes.Array]), false, '默认初始值'), field('orderfield', null, PropTypes.string, true, '排序字段'), field('often', null, PropTypes.bool, true, '是否显示常用'), field('multiselect', null, PropTypes.bool, true, '是否支持多选'), field('querystr', null, PropTypes.string, true, '查询条件(过期)'), field('condition', null, PropTypes.oneOfType([PropTypes.func, PropTypes.object]), true, '自定义查询条件'), field('onOk', null, PropTypes.func, true, '确认操作回调函数'), field('onCancel', null, PropTypes.func, true, '取消操作回调函数'), field('customheader', null, PropTypes.element, false, '自定义header'), field('contentH', null, PropTypes.number, true, '内容区域的高度'), field('gridheaders', null, PropTypes.array, false, '表头信息'), field('searchPlaceholder', null, PropTypes.string, false, '搜索框显示信息'), field('rowClickCheckable', true, PropTypes.bool, false, 'checkable启用时，点击行是否同时触发点击勾选框')]
};
var YYReferGrid = YYClass.create({
	uiMeta: uiMeta,
	tableData: null,
	getInitialState: function getInitialState() {
		return {
			current: 1,
			refid: null,
			name: null,
			loadOften: false,
			selectedRow: this.props.multiselect ? null : getDefaultRows(this.props.initialValue, this.props.idField, this.props.codeField, this.props.nameField, this.props.multiselect), //单选row
			selectedRowKey: this.props.multiselect ? null : getDefaultKeys(this.props.initialValue, this.props.multiselect), //单选key,多选模式下不获取
			selectedRows: this.props.multiselect ? getDefaultRows(this.props.initialValue, this.props.idField, this.props.codeField, this.props.nameField, this.props.multiselect) : null, //多选rows
			selectedRowKeys: this.props.multiselect ? getDefaultKeys(this.props.initialValue, this.props.multiselect) : null, //多选keys, 单选模式下不获取
			searchVal: null,
			showOperateDialog: false, //是否打开operate dialog
			operateurl: null //operate的url
		};
	},
	componentWillMount: function componentWillMount() {
		var _props = this.props,
		    refinfokey = _props.refinfokey,
		    pageSize = _props.pageSize;

		if (store) {
			var userCode = AuthToken.getUserCode();
			tableKey = _ReferConstants.REFER_TABLEKEY + userCode + "-" + refinfokey;
			//优先从pageSize获取
			var pageSizeBefore = pageSize ? pageSize : YYTable.getLocalPageSize(tableKey);
			// 当打开参照，并且本地无pagesize记录时，以参照注册信息中的pagesize为准，
			if (!(pageSizeBefore && pageSizeBefore > 0) || parseInt(pageSizeBefore) !== pageSize) {
				//参照注册信息未设置pagesize时，默认10
				var pageSizeProps = 10;
				YYTable.setLocalPageSize(tableKey, pageSizeProps);
			}
		}
	},
	componentDidMount: function componentDidMount() {
		var that = this;
		// 延迟，解决tab错位的bug
		this.props.dispatch(loadingReferGrid(true));
		setTimeout(function () {
			that.doQuery(null, 1);
		}, 500);
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		if (nextProps && nextProps.refinfo) {
			var refinfo = nextProps.refinfo;
			if (refinfo.doReload) {
				//重新查询数据
				this.doQuery(null, 1);
				this.refs.inputSearch.state.value = '';
				this.setState({
					current: 1
				});
			}
			if (refinfo.showMsg) {
				var showMsg = refinfo.showMsg;
				if (showMsg.success) {
					YYMessage.success(showMsg.success);
				} else if (showMsg.error) {
					YYMessage.error(showMsg.error);
				}
			}
		}
	},
	changeTags: function changeTags(key) {
		this.setState({
			loadOften: !this.state.loadOften
		});
	},

	// 保存/删除 常用数据到服务器. oper=0: 手动， oper=1：自动
	_saveOften: function _saveOften(records, oper, isDelete) {
		var dispatch = this.props.dispatch;
		var userId = AuthToken.getUserId();
		var refinfokey = this.props.refinfokey;
		var idField = this.props.idField;
		var serverUrl = this.props.serverUrl;
		if (isDelete === true) {
			var ids = records[idField]; // 当前删除只支持单个删除，后续支持批量删除后在此扩展
			dispatch(deleteOften(serverUrl, { userId: userId, refinfokey: refinfokey, ids: ids }));
		} else {
			var dataset = formatOftenToServer(records, idField);
			if (dataset && dataset.length > 0) {
				dispatch(addOften(serverUrl, { userId: userId, refinfokey: refinfokey, oper: oper, dataset: dataset }));
			}
		}
	},

	//添加常用
	addOften: function addOften(record, e) {
		e.stopPropagation();
		if (store && record) {
			var nodeKey = record[this.props.idField];
			this._saveOften(record, 0);
		}
		this.setState({
			loadOften: !this.state.loadOften
		});
	},

	// 删除常用
	delOften: function delOften(record, e) {
		e.stopPropagation();
		var nodeKey = record[this.props.idField];
		var isDelete = true; // 便于理解和维护。此处用于标识删除操作
		this._saveOften(record, null, isDelete);
		this.setState({
			loadOften: !this.state.loadOften
		});
	},

	//取消
	onCancelHandle: function onCancelHandle(e) {
		if (this.props.onCancel) {
			this.props.onCancel(e);
		}
	},

	// 清除已选择的数据
	onClean: function onClean() {
		this.setState({
			selectedRow: null,
			selectedRowKey: null,
			selectedRows: null,
			selectedRowKeys: null
		});
	},

	//设置查询条件
	getQuery: function getQuery(querystr, condition, searchText, orderfield, pageNumber, pageSize) {
		var getQuery = {};
		if (pageSize !== -1) {
			getQuery.pageSize = pageSize ? pageSize : YYTable.getDefaultPageSize(tableKey);
			getQuery.pageNumber = pageNumber;
		}
		if (querystr && querystr.length > 0) getQuery.relyCondition = querystr;
		if (orderfield && orderfield.length > 0) getQuery.orderCondition = orderfield;
		if (searchText && searchText.length > 0) getQuery.searchText = searchText;
		var _condition = ajax.getParams(condition);
		if (!_.isEmpty(_condition) && _.isPlainObject(_condition)) {
			//转成JSON格式字符串
			getQuery.condition = JSON.stringify(_condition);
		}
		return getQuery;
	},

	//执行查询动作
	doQuery: function doQuery(searchVal, current, pageSize) {
		var _props2 = this.props,
		    dataurl = _props2.dataurl,
		    querystr = _props2.querystr,
		    condition = _props2.condition,
		    orderfield = _props2.orderfield,
		    refid = _props2.refid,
		    dispatch = _props2.dispatch;

		pageSize = pageSize ? pageSize : YYTable.getDefaultPageSize(tableKey);
		var getQuery = this.getQuery(querystr, condition, searchVal, orderfield, current, pageSize);
		dispatch(getGridData(dataurl, getQuery));
	},

	//页码更改
	onChangePage: function onChangePage(current) {
		this.doQuery(this.refs.inputSearch.state.value, current);
		this.setState({
			current: current
		});
	},

	//每页显示的条数更改
	onChangePageSize: function onChangePageSize(current, pageSize) {
		this.doQuery(this.refs.inputSearch.state.value, current, pageSize);
		this.setState({
			current: current
		});
	},

	//搜索
	onSearch: function onSearch(e) {
		var value = this.refs.inputSearch.state.value;
		if (this.props.loadingReferGrid) {
			return;
		} else {
			this.doQuery(value, 1);
			this.setState({
				current: 1,
				searchVal: value
			});
		}
	},

	// 公共方法，确定时调用
	doHandleDatas: function doHandleDatas(selectedRows, selectedRow, isHandleOk) {
		var multiselect = this.props.multiselect;

		var row = null;
		if (multiselect) {
			row = selectedRows ? selectedRows : this.state.selectedRows;
		} else {
			row = selectedRow ? selectedRow : this.state.selectedRow;
		}
		if (isHandleOk) {
			if (this.props.often) {
				this._saveOften(row, 1);
			}
			this.props.onOk(row);
		} else {
			this.props.onSelectedChanged(row);
		}
	},

	//获取所选数据API：调用者根据this.refs.设置的ref名.getCurrentSelected来获取数据
	getCurrentSelected: function getCurrentSelected() {
		var state = this.state;
		return {
			fullValue: this.props.multiselect ? state.selectedRows : state.selectedRow
		};
	},

	//点击确定
	onOkHandle: function onOkHandle(e) {
		this.doHandleDatas(null, null, true);
	},

	//表格事件
	onChangeRow: function onChangeRow(keys, rows) {
		var selectedRows = this.state.selectedRows ? this.state.selectedRows : [];
		var selectedRowKeys = this.state.selectedRowKeys ? this.state.selectedRowKeys : [];
		if (rows) {
			var sortedRows = sortWithTableRows(rows, this.tableData.props.dataSource, this.tableData.props.pagination.current);
			for (var i = 0; i < sortedRows.length; i++) {

				if (!ifInArray(selectedRowKeys, rows[i][this.props.idField])) {
					//确定当前元素插入的位置index
					var index = 0;
					if (sortedRows.indexOf(sortedRows[i]) == 0) {
						index = 0;
					} else {
						index = selectedRowKeys.indexOf(selectedRowKeys[i - 1]) + 1;
					}
					//根据页数推算出当前元素的位置indexByPage
					var indexByPage = 0;
					if (sortedRows[i].pageCurrent == 1) {
						indexByPage = 0;
					} else {
						for (var t = 0; t < selectedRows.length; t++) {
							// console.log(sortedRows[t].pageCurrent, selectedRows[t].pageCurrent)
							if (sortedRows[i].pageCurrent > selectedRows[t].pageCurrent) indexByPage++;else break;
						}
					}
					//元素的具体位置是index+indexByPage
					selectedRowKeys.splice(index + indexByPage, 0, sortedRows[i][this.props.idField]);
					selectedRows.splice(index + indexByPage, 0, sortedRows[i]);
					// selectedRowKeys.push(rows[i][this.props.idField]);
					// selectedRows.push(rows[i]);
				};
			}
		} else {
			selectedRows = null;
		}
		this.setState({
			selectedRows: selectedRows,
			selectedRowKeys: selectedRowKeys
		});
		this.doHandleDatas(selectedRows, null, false);
	},

	// 表格事件
	onSelectRow: function onSelectRow(record, selected, selectRows) {
		var selectedRows = this.state.selectedRows ? this.state.selectedRows : [];
		var selectedRowKeys = this.state.selectedRowKeys;
		if (!selected) {
			var key = record[this.props.idField];
			selectedRowKeys.indexOf(key) > -1 ? selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1) : null;
			selectedRows = removeRow(selectedRows, key, this.props.idField);
			this.setState({
				selectedRows: selectedRows,
				selectedRowKeys: selectedRowKeys
			});
			this.doHandleDatas(selectedRows, null, false);
		}
	},

	//全选
	onSelectAllRow: function onSelectAllRow(selected, selectRows, changeRows) {
		var selectedRows = this.state.selectedRows ? this.state.selectedRows : [];
		var selectedRowKeys = this.state.selectedRowKeys;
		if (!selected) {
			for (var i = changeRows.length - 1; i >= 0; i--) {
				var key = changeRows[i][this.props.idField];
				selectedRowKeys.indexOf(key) > -1 ? selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1) : null;
				selectedRows = removeRow(selectedRows, key, this.props.idField);
			};
			this.setState({
				selectedRows: selectedRows,
				selectedRowKeys: selectedRowKeys
			});
			this.doHandleDatas(selectedRows, null, false);
		}
	},

	//选中行 单选时
	onRowClick: function onRowClick(record, index) {
		this.setState({
			selectedRow: record,
			selectedRowKey: record[this.props.idField]
		});
		this.doHandleDatas(null, record, false);
	},

	// 选中行 双击时 单选时
	onRowDoubleClick: function onRowDoubleClick(record, index) {
		this.doHandleDatas(null, record, true);
	},

	//关闭标签
	onTagClose: function onTagClose(key) {
		var selectedRows = this.state.selectedRows;
		var selectedRowKeys = this.state.selectedRowKeys;
		selectedRowKeys.indexOf(key) > -1 ? selectedRowKeys.splice(selectedRowKeys.indexOf(key), 1) : null;
		removeRow(selectedRows, key, this.props.idField);
		this.setState({
			selectedRows: selectedRows,
			selectedRowKeys: selectedRowKeys
		});
		this.doHandleDatas(selectedRows, null, false);
	},

	//点击带链接字段
	onClickOperate: function onClickOperate(record, e) {
		if (record) {
			var url = this.props.operateurl + record[this.props.idField];
			this.setState({
				showOperateDialog: true,
				operateurl: url
			});
		}
	},

	//关闭点击链接打开的dialog回调
	onCloseOperate: function onCloseOperate() {
		this.setState({
			showOperateDialog: false
		});
	},

	//渲染标签页
	_renderTabs: function _renderTabs() {
		var _this = this;

		var that = this;
		var _props3 = this.props,
		    refinfo = _props3.refinfo,
		    refname = _props3.refname,
		    multiselect = _props3.multiselect;

		var grid = refinfo.grid;
		var header = getHeaders(that.props.gridheaders, grid);

		var columnsInStore = getColumns(header, store, this.props.nameField, this.props.operatefield, this.props.operateurl, this.onClickOperate);
		var totalWidth = columnsInStore.totalWidth;

		var griddata = grid ? grid.data : null;
		var totalsize = griddata ? griddata.count : 0; //总数量
		var content = griddata ? griddata.content : null;
		var data = [];
		if (content && content.length > 0) {
			data = content;
			data.map(function (elem, eindex) {
				elem.key = elem[_this.props.idField];
			});
		};
		var rowSelection = null;
		if (multiselect) {
			rowSelection = {
				onChange: this.onChangeRow,
				onSelect: this.onSelectRow,
				onSelectAll: this.onSelectAllRow,
				selectedRowKeys: this.state.selectedRowKeys
			};

			totalWidth += _ReferConstants.REFER_CHECKBOX_WIDTH;
		};
		var tableH = this.props.contentH - 28 - 45 - 10; //28是表格上方搜索框的高度、45是分页的高度，10是marginTop
		var pagination = false;
		if (this.props.pageSize !== -1) {
			pagination = getPagination(totalsize, that.state.current, that.onChangePage, that.onChangePageSize);
		}
		var columns = columnsInStore.columns;
		var oftenTab = null;
		if (this.props.often) {
			var oftenData = formatOftenFromServer(this.props.refinfo.often);
			var oftenkeys = getOftenKeys(this.props.refinfo.often);
			var oftenColumns = columnsInStore.oftenColumns;
			columns.push({
				key: 'operation',
				title: _ReferConstants.REFER_ADD_OFTEN,
				width: _ReferConstants.REFER_OPERATE_COLUMN_WIDTH,
				render: function render(text, record) {
					return ifInArray(oftenkeys, record[_this.props.idField]) ? React.createElement(YYButton, { icon: 'minus', ghost: true, onClick: _this.delOften.bind(null, record) }) : React.createElement(YYButton, { icon: 'plus', ghost: true, onClick: _this.addOften.bind(null, record) });
				}
			});
			oftenColumns.push({
				key: 'operationOften',
				title: _ReferConstants.REFER_DELETE_OFTEN,
				width: _ReferConstants.REFER_OPERATE_COLUMN_WIDTH,
				render: function render(text, record) {
					return React.createElement(YYButton, { icon: 'minus', ghost: true, onClick: _this.delOften.bind(null, record) });
				}
			});

			totalWidth += _ReferConstants.REFER_OPERATE_COLUMN_WIDTH;
			oftenTab = React.createElement(
				YYTab,
				{ key: refname + "_often", tab: '\u5E38\u7528', disabled: !this.props.often, className: 'yyui-refer-tab' },
				React.createElement(YYTable, {
					style: { marginTop: 5 },
					columns: oftenColumns,
					pagination: false,
					bordered: true,
					rowKey: that.props.idField,
					dataSource: oftenData,
					scroll: { x: totalWidth, y: this.props.contentH } //table下分页的高度
					, rowActiveKey: that.state.selectedRowKey,
					rowSelection: rowSelection,
					onRowDoubleClick: multiselect ? noop : this.onRowDoubleClick,
					onRowClick: multiselect ? noop : this.onRowClick,
					rowClickCheckable: this.props.rowClickCheckable })
			);
		}
		var dataView = React.createElement(
			'div',
			null,
			this.props.customheader,
			React.createElement(
				'div',
				{ className: 'yyui-refer-grid-search' },
				React.createElement(YYInputButton, { ref: 'inputSearch', placeholder: that.props.searchPlaceholder, buttonIcon: 'search', onPressEnter: this.onSearch, buttonClick: this.onSearch })
			),
			React.createElement(YYTable, {
				ref: function ref(refComponent) {
					_this.tableData = refComponent;
				},
				style: { marginTop: 5 },
				cookieKey: tableKey,
				columns: columns,
				loading: this.props.loadingReferGrid,
				pagination: pagination,
				rowKey: that.props.idField,
				dataSource: data,
				bordered: true,
				scroll: { x: totalWidth, y: tableH - _ReferConstants.REFER_TABLE_PAGINATION_HEIGHT },
				rowActiveKey: that.state.selectedRowKey,
				onRowDoubleClick: multiselect ? noop : this.onRowDoubleClick,
				onRowClick: multiselect ? noop : this.onRowClick,
				rowSelection: rowSelection,
				rowClickCheckable: this.props.rowClickCheckable
			})
		);
		var dataTab = React.createElement(
			YYTab,
			{ key: refname + "_data", tab: refname, className: 'yyui-refer-tab' },
			dataView
		);
		if (oftenTab !== null) {
			return React.createElement(
				YYTabs,
				{ defaultActiveKey: refname + "_data", onChange: this.changeTags },
				oftenTab,
				dataTab
			);
		} else {
			return dataView;
		}
	},
	render: function render() {
		var that = this;
		var props = {};
		props.refname = this.props.refname;
		props.multiselect = this.props.multiselect;
		props.idField = this.props.idField;
		props.nameField = this.props.nameField;
		props.codeField = this.props.codeField;
		props.onOk = this.onOkHandle;
		props.onCancel = this.onCancelHandle;
		props.onClean = this.onClean;
		props.onTagClose = this.onTagClose;
		props.selectedDatas = this.state.selectedRows;
		props.refinfokey = this.props.refinfokey;
		props.customButtons = this.props.customButtons;
		return React.createElement(
			'div',
			{ className: this.className() },
			this._renderTabs(),
			React.createElement(_YYReferOperateDlg2.default, { show: that.state.showOperateDialog, operateurl: that.state.operateurl, onCancel: that.onCloseOperate }),
			React.createElement(YYFootInRefer, props)
		);
	}
});
module.exports = connect(mapStateToProps, null, null, { withRef: true })(YYReferGrid);