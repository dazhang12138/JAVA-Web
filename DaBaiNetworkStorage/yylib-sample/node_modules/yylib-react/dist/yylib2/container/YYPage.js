'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * 定义应用容器中的一个页面
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYSpin = require('../spin/YYSpin');
//定义META
var uiMeta = {
    name: 'page',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('loading', undefined, PropTypes.bool, false, '是否显示加载中的状态条')]
};
var YYPage = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        var content = this.props.children;
        //存在loading属性，则显示加载状态条
        if (this.props.loading === true || this.props.loading === false) {
            content = React.createElement(
                YYSpin,
                { size: 'large', spinning: this.props.loading },
                this.props.children
            );
        }
        return React.createElement(
            'div',
            _extends({}, this.props, { className: this.className() }),
            content
        );
    }
});

module.exports = YYPage;