'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/5/11.
 * 面板（支持折叠）
 */
require('./style/index.less');
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require = require('lodash'),
    isFunction = _require.isFunction;
//定义META


var uiMeta = {
    name: 'panel',
    fields: [field('expand', true, PropTypes.bool, false, '是否展开内容体'), field('title', '标题', PropTypes.string, false, '面板标题'), field('enableCollapse', true, PropTypes.bool, false, '是否启用折叠功能'), field('expandText', '收起', PropTypes.string, false, '展开时显示的文本'), field('collapseText', '展开', PropTypes.string, false, '折叠时显示的文本'), field('onExpandOrCollapse', null, PropTypes.func, false, "当展开|折叠时的回调，传递参数：'expand'|'collapse'")]
};
var YYPanel = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            expand: this.props.expand == true || this.props.expand == 'true'
        };
    },
    _onChange: function _onChange() {
        this.setState({ expand: !this.state.expand });
        if (isFunction(this.props.onExpandOrCollapse)) {
            this.props.onExpandOrCollapse(this.state.expand ? 'expand' : 'collapse');
        }
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('expand' in nextProps) {
            this.setState({
                expand: nextProps.expand
            });
        }
    },
    _createSpan: function _createSpan() {
        var that = this;
        return React.createElement(
            'span',
            { className: this.className('collapse'), onClick: this._onChange },
            this.state.expand ? this.props.expandText : this.props.collapseText
        );
    },
    render: function render() {
        var cls = this.className() + (this.state.expand ? "" : " collapse");
        var headCls = this.className('head');
        var bodyCls = this.className('body');
        var span = this.props.enableCollapse === true ? this._createSpan() : null;
        return React.createElement(
            'div',
            _extends({}, this.props, { className: cls }),
            React.createElement(
                'div',
                { className: headCls },
                React.createElement(
                    'span',
                    { className: this.className('title') },
                    this.props.title
                ),
                span
            ),
            React.createElement(
                'div',
                { className: bodyCls },
                this.props.children
            )
        );
    }
});
//规范属性类型
var propTypes = {
    expand: React.PropTypes.bool,
    title: React.PropTypes.string,
    onExpandOrCollapse: React.PropTypes.function
};
YYPanel.PropTypes = propTypes;

module.exports = YYPanel;