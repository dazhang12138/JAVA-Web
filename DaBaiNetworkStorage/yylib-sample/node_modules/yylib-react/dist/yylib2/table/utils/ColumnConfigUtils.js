'use strict';

/**
 * 表格列配置工具
 * @type {{}}
 */
var _ = require('lodash');
var assign = require('lodash/assign');
var YYMessage = require('../../message/YYMessage');
var DataUtil = require('../../../utils/DataUtil');
var AuthToken = require('../../../utils/AuthToken');
var userId = AuthToken.getUserId();
var ColumnConfigUtils = {};

/**
 * 结合缓存的表格列配置, 返回合并处理后的表格列
 * @param options
 *          columns 原表格列
 *          pageCode 页面编号
 *          tableKey 表格键值
 */
ColumnConfigUtils.combineColumnConfigs = function (options) {
    var _ref = options || {},
        columns = _ref.columns;

    var cachedConfigs = this.getCachedColumnConfigs(options);
    if (!cachedConfigs) {
        return columns;
    }
    if (!_.isPlainObject(cachedConfigs)) {
        cachedConfigs = JSON.parse(cachedConfigs);
    }
    var targetColumns = [];
    if (_.isArray(cachedConfigs) && cachedConfigs.length > 0) {
        var matchedColumns = [];
        _.forEach(cachedConfigs, function (cachedItem) {
            _.forEach(columns, function (originItem) {
                if (cachedItem.dataIndex === originItem.dataIndex && originItem.isShow != false) {
                    var retItem = assign({}, originItem, cachedItem);
                    matchedColumns.push(retItem);
                    return false;
                }
            });
        });
        var notMatchedColumns = [];
        _.forEach(columns, function (originItem) {
            var repeat = false;
            _.forEach(matchedColumns, function (matchedItem) {
                if (originItem.dataIndex === matchedItem.dataIndex) {
                    repeat = true;
                    return false;
                }
            });
            if (!repeat) {
                notMatchedColumns.push(originItem);
            }
        });
        targetColumns = matchedColumns.concat(notMatchedColumns);
    }
    return targetColumns;
};
/**
 * 结合缓存的表格列配置, 返回合并处理后的表格列
 * @param options
 *          columns 原表格列
 *          pageCode 页面编号
 *          tableKey 表格键值
 */
ColumnConfigUtils.showColumnConfig = function (options) {
    var _ref2 = options || {},
        columns = _ref2.columns;

    var cachedColumns = this.getCachedColumnConfigs(options);
    if (cachedColumns) {
        if (!_.isPlainObject(cachedColumns)) {
            cachedColumns = JSON.parse(cachedColumns);
        }
        var matchedColumns = [];
        _.forEach(cachedColumns, function (cachedItem) {
            _.forEach(columns, function (originItem) {
                if (cachedItem.dataIndex === originItem.dataIndex && originItem.isShow != false) {
                    var retItem = assign({}, originItem, cachedItem);
                    matchedColumns.push(retItem);
                    return false;
                }
            });
        });
        var notMatchedColumns = [];
        _.forEach(columns, function (originItem) {
            var repeat = false;
            _.forEach(matchedColumns, function (matchedItem) {
                if (originItem.dataIndex === matchedItem.dataIndex) {
                    repeat = true;
                    return false;
                }
            });
            if (!repeat && originItem.isShow != false && originItem.dataIndex !== "operate" && originItem.dataIndex !== "rowNum") {
                notMatchedColumns.push(originItem);
            }
        });
        columns = matchedColumns.concat(notMatchedColumns);
    } else {
        // 过滤掉设计器中配置为不显示的列,操作列,序号列
        columns = _.filter(columns, function (column) {
            return column && column.isShow != false && column.dataIndex !== "operate" && column.dataIndex !== "rowNum";
        });
    }
    return columns;
};

/**
 * 表格列配置完毕
 * @param options
 *          columns 原表格列
 *          columnConfigs 待缓存的表格列配置
 *          pageCode 页面编号
 *          tableKey 表格键值
 */
ColumnConfigUtils.columnConfigDone = function (options) {
    var _ref3 = options || {},
        columns = _ref3.columns,
        columnConfigs = _ref3.columnConfigs;
    // 1. 删除原有的缓存数据


    this.delCachedColumnConfigs(options);
    // 2. 组装待保存的数据,过滤掉操作列和序号列
    columnConfigs = columnConfigs.filter(function (column) {
        return column && column.dataIndex !== "operate" && column.dataIndex !== "rowNum";
    }) || [];
    var dataToCache = _.cloneDeep(columnConfigs).map(function (item) {
        return {
            dataIndex: item.dataIndex,
            isShow: item.isShow,
            width: item.width
        };
    });
    // 3.保存数据到缓存
    options.data = dataToCache;
    var success = this.saveColumnConfigs(options);
    if (!success) {
        return columns;
    }
    // 4.结合缓存进行展示
    var matchedColumns = [];
    _.forEach(dataToCache, function (cachedItem) {
        _.forEach(columns, function (originItem) {
            if (cachedItem.dataIndex === originItem.dataIndex && originItem.isShow != false) {
                var retItem = assign({}, originItem, cachedItem);
                matchedColumns.push(retItem);
                return false;
            }
        });
    });
    var notMatchedColumns = [];
    _.forEach(columns, function (originItem) {
        var repeat = false;
        _.forEach(matchedColumns, function (matchedItem) {
            if (originItem.dataIndex === matchedItem.dataIndex) {
                repeat = true;
                return false;
            }
        });
        if (!repeat) {
            notMatchedColumns.push(originItem);
        }
    });
    return matchedColumns.concat(notMatchedColumns);
};

/**
 * 从浏览器Local Storage中获取表格列配置
 * @param options
 *          pageCode 页面编号
 *          tableKey 表格键值
 * @returns {*}
 */
ColumnConfigUtils.getCachedColumnConfigs = function (options) {
    var _ref4 = options || {},
        pageCode = _ref4.pageCode,
        tableKey = _ref4.tableKey;

    if (!pageCode || !tableKey) {
        return;
    }
    return DataUtil.localRead(pageCode + "_" + tableKey + "_" + userId);
};

/**
 * 保存表格配置列数据到Local Storage
 * @param options
 *          pageCode 页面编号
 *          tableKey 表格键值
 *          data 要保存的数据
 */
ColumnConfigUtils.saveColumnConfigs = function (options) {
    var _ref5 = options || {},
        pageCode = _ref5.pageCode,
        tableKey = _ref5.tableKey,
        data = _ref5.data;

    if (!pageCode || !tableKey || !userId) {
        YYMessage.error("缓存表格列配置失败!", 3);
        console.error('缓存表格列配置失败', { pageCode: pageCode, tableKey: tableKey, userId: userId });
        return false;
    }
    DataUtil.localSave(pageCode + "_" + tableKey + "_" + userId, data);
    return true;
};

/**
 * 从浏览器Local Storage中删除表格列配置
 * @param options
 *          pageCode 页面编号
 *          tableKey 表格键值
 */
ColumnConfigUtils.delCachedColumnConfigs = function (options) {
    var _ref6 = options || {},
        pageCode = _ref6.pageCode,
        tableKey = _ref6.tableKey;

    if (!pageCode || !tableKey) {
        return;
    }
    DataUtil.localRemove(pageCode + "_" + tableKey + "_" + userId);
};

module.exports = ColumnConfigUtils;