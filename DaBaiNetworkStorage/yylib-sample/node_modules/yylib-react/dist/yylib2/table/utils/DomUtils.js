'use strict';

var React = require('react');
var LABEL_CLASS = 'table-resizer-label';

var DomUtils = {
    /**
     * @param parent 父节点
     * @param child 子节点
     * @return index 返回子节点在父节点中的索引
     */
    getChildIndex: function getChildIndex(parent, child) {
        if (!parent || !child || !parent.children) {
            return;
        }
        if (!parent.contains(child)) {
            return;
        }

        var index = -1;
        var children = parent.children;
        for (var i = 0; i < children.length; i++) {
            if (children[i] === child) {
                return i;
            }
        }
    },
    /**
     * @param element Dom节点
     * @return Dom节点的计算宽度
     */
    getNodeWidth: function getNodeWidth(element) {
        if (typeof window !== 'undefined') {
            var style = window.getComputedStyle(element, null);
            var width = style.getPropertyValue('width').replace('px', '');
            return parseInt(width);
        }
    },
    /**
     * @param node Dom节点
     * @return 返回节点的大写标签名
     */
    getNodeTagName: function getNodeTagName(node) {
        if (node && node.nodeType === 1) {
            return node.tagName.toUpperCase();
        }
    },
    getNodeClientRect: function getNodeClientRect(node) {
        if (node) {
            return node.getBoundingClientRect();
        }
    },
    /**
     * 判断是否为resizer-label节点
     */
    _hasLabelCls: function _hasLabelCls(element) {
        return element && element.classList && element.classList.contains(LABEL_CLASS);
    },
    /**
     * 添加伸缩标签及事件
     */
    addResizerLabel: function addResizerLabel(parent, handler) {
        var children = parent.children;
        if (children && children.length) {
            //如果存在则不添加
            for (var i = 0; i < children.length; i++) {
                if (this._hasLabelCls(children[i])) {
                    return;
                }
            }
        }

        var resizerLabel = document.createElement('span');
        resizerLabel.classList.add(LABEL_CLASS);
        resizerLabel.addEventListener('mousedown', handler);
        parent.appendChild(resizerLabel);
    },
    /**
     * 移除伸缩标签及事件
     */
    removeResizerLabel: function removeResizerLabel(parent, handler) {
        var children = parent.children;
        if (children && children.length) {
            for (var i = 0; i < children.length; i++) {
                if (this._hasLabelCls(children[i])) {
                    children[i].removeEventListener('mousedown', handler);
                    parent.removeChild(children[i]); //移除所有label
                }
            }
        }
    }
};

module.exports = DomUtils;