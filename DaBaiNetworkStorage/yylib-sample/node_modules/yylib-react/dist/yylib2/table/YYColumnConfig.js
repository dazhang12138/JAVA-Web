'use strict';

/**
 * 表格配置列组件
 */
var React = require('react');
var _ = require('lodash');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var YYModal = require('../modal/YYModal');
var YYRow = require('../layout/YYRow');
var YYCol = require('../layout/YYCol');
var Table = require('./override/AntdTable');
var YYSwitch = require('../formcontrols/switch/YYSwitch');
var YYMessage = require('../message/YYMessage');
var YYInputNumber = require('../formcontrols/inputnumber/YYInputNumber');
var YYButton = require('../button/YYButton');
require('./style/index.less');

//定义META
var uiMeta = {
    name: 'icon',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('columns', [], PropTypes.array, true, '允许进行配置的表格原始列定义'), field('onOk', null, PropTypes.func, false, '点击确定后的回调,传递参数：configColumns-配置后的列定义'), field('onCancel', null, PropTypes.func, false, '点击取消后的回调'), field('visible', false, PropTypes.bool, false, '是否显示配置窗口')]
};
var YYColumnConfig = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var columns = this.props.columns;

        var configColumns = _.cloneDeep(columns);
        return {
            configColumns: configColumns,
            dataSource: this._columnsToDataSource(columns)
        };
    },
    _onCellChange: function _onCellChange(record, index, dataIndex, event) {
        var configColumns = this.state.configColumns;

        if (dataIndex == 'colShow') {
            //处理自定义显示状态
            record.colShow = event;
            var configColumns = _.map(configColumns, function (col) {
                if (record.colIndex == col.dataIndex) {
                    col.isShow = event;
                }
                return col;
            });
        } else if (dataIndex == 'colWidth') {
            //处理自定义列宽度
            record.colWidth = event;
            var configColumns = _.map(configColumns, function (col) {
                if (record.colIndex == col.dataIndex) {
                    col.width = event;
                }
                return col;
            });
        }
        this.setState({ configColumns: configColumns, dataSource: this._columnsToDataSource(configColumns) });
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        //当配置页面重新打开时，依据columns初始化配置信息
        if (this.props.visible !== nextProps.visible && nextProps.visible == true) {
            var configColumns = _.cloneDeep(nextProps.columns);
            this.setState({
                configColumns: configColumns,
                dataSource: this._columnsToDataSource(configColumns)
            });
        }
    },
    //将列定义转换为行配置项
    _columnsToDataSource: function _columnsToDataSource(columns) {
        var dataSource = _.map(columns, function (col, index) {
            return {
                colIndex: col.dataIndex,
                colName: col.title,
                colWidth: col.width,
                colShow: col.isShow === undefined ? true : col.isShow,
                colFixed: col.fixed
            };
        });
        return dataSource;
    },
    //将行配置信息转换为列定义
    _dataSourceToColumns: function _dataSourceToColumns() {},
    _handleOk: function _handleOk() {
        var configColumns = this.state.configColumns;

        for (var i = 0; i < configColumns.length; i++) {
            if (configColumns[i].fixed && !configColumns[i].width) {
                YYMessage.error("【" + configColumns[i].uititle + "】为固定显示列，必须设置明确的宽度值(不能为自动)！", 3);
                return;
            }
        }
        if (_.isFunction(this.props.onOk)) {
            this.props.onOk(this.state.configColumns);
        }
    },
    _handleCancel: function _handleCancel() {
        if (_.isFunction(this.props.onCancel)) {
            this.props.onCancel();
        }
    },
    //处理列显示顺序
    _handleMove: function _handleMove(record, index, moveType) {
        var _state = this.state,
            dataSource = _state.dataSource,
            configColumns = _state.configColumns;

        if (moveType == 'up') {
            var _ref = [dataSource[index - 1], dataSource[index]]; //上移一行

            dataSource[index] = _ref[0];
            dataSource[index - 1] = _ref[1];
        } else if (moveType == 'down') {
            var _ref2 = [dataSource[index + 1], dataSource[index]]; //下移一行

            dataSource[index] = _ref2[0];
            dataSource[index + 1] = _ref2[1];
        }
        var sortConfigColumns = []; //排序后的列定义
        _.forEach(dataSource, function (row, index) {
            for (var i = 0; i < configColumns.length; i++) {
                if (row.colIndex == configColumns[i].dataIndex) {
                    sortConfigColumns.push(configColumns[i]);
                    break;
                }
            }
        });
        this.setState({
            dataSource: dataSource,
            configColumns: sortConfigColumns
        });
    },
    _renderColumnOrder: function _renderColumnOrder(text, record, index) {
        var dataSource = this.state.dataSource;

        var cellViews = [];
        var notFixedIndexs = []; //获取全部自由列的索引
        _.forEach(dataSource, function (row, index) {
            if (!row.colFixed) {
                notFixedIndexs.push(index);
            }
        });
        if (!record.colFixed) {
            //非固定列(固定列不允许移动顺序)
            //首行不显示上移按钮
            if (notFixedIndexs && index > notFixedIndexs[0]) {
                cellViews.push(React.createElement(
                    YYCol,
                    { span: '12' },
                    React.createElement(YYButton, { icon: 'up', ghost: true, dashed: true, title: '\u4E0A\u79FB',
                        onClick: this._handleMove.bind(null, record, index, 'up') })
                ));
            } else {
                cellViews.push(React.createElement(YYCol, { span: '12' }));
            }
            //尾行不显示下移按钮
            if (notFixedIndexs && index < notFixedIndexs[notFixedIndexs.length - 1]) {
                cellViews.push(React.createElement(
                    YYCol,
                    { span: '12' },
                    React.createElement(YYButton, { icon: 'down', ghost: true, dashed: true, title: '\u4E0B\u79FB',
                        onClick: this._handleMove.bind(null, record, index, 'down') })
                ));
            }
        }
        return React.createElement(
            YYRow,
            null,
            cellViews
        );
    },
    _renderColumnShow: function _renderColumnShow(text, record, index) {
        if (record.colFixed) {
            //固定列
            return "固定显示";
        } else {
            //非固定列
            return React.createElement(YYSwitch, { defaultChecked: record.colShow, checkedChildren: '\u662F', unCheckedChildren: '\u5426',
                onChange: this._onCellChange.bind(null, record, index, 'colShow') });
        }
    },
    _renderColumnWidth: function _renderColumnWidth(text, record, index) {
        return React.createElement(YYInputNumber, { placeholder: '\u81EA\u52A8', defaultValue: record.colWidth,
            onChange: this._onCellChange.bind(null, record, index, 'colWidth') });
    },
    render: function render() {
        var cls = this.className();
        var dataSource = this.state.dataSource;
        var columns = [{
            title: '键值', isShow: false, dataIndex: 'colIndex', key: 'colIndex', width: 150
        },
        /*{
         title:'固定',isShow:false,dataIndex:'colFixed',key:'colFixed'
         },*/
        {
            title: '列名', titleAlign: 'center', dataIndex: 'colName', key: 'colName'
        }, {
            title: '宽度',
            titleAlign: 'center',
            align: 'center',
            width: 100,
            dataIndex: 'colWidth',
            key: 'colWidth',
            render: this._renderColumnWidth
        }, {
            title: '显示',
            titleAlign: 'center',
            align: 'center',
            width: 80,
            dataIndex: 'colShow',
            key: 'colShow',
            render: this._renderColumnShow
        }, {
            title: '顺序',
            titleAlign: 'center',
            dataIndex: 'order',
            key: 'order',
            width: 100,
            render: this._renderColumnOrder
        }];
        return React.createElement(
            YYModal,
            { title: '\u81EA\u5B9A\u4E49\u5217\u914D\u7F6E', onOk: this._handleOk, onCancel: this._handleCancel, visible: this.props.visible,
                width: 600, maskClosable: false },
            React.createElement(Table, { ref: 'configTable', dataSource: dataSource, columns: columns, bordered: true, checkable: false,
                pagination: false, size: 'small',
                className: cls })
        );
    }
});
module.exports = YYColumnConfig;