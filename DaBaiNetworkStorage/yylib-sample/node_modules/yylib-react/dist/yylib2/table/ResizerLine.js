'use strict';

var React = require('react');
var _ = require('lodash');

var YYClass = require('../base/YYClass');
var YYDraggable = require('../draggable/YYDraggable');
var MouseMoveUtil = require('./utils/MouseMoveUtil');

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
//定义META
var uiMeta = {
    name: 'resizer-line',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('onResizeEnd', null, PropTypes.func, false, '当释放resizer时出发，接收参数当前的宽度'), field('onChange', null, PropTypes.func, false, '当移动resizer时出发，接收参数相对位移'), field('height', null, PropTypes.object, false, '高度'), field('minWidth', null, PropTypes.object, false, '最小宽度'), field('maxWidth', null, PropTypes.object, false, '最大宽度'), field('initialWidth', null, PropTypes.object, false, '初始宽度')]
};

var ResizerLine = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState(params) {
        var width = 0;
        if ('initialWidth' in this.props) {
            width = this.props.initialWidth;
        }
        return {
            width: width,
            initialWidth: width
        };
    },
    componentDidMount: function componentDidMount() {
        this._MouseMoveUtil = new MouseMoveUtil(this._handleResizerMove, this._handleResizerEnd, document.body);
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('initialWidth' in nextProps) {
            this.setState({ initialWidth: nextProps.initialWidth });
        }
    },
    componentWillUnmount: function componentWillUnmount() {
        this._MouseMoveUtil.releaseMouseMoves();
    },
    _getNewWidth: function _getNewWidth(width) {
        var _props = this.props,
            maxWidth = _props.maxWidth,
            minWidth = _props.minWidth;

        if (maxWidth && width >= maxWidth) {
            return maxWidth;
        }
        if (minWidth && width <= minWidth) {
            return minWidth;
        }
        return width;
    },
    _handleResizerMove: function _handleResizerMove(deltaX) {
        var width = this.state.initialWidth + deltaX;
        this.setState({
            width: this._getNewWidth(width)
        });

        if (this.props.onChange) {
            this.props.onChange(deltaX);
        }
    },
    _handleResizerEnd: function _handleResizerEnd() {
        this._MouseMoveUtil.releaseMouseMoves();
        if (this.props.onResizeEnd) {
            this.props.onResizeEnd(this.state.width, this.props.currentColKey);
        }
    },
    onLabelMouseDown: function onLabelMouseDown(event) {
        this._MouseMoveUtil.captureMouseMoves(event);
    },
    render: function render() {
        var style = _.assign({}, this.props.style, { left: this.props.left }, { width: this.state.width }, { height: this.props.height }, { display: this.props.visible ? 'block' : 'none' });

        return React.createElement('div', { style: style, className: 'table-resizer-line' });
    }
});

module.exports = ResizerLine;