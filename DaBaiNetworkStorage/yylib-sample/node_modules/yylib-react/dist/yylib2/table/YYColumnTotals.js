'use strict';

/**
 * 卡片组件
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var _ = require('lodash');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var MathUtil = require('../../utils/MathUtil');
var formatUtils = require('../../utils/formatUtils');
//定义META
var uiMeta = {
    name: 'table-inner-total',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('columns', null, PropTypes.element, false, '与需要统计的表格列定义一致'), field('dataSource', [], PropTypes.array, false, '需要统计的表格数据，若需统计当前页，则传入当前页的全部数据'), field('checkbox', false, PropTypes.bool, false, '是否补充勾选列'), field('totalIndex', undefined, PropTypes.string, false, '定义在对应的column.dataIndex列显示合计文本，默认只在勾选列进行显示'), field('totalText', '合计', PropTypes.string, false, '勾选列里面的合计文本显示内容'), field('totalValues', undefined, PropTypes.object, false, '自定义合计列值，数据格式:{dataIndex1:2500,dataIndex2:5000,...}')]
};
var YYColumnTotals = YYClass.create({
    uiMeta: uiMeta,
    //获取需要进行合计的列
    _getTotalColumns: function _getTotalColumns() {
        var columns = this.props.columns;

        var totalColumns = _.filter(columns, function (col) {
            if (col.isShow !== false && (col.total === true || col.emptyTotal)) {
                return col;
            }
        });
        return totalColumns;
    },
    //获取合计列的合计值
    _getTotalValues: function _getTotalValues(totalColumns) {
        var dataSource = this.props.dataSource;

        var totalValues = {};
        if (totalColumns && totalColumns.length > 0) {
            if (dataSource && dataSource.length > 0) {
                for (var i = 0; i < dataSource.length; i++) {
                    var rowData = dataSource[i];
                    _.forEach(totalColumns, function (col) {
                        if (col.total !== true) return; //确保为合计列，排斥emptyTotal情况
                        var sumColVal = totalValues[col.dataIndex];
                        if (!sumColVal) sumColVal = 0;
                        //列定义的合计小数位
                        var decimal = col.totalDecimal ? col.totalDecimal : 0;
                        var colVal = rowData[col.dataIndex];
                        colVal = formatUtils.formatNumber(colVal, decimal, 0); //格式化小数位
                        if (colVal) {
                            //科学计算法合计，解决小数位精度丢失问题，支持最大8位小数
                            totalValues[col.dataIndex] = MathUtil.execute(sumColVal, colVal, 0, decimal);
                        }
                    });
                }
            }
        }
        return totalValues;
    },
    //渲染合计列视图
    _renderTotalViews: function _renderTotalViews() {
        var allColumns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var totalValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        var views = [];
        var _props = this.props,
            checkbox = _props.checkbox,
            totalIndex = _props.totalIndex,
            totalText = _props.totalText;

        var checkboxStyle = { width: 60, textAlign: 'center' };
        if (checkbox) {
            if (totalIndex) {
                //存在自定义显示合计文本列时，则勾选列不显示合计文本
                views.push(React.createElement('td', { style: checkboxStyle }));
            } else {
                //默认显示合计文本到勾选列
                views.push(React.createElement(
                    'td',
                    { style: checkboxStyle, title: totalText },
                    totalText
                ));
            }
        }
        _.forEach(allColumns, function (column) {
            if (column.key == 'selection-column') {
                //默认显示合计文本到勾选列
                views.push(React.createElement(
                    'td',
                    { style: checkboxStyle, title: totalText },
                    totalText
                ));
            } else {
                var inputView = null;
                var tdStyle = {};
                var tdCls = [];
                if (column.width) {
                    tdStyle.width = column.width;
                }
                if (column.align == 'right') {
                    //处理align对齐属性
                    tdCls.push('text-right');
                } else if (column.align == 'center') {
                    tdCls.push('text-center');
                } else if (column.align == 'left') {
                    //默认居左
                } else {
                    //未明确指定对齐方式
                    if (column.fieldtype == 'number' || column.fieldtype == 'currency') {
                        tdCls.push('text-right');
                    }
                }
                if (column.isShow !== false) {
                    if (column.total === true) {
                        var totalValue = totalValues[column.dataIndex] !== undefined ? totalValues[column.dataIndex] : "";
                        if (_.isFunction(column.totalRender)) {
                            //回调自定义渲染column.totalRender
                            inputView = column.totalRender(column, totalValue);
                        } else {
                            //格式化显示小数位（totalDecimal不存在则使用decimal）
                            var decimal = column.totalDecimal !== undefined ? column.totalDecimal : column.decimal !== undefined ? column.decimal : 0;
                            //格式化显示千分位（totalDecimal不存在则使用decimal）
                            var comma = column.totalComma !== undefined ? column.totalComma : column.comma !== undefined ? column.comma : true;
                            var totalValueText = formatUtils.formatNumber(totalValue, decimal, comma ? 3 : 0);
                            inputView = React.createElement(
                                'span',
                                { title: totalValueText },
                                totalValueText
                            );
                        }
                    } else if (column.emptyTotal === true) {
                        //显示空合计文本
                        tdCls.push("empty");
                        inputView = 'empty';
                    }
                    if (totalIndex && totalIndex == column.dataIndex) {
                        views.push(React.createElement(
                            'td',
                            { className: tdCls.join(' '), style: tdStyle, title: totalText },
                            totalText
                        ));
                    } else {
                        views.push(React.createElement(
                            'td',
                            { className: tdCls.join(' '), style: tdStyle },
                            inputView
                        ));
                    }
                }
            }
        });
        return views;
    },
    render: function render() {
        var totalColumns = this._getTotalColumns();
        if (!totalColumns || totalColumns.length == 0) return null;
        var totalValues = this.props.totalValues ? this.props.totalValues : this._getTotalValues(totalColumns);
        var totalViews = this._renderTotalViews(this.props.columns, totalValues);
        return totalViews.length > 0 ? React.createElement(
            'tfoot',
            { className: this.className() },
            React.createElement(
                'tr',
                null,
                totalViews
            )
        ) : null;
    }
});

module.exports = YYColumnTotals;