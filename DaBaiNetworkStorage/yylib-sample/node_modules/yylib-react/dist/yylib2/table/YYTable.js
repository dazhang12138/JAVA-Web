'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by Dio on 2016/5/11.
 */
var React = require('react');
var ReactDOM = require('react-dom');
var YYClass = require('../base/YYClass');
var rowSelection = require('./rowSelection');
var YYTableCol = require('./YYTableCol');
var Table = require('./override/AntdTable');
var _ = require('lodash');

var uiMetaFields = require('./uiMetaFields');
var DomUtils = require('./utils/DomUtils');
var ResizerLine = require('./ResizerLine');
var DataUtil = require('../../utils/DataUtil');
var EventUtils = require('../../utils/EventUtils');
var UrlUtils = require('../../utils/UrlUtils');
var formatUtils = require('../../utils/formatUtils');
var YYTitleGroup = require('./YYTitleGroup');
var YYColumnTotals = require('./YYColumnTotals');
var YYMessage = require('./../message/YYMessage');
var YYInput = require('../formcontrols/input/YYInput');
var PAGE_SIZE_LOCAL_KEY = '_YYTABLE_PAGE_SIZE_'; //本地记录切换后的每页显示数
var COLUMNS_LOCAL_KEY = '_YYTABLE_COLUMNS_DATA_'; //本地存储记录列定义信息

var YYPopMenu = require('../popmenu/YYPopMenu');
var ColumnConfigUtils = require('./utils/ColumnConfigUtils');
var YYColumnConfig = require('./YYColumnConfig');

require('./style/index.less');

var prefixTableColCls = 'yyui-table-col'; //表格列类前缀

//定义META
var uiMeta = {
    name: 'table',
    fields: uiMetaFields
};
//获取默认的分页数
function getDefaultPageSize(key) {
    var pageSize = DataUtil.localRead(PAGE_SIZE_LOCAL_KEY + (key ? key : '')); //读取本地记录的每页显示数
    return pageSize ? parseInt(pageSize) : 10;
}
// 设置本地每页显示条数
function setLocalPageSize(key, pageSize) {
    DataUtil.localSave(PAGE_SIZE_LOCAL_KEY + (key ? key : ''), pageSize);
}
// 获取本地缓存的每页显示数
function getLocalPageSize(key) {
    var pageSize = DataUtil.localRead(PAGE_SIZE_LOCAL_KEY + (key ? key : ''));
    return pageSize ? parseInt(pageSize) : undefined;
}
// 运行计算公式
function mathFormulaResult(mathFormula, rowData, defaultValue) {
    var formula = '' + mathFormula;
    _.forIn(rowData, function (value, key) {
        formula = formula.replace(new RegExp('{' + escape(key) + '}', 'gm'), escape(value));
    });
    try {
        var result = eval(formula);
        return isNaN(result) ? null : result;
    } catch (error) {
        console.error('[公式计算出错]', { formula: formula, mathFormula: mathFormula, rowData: rowData, error: error });
    }
    return defaultValue;
};
var YYTable = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var columns = this._getColumnsFromColumnsOrChilldren(this.props.columns, this.props.children);
        var columnsBackup = _.cloneDeep(columns);
        // BEGIN xg modified 新增从缓存读取表格列配置逻辑

        var _ref = this.props.uiorigin || {},
            pageCode = _ref.pageCode;

        var mixedColumns = ColumnConfigUtils.combineColumnConfigs({ columns: columns, pageCode: pageCode, tableKey: this.props.uikey });
        // END
        return {
            columns: this._renderColumns(mixedColumns, null, this.props),
            columnsBackup: columnsBackup, // 初始表格列的备份(未与缓存混淆时的设计态表格列配置)
            rowActiveKey: this.props.rowActiveKey, //当前高亮状态的行
            showColumnConfigModal: false // 是否显示表格列配置
        };
    },
    statics: {
        rowSelection: rowSelection,
        cloumns: YYTableCol,
        //获取默认的分页数
        getDefaultPageSize: getDefaultPageSize,
        setLocalPageSize: setLocalPageSize, //设置本地每页显示条数
        getLocalPageSize: getLocalPageSize //获取本地每页显示条数
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {

        if ('rowActiveKey' in nextProps) {
            this.setState({ rowActiveKey: nextProps.rowActiveKey });
        }
        if ('columns' in nextProps || 'children' in nextProps) {
            // BEGIN xg modified 新增从缓存读取表格列配置逻辑
            var columns = this._getColumnsFromColumnsOrChilldren(nextProps.columns, nextProps.children, nextProps);
            var columnsBackup = _.cloneDeep(columns);

            var _ref2 = nextProps.uiorigin || {},
                pageCode = _ref2.pageCode;

            var mixedColumns = ColumnConfigUtils.combineColumnConfigs({ columns: columns, pageCode: pageCode, tableKey: nextProps.uikey });
            this.setState({ columns: this._renderColumns(mixedColumns, null, nextProps), columnsBackup: columnsBackup });
            // END
        }
        if (nextProps.columns !== this.props.columns) {
            delete this.isAnyColumnsFixedCache;
            delete this.isAnyColumnsLeftFixedCache;
            delete this.isAnyColumnsRightFixedCache;
            delete this.isAnyColumnsTotalCache;
            delete this.isAnyColumnsGroupCache;
        }
    }
    //当每页分页数发生变更时
    , _onShowSizeChange: function _onShowSizeChange(current, pageSize) {
        DataUtil.localSave(PAGE_SIZE_LOCAL_KEY + (this.props.cookieKey ? this.props.cookieKey : ''), pageSize); //本地记录每页显示数
        if (this.props.pagination && _.isFunction(this.props.pagination.onShowSizeChange)) {
            this.props.pagination.onShowSizeChange(current, pageSize);
        }
    }
    //默认的分页配置
    , getDefaultPagination: function getDefaultPagination() {
        if (this.props.pagination == false) return false;
        var pageSize = getDefaultPageSize(this.props.cookieKey); //读取本地记录的每页显示数
        //存在指定值则使用指定值
        if (this.props.pagination && this.props.pagination.pageSize) {
            pageSize = this.props.pagination.pageSize;
        }
        var p = {
            showQuickJumper: true, size: 'default',
            showSizeChanger: true,
            showTotal: function showTotal(total) {
                return '\u5171 ' + total + ' \u6761';
            }
        };
        var otherProps = { onShowSizeChange: this._onShowSizeChange };
        if (pageSize && !isNaN(parseInt(pageSize))) otherProps.pageSize = parseInt(pageSize);
        return _.assign(p, this.props.pagination, otherProps);
    }
    //默认的勾选配置
    , getDefaultRowSelection: function getDefaultRowSelection() {
        var rowSelection;
        if (this.props.checkable) {
            rowSelection = { type: 'checkbox' };
        };
        if (this.props.checkable !== false && this.props.rowSelection) {
            if (rowSelection) {
                rowSelection = _.assign(rowSelection, this.props.rowSelection);
            } else {
                rowSelection = this.props.rowSelection;
            }
            // //如果点击行时触发勾选效果 覆盖onChange
            // if(this.props.rowClickCheckable) {
            //     rowSelection.onChange = this._onSelectedRowChange(rowSelection);
            // }
        }
        return rowSelection;
    }
    //是否启用了多选模式
    , isEnableCheckable: function isEnableCheckable() {
        var rowSelection = this.getDefaultRowSelection();
        return rowSelection && (rowSelection.type == undefined || rowSelection.type == 'checkbox');
    }
    // 配置列 是否显示 显示顺序
    , _resolveData: function _resolveData(columns) {
        if (!_.isArray(columns) || columns.length == 0) return columns; //返回原始值
        // 排除 isShow == false 的项
        var columnsShow = _.filter(columns, function (column) {
            if (!column || column.isShow == undefined) return true;
            return column.isShow === false ? false : true; //只有为false则排除
        });

        // 排除 showIndex == undefiend 的项
        var columnWithOutShowIndex = [];
        var columnsWithShowIndex = _.filter(columnsShow, function (column) {
            if (!column) return true;
            if (column.showIndex == undefined) {
                columnWithOutShowIndex.push(column);
            }
            return column.showIndex != undefined;
        });
        // 依据showIndex进行排序
        var columnsSort = columnsWithShowIndex.sort(function (col1, col2) {
            return col1.showIndex - col2.showIndex;
        });
        // 加入 showIndex == undefined 的项, 处理title
        return columnsSort.concat(columnWithOutShowIndex);
    }
    //处理外部的column.render方法，克隆形成新的columns集合
    , _cloneColumns: function _cloneColumns(columns) {
        var newColumns = _.cloneDeep(columns);
        for (var i = 0; i < newColumns.length; i++) {
            var col = newColumns[i];
            if (_.isFunction(col.render)) {
                //将外部的render方法改为_outRender方法
                col._outRender = col.render;
                delete col.render;
            }
        }
        return newColumns;
    }
    //渲染render回调处理
    , _callbackColumns: function _callbackColumns(columns) {
        for (var i = 0; i < columns.length; i++) {
            var col = columns[i];
            col.render = function (text, record, index) {
                var thisCol = this;
                text = text == 'null' ? '' : text;
                var cellText = text;
                //日期格式化
                if (thisCol.format && typeof cellText == 'number') {
                    if (/^[y|Y]{1,4}$/.test(thisCol.format)) {//只显示年份
                        //无需处理
                    } else {
                        var cellDate = new Date();
                        cellDate.setTime(cellText);
                        cellText = formatUtils.formatDate(cellDate, thisCol.format);
                    }
                }
                //运行计算公式
                if (thisCol.mathFormula) {
                    cellText = mathFormulaResult(thisCol.mathFormula, record, cellText);
                }
                //数字类型默认格式化显示千分位,注意cellText=0的情况
                if (typeof cellText === 'number' || cellText) {
                    if (thisCol.fieldtype == 'number') {
                        //整数
                        cellText = formatUtils.formatNumber(cellText, 0, thisCol.comma === false ? 0 : 3); //格式化千分位，省略小数位
                    } else if (thisCol.fieldtype == 'currency') {
                        //精确数值
                        var numStrs = (cellText + "").split(".");
                        var decimal = numStrs.length == 2 ? numStrs[1].length : 0; //保留原始小数位
                        if (thisCol.decimal >= 0) decimal = thisCol.decimal; //保留列定义的小数位
                        cellText = formatUtils.formatNumber(cellText, decimal, thisCol.comma === false ? 0 : 3); //格式化千分位
                    }
                }
                //执行外部render回调
                if (thisCol._outRender) {
                    cellText = thisCol._outRender(cellText, record, index);
                }
                //处理单元格内容文本过长时的悬浮title
                var cellProps = { title: cellText };
                //处理字体颜色
                if (thisCol.color) {
                    cellProps.style = { color: thisCol.color };
                }
                var cell,
                    cellObj = false;
                if (React.isValidElement(cellText) //外部自定义cell为react对象
                || _.isArray(cellText) //外部自定义cell为react数组对象
                ) {
                        cell = cellText;
                    } else {
                    if (_.isObject(cellText)) {
                        //外部自定义为{}对象，例如在处理行合并时。
                        cell = cellText;
                        cellObj = true;
                    } else {
                        cell = React.createElement('span', cellProps, cellText);
                    }
                }
                //处理链接URL
                if (thisCol.linkUrl && cellObj == false) {
                    var linkUrl = UrlUtils.fillUrlParams(thisCol.linkUrl, record);
                    var aProps = { href: linkUrl };
                    if (thisCol.linkType == '_blank') {
                        aProps.target = '_blank';
                    }
                    cell = React.createElement('a', aProps, cell);
                }
                return cell;
            }.bind(col);
        }
        return columns;
    }
    //渲染行号列
    , _appendRowNumColumns: function _appendRowNumColumns(columns, currProps) {
        //是否配置显示行序号列
        if (currProps && currProps.showRowNum !== true) return columns;
        var isFixed = false;
        //处理显示固定列
        for (var i = 0; i < columns.length; i++) {
            var col = columns[i];
            if (col.isShow !== false && col.fixed == 'left') {
                isFixed = true;break;
            }
        }
        var numCol = {
            key: 'rowNum',
            dataIndex: 'rowNum',
            title: '序号',
            width: 50,
            align: 'center'
        };
        if (isFixed) numCol.fixed = 'left';
        columns.unshift(numCol);
        return columns;
    }
    //渲染处理column.title为YYTitleGroup
    , _titleGroupColumns: function _titleGroupColumns(columns) {
        for (var i = 0; i < columns.length; i++) {
            var col = columns[i];
            if (_.isString(col.title)) {
                //确保title为string类型
                if (col.colSpan > 0 && !_.isEmpty(col.titleGroup)) {
                    //处理分组标题
                    //获取被合并的可见列信息
                    var groupColumns = [];
                    var groupColumnsSpan = 0;
                    for (var colSpanIdx = i; colSpanIdx < columns.length; colSpanIdx++) {
                        var colSpanColumn = columns[colSpanIdx];
                        if (colSpanColumn && colSpanColumn.isShow !== false) {
                            groupColumns.push(colSpanColumn);
                            groupColumnsSpan++;
                        }
                        if (groupColumnsSpan == col.colSpan) break;
                    }
                    col.title = React.createElement(YYTitleGroup, { group: col.titleGroup, columns: groupColumns });
                    col.className = 'yyui-titlegroup-box ' + (col.className ? col.className : '');
                } else {
                    //处理超长标题的title
                    col.title = React.createElement('span', { title: col.title }, col.title);
                }
            }
        }
        return columns;
    }
    //为列追加特殊类名，支持拖拽时追加dataIndex类名，存在align则追加文本对齐类名，存在required则追加必填类名。
    , _addColClass: function _addColClass(columns) {
        var _props = this.props,
            draggable = _props.draggable,
            dataSource = _props.dataSource;
        //是否为树形表格

        var isTreeTable = dataSource && dataSource.some(function (record) {
            return record.children;
        });
        var isTreeCls = false;
        return _.map(columns, function (column) {
            var _column = column,
                className = _column.className,
                dataIndex = _column.dataIndex,
                align = _column.align,
                titleAlign = _column.titleAlign,
                fieldtype = _column.fieldtype,
                isShow = _column.isShow,
                required = _column.required,
                colSpan = _column.colSpan,
                titleGroup = _column.titleGroup;

            var resultCls = className ? [className] : [];
            //确保显示列的第一个列，添加树形图标的样式名
            if (isShow !== false && isTreeTable && isTreeCls === false) {
                resultCls.push('has-expand-icon');
                isTreeCls = true;
            }
            if (draggable) {
                resultCls.push(prefixTableColCls + '-' + dataIndex);
            }
            if (required && !(colSpan > 0 && !_.isEmpty(titleGroup))) {
                //排除多表头的必填样式
                resultCls.push('title-required');
            }
            if (titleAlign == 'right') {
                //处理titleAlign对齐属性
                resultCls.push('title-right');
            } else if (titleAlign == 'center') {
                resultCls.push('title-center');
            }
            if (align == 'right') {
                //处理align对齐属性
                resultCls.push('text-right');
            } else if (align == 'center') {
                resultCls.push('text-center');
            } else if (align == 'left') {
                //默认左对齐
            } else {
                //未明确指定对齐方式
                //如果是数字或精确数值则默认右对齐
                if (fieldtype == 'number' || fieldtype == 'currency') {
                    resultCls.push('text-right');
                }
            }
            if (resultCls) {
                column = _.assign(column, { className: resultCls.length ? resultCls.join(" ") : null });
            }
            return column;
        });
    }
    //存在children则从children对象集合中解析出columns简单对象结构，否则直接读取columns简单对象结构
    , _getColumnsFromColumnsOrChilldren: function _getColumnsFromColumnsOrChilldren(columns, children) {
        var _columns = [];
        if (_.isArray(children) && children.length > 0) {
            _.forEach(children, function (child) {
                if (React.isValidElement(child)) {
                    //一般为YYTableCol对象
                    var column = _.assign({}, child.props);
                    if (child.key) column.key = child.key; //获取key值
                    _columns.push(column);
                }
            });
        } else {
            _columns = _.isArray(columns) ? columns : [];
        }
        return _columns;
    }
    //渲染列定义
    , _renderColumns: function _renderColumns(columns, children, currProps) {
        var _columns = this._getColumnsFromColumnsOrChilldren(columns, children);
        _columns = this._resolveData(_columns); //处理isShow|showIndex
        _columns = this._cloneColumns(_columns); //处理外部column.render为column._outRender
        _columns = this._titleGroupColumns(_columns); //处理titleGroup
        _columns = this._appendRowNumColumns(_columns, currProps); //追加行序号列
        _columns = this._callbackColumns(_columns); //处理cell的文字的color和过长悬浮title信息、链接URL
        _columns = this._localReadColsWithWidth(_columns); //如果YYTable，draggable=true并且有cookieKey属性则从本地读取width数据，否则直接返回_columns
        _columns = this._addColClass(_columns); //处理cell的column.className,为其追加一个dataindex所指定的classname，如果YYTable，draggable=true时添加，处理align对齐样式，处理required必填样式
        return _columns;
    }
    //获取行数据rowkey值
    , _getRowPrimaryValue: function _getRowPrimaryValue(record) {
        var rowPrimaryValue = '';
        if (typeof this.props.rowKey === 'function') {
            rowPrimaryValue = this.props.rowKey(record);
        } else {
            //rowKey是普通字符串
            var rowKey = this.props.rowKey ? this.props.rowKey : 'key';
            rowPrimaryValue = record[rowKey];
        }
        return rowPrimaryValue;
    }
    //处理行选择样式
    , _onRowClick: function _onRowClick(record, index) {
        var _this = this;

        var onRowClick = this.props.onRowClick;
        var rowActiveKey = '';
        var rowPrimaryValue = this._getRowPrimaryValue(record);
        if (rowPrimaryValue) {
            if (rowPrimaryValue !== this.state.rowActiveKey) {
                rowActiveKey = rowPrimaryValue;
            } else if (this.state.rowActiveKey && rowPrimaryValue == this.state.rowActiveKey) {
                rowActiveKey = ''; //重复选择相同行时，取消选中状态
            }
        }
        this.setState({ rowActiveKey: rowActiveKey }, function () {
            if (_.isFunction(onRowClick)) {
                onRowClick(record, index, rowActiveKey);
            }
        });

        //多选模式并且启用的行点击关联勾选框
        if (this.isEnableCheckable()) {
            var rowSelection = this.getDefaultRowSelection();
            //如果定义了getCheckboxProps
            var checkboxProps = {};
            if (rowSelection && _.isFunction(rowSelection.getCheckboxProps)) {
                checkboxProps = rowSelection.getCheckboxProps(record);
            }
            //选中行同时处理勾选
            if (checkboxProps.disabled !== true && this.props.rowClickCheckable) {
                // var selectedRowKeys = this.state.selectedRowKeys ? this.state.selectedRowKeys :[];
                // this.setState({selectedRowKeys:selectedRowKeys},function(){
                //执行onChange回调
                if (rowSelection) {
                    //获取勾选行的数据
                    var selectedRowKeys = rowSelection.selectedRowKeys ? _.cloneDeep(rowSelection.selectedRowKeys) : [];
                    var isInclude = _.includes(selectedRowKeys, rowPrimaryValue);
                    if (isInclude) {
                        selectedRowKeys = _.remove(selectedRowKeys, function (key) {
                            return key !== rowPrimaryValue;
                        });
                    } else {
                        selectedRowKeys.push(rowPrimaryValue);
                    }
                    var seletedRows = [];
                    _.forEach(selectedRowKeys, function (key) {
                        for (var i = 0; i < _this.props.dataSource.length; i++) {
                            //可能存在翻页的情况，selectedRowKeys的值是正确的，dataSource有可能只有当前页的数据而导致rowData为空
                            var rowData = _this.props.dataSource[i];
                            var primaryValue = _this._getRowPrimaryValue(rowData);
                            if (rowData && key == primaryValue) {
                                seletedRows.push(rowData);
                                break;
                            }
                        }
                    });
                    //执行外部onChange
                    if (_.isFunction(rowSelection.onChange)) {
                        rowSelection.onChange(selectedRowKeys, seletedRows);
                    }
                    //执行外部onSelect
                    if (_.isFunction(rowSelection.onSelect)) {
                        //多选情况时selected需要由isInclude参数判断
                        rowSelection.onSelect(record, !isInclude, seletedRows);
                    }
                }
            }
        }
    },
    _rowClassName: function _rowClassName(record, index) {
        var rowActiveKey = this.state.rowActiveKey;
        var rowCls = [];
        var rowPrimaryValue = this._getRowPrimaryValue(record);
        if (rowActiveKey && rowActiveKey === rowPrimaryValue) {
            //当前激活行高亮
            rowCls.push(this.className('row-selected'));
        }
        var rowClassName = this.props.rowClassName;
        if (_.isFunction(rowClassName)) {
            rowCls.push(rowClassName(record, index));
        }
        return rowCls.length > 0 ? rowCls.join(' ') : '';
    }
    //绑定表格行双击事件
    , _rowDoubleClick: function _rowDoubleClick() {
        var domRows = ReactDOM.findDOMNode(this).querySelectorAll('.ant-table-tbody .ant-table-row');
        var dataRows = this.props.dataSource;
        var rowDbClick = this.props.onRowDoubleClick;
        var pagination = this.getDefaultPagination();
        var that = this;
        if (domRows && domRows.length > 0) {
            _.forEach(domRows, function (tr, index) {
                var rowIndex = index;
                var pageNumber = pagination.current;
                var pageSize = pagination.pageSize;
                var rowData = dataRows && index < dataRows.length ? dataRows[index] : undefined;
                //解决前端分页情况下双击的数据索引问题
                if (pageNumber != undefined && pageSize != undefined) {
                    var pageRowIndex = (pageNumber > 0 ? pageNumber - 1 : 0) * pageSize + index;
                    if (pageRowIndex < dataRows.length) {
                        rowData = dataRows[pageRowIndex];
                    }
                }
                //绑定行双击事件
                tr.ondblclick = function (options) {
                    var rowData = options.rowData,
                        rowIndex = options.rowIndex,
                        pageNumber = options.pageNumber,
                        pageSize = options.pageSize;
                    //console.log('ondblclick------------>',dataRows[index]);

                    if (rowDbClick) {
                        rowDbClick(rowData, rowIndex, pageNumber, pageSize);
                    }
                }.bind(that, { rowData: rowData, rowIndex: rowIndex, pageNumber: pageNumber, pageSize: pageSize });
            });
        }
    }
    //绑定表格右键点击事件
    , _onmouseRightClick: function _onmouseRightClick() {
        var domTable = ReactDOM.findDOMNode(this);
        domTable.oncontextmenu = function (event) {
            //解决超出屏幕底部的高度（弹出菜单被遮挡的问题）
            var overSize = event.clientY + 3 * 36 - window.innerHeight;
            //弹出右键菜单项
            this._tablecontextmenu.show(event, {}, event.clientX, overSize > 0 ? event.clientY - overSize - 5 : event.clientY);
            EventUtils.stopBubble(event);
        }.bind(this);
    }
    //右键菜单点击事件
    , _onContextMenuClick: function _onContextMenuClick(event, node) {
        var menuKey = event.key;
        if (menuKey == 'tableContextMenuConfigColumns') {
            //自定义列配置
            if (this.isAnyColumnsGroup()) {
                // 多表头暂不支持自定义列配置
                YYMessage.error("多表头的表格暂不支持自定义配置", 3);
                return;
            }
            this.setState({ showColumnConfigModal: true });
        }
    }
    //绑定事件
    , _bindEvent: function _bindEvent() {
        this._rowDoubleClick();
        this._onmouseRightClick();
    }
    // BEGIN xg add 表格列配置事件处理
    , _onColumnConfigDone: function _onColumnConfigDone(columnConfigs) {
        var _ref3 = this.props.uiorigin || {},
            pageCode = _ref3.pageCode;

        var options = { columns: this.state.columnsBackup, columnConfigs: columnConfigs, pageCode: pageCode, tableKey: this.props.uikey };
        var targetColumns = ColumnConfigUtils.columnConfigDone(options);
        targetColumns = this._renderColumns(targetColumns, null, this.props);
        this.setState({ columns: targetColumns, showColumnConfigModal: false });
    },
    _onColumnConfigCancel: function _onColumnConfigCancel() {
        this.setState({ showColumnConfigModal: false });
    }
    // END
    , _getIndexOfTableCol: function _getIndexOfTableCol(elem) {
        var dataIndex = '';
        var classList = elem.classList;
        for (var index = 0; index < classList.length; index++) {
            var cls = classList[index];
            var lastSeparater = cls.lastIndexOf('-');
            if (cls.indexOf(prefixTableColCls) !== -1) {
                return cls.substring(++lastSeparater).trim();
            }
        }
        return dataIndex;
    },
    _handleResizeStart: function _handleResizeStart(event) {
        var labelDom = event.currentTarget;
        var tableDom = this.tableDom;
        var currentThDom = labelDom.parentNode;
        var tableColIndex = this._getIndexOfTableCol(currentThDom);

        var tableRect = DomUtils.getNodeClientRect(tableDom); //表格
        var currentThRect = DomUtils.getNodeClientRect(currentThDom); //当前的表头列
        var resizerLabelRect = DomUtils.getNodeClientRect(labelDom); //当前的伸缩label

        var resizerLineWidth = currentThRect.width;
        var resizerLineHeight = tableRect.height;
        var resizerLineLeft = resizerLabelRect.right - tableRect.left;

        this.refs.resizerLine.onLabelMouseDown(event); //开始捕获鼠标移动

        this.currentThDom = currentThDom;
        this.setState({
            visibleResizer: true,
            currentColKey: tableColIndex,
            resizerLineWidth: resizerLineWidth,
            resizerLineHeight: resizerLineHeight,
            resizerLineLeft: resizerLineLeft - resizerLineWidth
        });
    },
    _localSaveColumnsWidth: function _localSaveColumnsWidth(columns) {
        var _props2 = this.props,
            cookieKey = _props2.cookieKey,
            draggable = _props2.draggable;

        if (cookieKey && draggable) {
            //只在支持拖拽及存在cookieKey属性时才进行存储
            var saveKey = ('' + COLUMNS_LOCAL_KEY + (cookieKey ? cookieKey : '')).trim();
            var data = _.map(columns, function (column) {
                var dataIndex = column.dataIndex,
                    width = column.width;

                return { dataIndex: dataIndex, width: width };
            });
            DataUtil.localSave(saveKey, data);
        }
    },
    _localReadColsWithWidth: function _localReadColsWithWidth(columns) {
        var _props3 = this.props,
            cookieKey = _props3.cookieKey,
            draggable = _props3.draggable;

        if (cookieKey && draggable) {
            //只在支持拖拽及存在cookieKey属性时才进行读取
            var key = ('' + COLUMNS_LOCAL_KEY + (cookieKey ? cookieKey : '')).trim();
            var columnsWidth = DataUtil.localReadObject(key);
            return _.map(columns, function (column) {
                _.forEach(columnsWidth, function (info) {
                    if (column.dataIndex === info.dataIndex && info.width != undefined) {
                        column = _.assign(column, { width: info.width });
                    }
                });
                return column;
            });
        }
        return columns;
    },
    _handleResizeEnd: function _handleResizeEnd(width, key) {
        var currentThDom = this.currentThDom;
        var columns = this.state.columns;

        if (currentThDom) {
            columns = _.map(columns, function (column) {
                var _column2 = column,
                    dataIndex = _column2.dataIndex;

                if (key === dataIndex) {
                    column = _.assign(column, { width: width });
                }
                return column;
            });
        }

        this._localSaveColumnsWidth(columns);
        this.setState({ visibleResizer: false, columns: columns });
    },
    _operResizerLabel: function _operResizerLabel(domThs, action) {
        if (domThs && domThs.length) {
            for (var index = 0; index < domThs.length - 1; index++) {
                //排除最后一个
                DomUtils[action](domThs[index], this._handleResizeStart);
            }
        }
    },
    componentDidMount: function componentDidMount() {
        var tableDom = ReactDOM.findDOMNode(this).querySelector('.ant-table');
        var domThs = tableDom ? tableDom.querySelectorAll('.ant-table-thead th') : null;
        this.tableDom = tableDom;
        this.domThs = domThs;

        if (this.props.draggable) {
            this._operResizerLabel(domThs, 'addResizerLabel');
        }
        //调整勾选框列的col定义的宽度值
        if (this.isEnableCheckable()) {
            var checkboxCols = tableDom ? tableDom.querySelectorAll('colgroup col:first-child') : null;
            if (checkboxCols) {
                for (var i = 0; i < checkboxCols.length; i++) {
                    var checkboxCol = checkboxCols[i];
                    checkboxCol.style.width = '60px';
                    checkboxCol.style.minWidth = '60px';
                }
            }
        }
        this._bindEvent();
    },
    componentDidUpdate: function componentDidUpdate() {
        this._bindEvent();
    },
    componentWillUnmount: function componentWillUnmount() {
        if (this.props.draggable) {
            this._operResizerLabel(this.domThs, 'removeResizerLabel');
        }
        this.tableDom = null;
        this.domThs = null;
        this.currentThDom = null;
    }
    //渲染内部行筛选输入框
    , _renderInnerFilters: function _renderInnerFilters(fixedColumns, fixed) {
        var columns = [];
        //存在左右固定列则渲染固定列的内嵌行
        if (fixed !== undefined && fixed !== false) {
            columns = fixedColumns;
        } else {
            //渲染全部列
            columns = this.state.columns;
        }
        var enableInnerRow = false; //是否启用行内筛选功能
        var colViews = [];
        //多选模式下勾选列的占位单元格(注意：固定列时fixedColumns会包含勾选列)
        if (this.isEnableCheckable() && !(fixed !== undefined && fixed !== false)) {
            colViews.push(React.createElement('td', null));
        }
        _.forEach(columns, function (col) {
            var column = col;
            if (column.isShow !== false) {
                var inputView = null;
                if (column.innerFilter === true) {
                    enableInnerRow = true;
                    if (_.isFunction(column.innerFilterRender)) {
                        inputView = column.innerFilterRender(column);
                    } else {
                        inputView = React.createElement(YYInput, column.innerFilterProps);
                    }
                }
                var tdStyle = {};
                if (column.width) tdStyle.width = column.width;
                colViews.push(React.createElement(
                    'td',
                    { style: tdStyle },
                    inputView
                ));
            }
        });
        if (enableInnerRow) {
            return React.createElement(
                'thead',
                { className: this.className('inner-filter') },
                React.createElement(
                    'tr',
                    null,
                    colViews
                )
            );
        } else {
            return null;
        }
    }
    //渲染内部行合计
    , _renderInnerTotals: function _renderInnerTotals(fixedColumns, fixed) {
        var columns = [];
        //存在左右固定列则渲染固定列的内嵌行
        if (fixed !== undefined && fixed !== false) {
            columns = fixedColumns;
            //如果存在合计列，则把固定列中非合计列标记为空合计emptyTotal（固定列中无合计列的情况），供固定列显示出合计行以免出现错位
            if (this.isAnyColumnsTotal()) {
                _.forEach(columns, function (col) {
                    if (col.isShow !== false && col.total !== true) {
                        col.emptyTotal = true;
                    }
                });
            }
        } else {
            //渲染全部列
            columns = this.state.columns;
        }
        var checkbox = false; //是否启用勾选行
        //多选模式下勾选列的占位单元格(注意：固定列时fixedColumns会包含勾选列)
        if (this.isEnableCheckable() && !(fixed !== undefined && fixed !== false)) {
            checkbox = true;
        }

        var view = React.createElement(YYColumnTotals, { columns: columns, dataSource: this.props.dataSource,
            totalIndex: this.props.totalIndex, totalText: this.props.totalText, totalValues: this.props.totalValues,
            checkbox: checkbox });
        return view;
    }
    //表格数据内容上下视图处理
    , _getBodyWrapper: function _getBodyWrapper(body, fixedColumns, fixed) {
        var filterViews = this._renderInnerFilters(fixedColumns, fixed); //表格行内筛选框
        var totalViews = this._renderInnerTotals(fixedColumns, fixed); //表格合计统计
        var bodyViews = [];
        if (filterViews) bodyViews.push(filterViews);
        bodyViews.push(body);
        if (totalViews) bodyViews.push(totalViews);
        return bodyViews;
    },
    //是否存在多表头
    isAnyColumnsGroup: function isAnyColumnsGroup() {
        if ('isAnyColumnsGroupCache' in this) {
            return this.isAnyColumnsGroupCache;
        }
        var currentColumns = this.state.columns || [];
        this.isAnyColumnsGroupCache = currentColumns.some(function (column) {
            return !!(column.colSpan > 0 && !_.isEmpty(column.titleGroup));
        });
        return this.isAnyColumnsGroupCache;
    },

    //是否存在合计列
    isAnyColumnsTotal: function isAnyColumnsTotal(columns) {
        if (columns) {
            return columns.some(function (column) {
                return !!column.total;
            });
        } else {
            if ('isAnyColumnsTotalCache' in this) {
                return this.isAnyColumnsTotalCache;
            }
            var currentColumns = this.state.columns || [];
            this.isAnyColumnsTotalCache = currentColumns.some(function (column) {
                return !!column.total;
            });
            return this.isAnyColumnsTotalCache;
        }
    },

    //是否存在固定列
    isAnyColumnsFixed: function isAnyColumnsFixed() {
        if ('isAnyColumnsFixedCache' in this) {
            return this.isAnyColumnsFixedCache;
        }
        var currentColumns = this.state.columns || [];
        this.isAnyColumnsFixedCache = currentColumns.some(function (column) {
            return !!column.fixed;
        });
        return this.isAnyColumnsFixedCache;
    },

    //是否存在左固定列
    isAnyColumnsLeftFixed: function isAnyColumnsLeftFixed() {
        if ('isAnyColumnsLeftFixedCache' in this) {
            return this.isAnyColumnsLeftFixedCache;
        }
        var currentColumns = this.state.columns || [];
        this.isAnyColumnsLeftFixedCache = currentColumns.some(function (column) {
            return column.fixed === 'left' || column.fixed === true;
        });
        return this.isAnyColumnsLeftFixedCache;
    },

    //是否存在右固定列
    isAnyColumnsRightFixed: function isAnyColumnsRightFixed() {
        if ('isAnyColumnsRightFixedCache' in this) {
            return this.isAnyColumnsRightFixedCache;
        }
        var currentColumns = this.state.columns || [];
        this.isAnyColumnsRightFixedCache = currentColumns.some(function (column) {
            return column.fixed === 'right';
        });
        return this.isAnyColumnsRightFixedCache;
    }
    //渲染显示行序号
    ,
    renderRowNum: function renderRowNum(options) {
        var pagination = options.pagination,
            dataSource = options.dataSource,
            showRowNum = options.showRowNum;
        //显示行序号

        if (showRowNum === true && dataSource && dataSource.length > 0) {
            _.forEach(dataSource, function (row, idx) {
                var startNum = 0;
                if (pagination && dataSource.length <= pagination.pageSize) {
                    //确保为远程数据分页
                    startNum = ((pagination.current ? pagination.current : 1) - 1) * (pagination.pageSize ? pagination.pageSize : 0);
                }
                row.rowNum = startNum + 1 + idx;
            });
        }
    },
    //是否启用固定表头
    _isUseFixedHeader: function _isUseFixedHeader() {
        var anyFixed = this.isAnyColumnsFixed();
        var anyTitleGroup = this.isAnyColumnsGroup();
        //存在固定列+多表头则默认启用固定表头
        var useFixedHeader = anyFixed && anyTitleGroup ? true : this.props.useFixedHeader;
        return useFixedHeader;
    },
    render: function render() {
        var _this2 = this;

        var locale = {};
        var _props4 = this.props,
            emptyView = _props4.emptyView,
            dataSource = _props4.dataSource,
            showRowNum = _props4.showRowNum,
            rowBreak = _props4.rowBreak;

        var cls = this.className();
        if (rowBreak === true) {
            cls = cls + ' row-break';
        }
        emptyView ? locale.emptyText = emptyView : null;
        var pagination = this.getDefaultPagination();
        //渲染行序号
        this.renderRowNum({ pagination: pagination, dataSource: dataSource, showRowNum: showRowNum });
        var tableViews = [];
        tableViews.push(React.createElement(Table, _extends({}, this.props, {
            ref: 'mytable',
            dataSource: dataSource,
            rowClassName: this._rowClassName.bind(this),
            onRowClick: this._onRowClick,
            className: cls,
            columns: this.state.columns,
            locale: locale,
            useFixedHeader: this._isUseFixedHeader(),
            getBodyWrapper: this._getBodyWrapper,
            rowSelection: this.getDefaultRowSelection(),
            pagination: pagination
        })));
        tableViews.push(React.createElement(YYPopMenu, { ref: function ref(my) {
                return _this2._tablecontextmenu = my;
            }, items: [{ key: 'tableContextMenuConfigColumns', icon: 'setting', text: '自定义列' }], onMenuClick: this._onContextMenuClick.bind(this) }));
        if (this.props.draggable) {
            tableViews.push(React.createElement(ResizerLine, {
                ref: 'resizerLine',
                left: this.state.resizerLineLeft,
                height: this.state.resizerLineHeight,
                visible: this.state.visibleResizer,
                onResizeEnd: this._handleResizeEnd,
                currentColKey: this.state.currentColKey,
                initialWidth: this.state.resizerLineWidth
            }));
        }
        // BEGIN xg modified 增加表格配置列组件
        if (this.state.showColumnConfigModal) {
            var _ref4 = this.props.uiorigin || {},
                pageCode = _ref4.pageCode;

            var options = { columns: this.state.columnsBackup, pageCode: pageCode, tableKey: this.props.uikey };
            var columns = ColumnConfigUtils.showColumnConfig(options);
            tableViews.push(React.createElement(YYColumnConfig, _extends({}, this.props, { visible: this.state.showColumnConfigModal, columns: columns,
                onOk: this._onColumnConfigDone, onCancel: this._onColumnConfigCancel })));
        }
        // END
        return React.createElement(
            'div',
            { clasName: this.className('wrapper') },
            tableViews
        );
    }
});

module.exports = YYTable;