'use strict';

var React = require('react');
var _ = require('lodash');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
require('./style/titlegroup.less');
//定义META
var uiMeta = {
    name: 'titlegroup',
    fields: []
};
/**
{
    title: 'Address',
    key:'address',
    children: [{
        title: 'Street',
        key: 'street',
        width: 200,
    }, {
        title: 'Block',
        children: [{
            title: 'Building',
            key: 'building',
            width: 50,
        }, {
            title: 'Door No.',
            key: 'number',
            width: 100,
        }],
    }]
}
 */
var YYTitleGroup = YYClass.create({
    uiMeta: uiMeta,
    render: function render() {
        var rowColums = [];
        var rows = _.isArray(this.props.group) ? this.props.group : [this.props.group];
        //配置rowSpan、colSpan的值
        this._getGroupSpans(rows, rowColums);
        //console.log('groupColumns--->',groupColumns);
        return this._renderGroupTable(rowColums);
    },
    _renderGroupTable: function _renderGroupTable(rows) {
        var columns = this.props.columns;

        var allCol = [];
        var columnIndex = 0;
        //按行遍历多表头
        var allTr = rows.map(function (row, index) {
            var thViews = row.map(function (cellProps, cellIndex) {
                var colStyle = null;
                if (cellProps.width && cellProps.width > 0) {
                    colStyle = { width: cellProps.width, minWidth: cellProps.width, maxWidth: cellProps.width };
                    allCol.push(React.createElement('col', null));
                }
                var cellClassName = [];
                //最后节点的表头必填样式
                if (!cellProps.children && columns && columnIndex < columns.length) {
                    var cellColumn = columns[columnIndex];
                    if (cellColumn && cellColumn.required) {
                        cellClassName.push('text-required');
                    }
                    columnIndex = columnIndex + 1;
                }
                //确保过长文本提示悬浮信息
                var cellTitleView = React.createElement('span', { title: cellProps.title }, cellProps.title);
                return React.createElement(
                    'th',
                    { title: cellProps.title, colSpan: cellProps.colSpan, className: cellClassName.length ? cellClassName.join(' ') : null, rowSpan: cellProps.rowSpan, style: colStyle },
                    cellTitleView
                );
            });
            return React.createElement(
                'tr',
                { key: index },
                thViews
            );
        });
        var allColgroup = React.createElement(
            'colgroup',
            null,
            allCol
        );
        return React.createElement(
            'table',
            { className: this.className() },
            allCol.length > 0 ? allColgroup : null,
            allTr
        );
    },
    _getGroupSpans: function _getGroupSpans(allColumns, allRows) {
        //计算分组表头的rowSpan和colSpan值
        var _groupColumns = function _groupColumns(columns) {
            var currentRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var parentColumn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var rows = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

            // track how many rows we got
            rows[currentRow] = rows[currentRow] || [];
            var grouped = [];
            var setRowSpan = function setRowSpan(column) {
                var rowSpan = rows.length - currentRow;
                if (column && !column.children && rowSpan > 1 && ( // parent columns are supposed to be one row
                !column.rowSpan || column.rowSpan < rowSpan)) {
                    column.rowSpan = rowSpan;
                }
            };
            _.forEach(columns, function (column, index) {
                var newColumn = _.assign({}, column);
                rows[currentRow].push(newColumn);
                parentColumn.colSpan = parentColumn.colSpan || 0;
                if (newColumn.children && newColumn.children.length > 0) {
                    newColumn.children = _groupColumns(newColumn.children, currentRow + 1, newColumn, rows);
                    parentColumn.colSpan = parentColumn.colSpan + newColumn.colSpan;
                } else {
                    parentColumn.colSpan++;
                }
                // update rowspan to all same row columns
                for (var i = 0; i < rows[currentRow].length - 1; ++i) {
                    setRowSpan(rows[currentRow][i]);
                }
                // last column, update rowspan immediately
                if (index + 1 === columns.length) {
                    setRowSpan(newColumn);
                }
                grouped.push(newColumn);
            });
            return grouped;
        };
        var groupColumns = _groupColumns(allColumns, 0, {}, allRows);
        return groupColumns;
    }
});

module.exports = YYTitleGroup;