'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * 重写Antd的Table组件相关实现 by dio
 */
var React = require('react');

var _require = require('antd'),
    Table = _require.Table,
    Spin = _require.Spin;

var RcTable2 = require('./RcTable');
var classnames = require('classnames');
var _ = require('lodash');
Table.prototype.render = function () {
    var _classnames,
        _this = this;

    var _props = this.props,
        style = _props.style,
        className = _props.className,
        rowKey = _props.rowKey;

    var restProps = _.assign({}, this.props);
    delete restProps.style;
    delete restProps.className;
    delete restProps.rowKey;
    var data = this.getCurrentPageData();
    var columns = this.renderRowSelection();
    var expandIconAsCell = this.props.expandedRowRender && this.props.expandIconAsCell !== false;
    var locale = this.getLocale();

    var classString = classnames((_classnames = {}, _defineProperty(_classnames, 'ant-table-' + this.props.size, true), _defineProperty(_classnames, 'ant-table-bordered', this.props.bordered), _classnames));

    columns = this.renderColumnsDropdown(columns);
    columns = columns.map(function (column, i) {
        var newColumn = _.assign({}, column);
        newColumn.key = _this.getColumnKey(newColumn, i);
        return newColumn;
    });

    // Empty Data
    var emptyRowKey = void 0;
    if (!data || data.length === 0) {
        columns.forEach(function (column, index) {
            column.render = function () {
                return {
                    children: !index ? React.createElement(
                        'div',
                        { className: 'ant-table-placeholder' },
                        locale.emptyText
                    ) : null,
                    props: {
                        colSpan: !index ? columns.length : 0
                    }
                };
            };
        });
        emptyRowKey = 'key';
        data = [_defineProperty({}, emptyRowKey, 'empty')];
    }

    var table = React.createElement(RcTable2, _extends({}, restProps, { //add by dio 使用重写后的RcTable
        data: data,
        columns: columns,
        className: classString,
        expandIconColumnIndex: columns[0] && columns[0].key === 'selection-column' ? 1 : 0,
        expandIconAsCell: expandIconAsCell,
        rowKey: emptyRowKey || rowKey
    }));
    // if there is no pagination or no data,
    // the height of spin should decrease by half of pagination
    var paginationPatchClass = this.hasPagination() && data && data.length !== 0 ? 'ant-table-with-pagination' : 'ant-table-without-pagination';
    var spinClassName = this.props.loading ? paginationPatchClass + ' ant-table-spin-holder' : '';
    table = React.createElement(
        Spin,
        { className: spinClassName, spinning: this.props.loading },
        table
    );
    return React.createElement(
        'div',
        { className: className + ' clearfix', style: style },
        table,
        this.renderPagination()
    );
};

module.exports = Table;