'use strict';

var _reactGridLayout = require('react-grid-layout');

/**
 * Created by zhangzhzhc on 2016/10/24
 * 磁贴组(同一轮播页为一组)
 */
require('react-grid-layout/css/styles.css');
require('./style/index.less');
var React = require('react');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var ResponsiveReactGridLayout = (0, _reactGridLayout.WidthProvider)(_reactGridLayout.Responsive);

//定义META
var uiMeta = {
    name: 'tilesgroup',
    fields: [field('color', false, PropTypes.string, false, '背景色')]
};
var YYTilesGroup = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var initialLayout = this.props.initialLayout ? this.props.initialLayout : this._generateLayout();
        return {
            layouts: { md: initialLayout, lg: initialLayout },
            width: this.props.width //根据此宽度，ResponsiveReactGridLayout计算每个磁贴的位置
        };
    },

    getDefaultProps: function getDefaultProps() {
        return {
            color: '#bcbcbc',
            rowHeight: 130,
            onLayoutChange: function onLayoutChange() {},
            cols: { lg: 8, md: 8, sm: 6, xs: 4, xxs: 4 }
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.width !== this.props.width) {
            this.setState({ width: nextProps.width });
        }
    },

    _generateLayout: function _generateLayout() {
        var that = this;
        var pre = this.props.children;
        var layouts = [];
        if (pre && pre.length > 0) {
            var xValue = 0;
            var yValue = 0;
            for (var i = 0; i < pre.length; i++) {
                var tileProps = pre[i].props;
                if (xValue + tileProps.colSpan > 8) {
                    xValue = 0;
                    yValue++;
                }
                layouts.push({ i: tileProps.id, x: xValue, y: yValue, w: tileProps.colSpan, h: tileProps.rowSpan });
                xValue = xValue + tileProps.colSpan;
            }
        }
        return layouts;
    },
    _generateDOMs: function _generateDOMs() {
        var children = this.props.children;
        return _.map(children, function (child, i) {
            var key = child.props.id;
            return React.createElement(
                'div',
                { key: key },
                child
            );
        });
    },
    render: function render() {
        var color = this.props.color;
        var children = this._generateDOMs();
        var layouts = this.state.layouts;
        return React.createElement(
            'div',
            { style: { width: this.state.width - 12 } },
            React.createElement(
                ResponsiveReactGridLayout,
                {
                    className: this.className(),
                    isResizable: false // 后续再放开支持配置
                    , rowHeight: this.props.rowHeight,
                    cols: this.props.cols,
                    layouts: layouts,
                    onBreakpointChange: this.onBreakpointChange,
                    onLayoutChange: this.onLayoutChange,
                    measureBeforeMount: false,
                    style: { backgroundColor: color } },
                children
            )
        );
    }
});

module.exports = YYTilesGroup;