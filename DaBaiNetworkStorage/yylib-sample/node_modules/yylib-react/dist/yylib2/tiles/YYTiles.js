'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Created by zhangzhzhc on 2016/10/24
                                                                                                                                                                                                                                                                   * 带轮播磁贴组件
                                                                                                                                                                                                                                                                   */


var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('./style/index.less');
require('react-grid-layout/css/styles.css');
var React = require('react');
var _ = require('lodash');
var YYCarousel = require('../carousel/YYCarousel');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
//定义META
var uiMeta = {
    name: 'tiles',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('id', 'yyui-tiles', PropTypes.string, false, 'id,用以区分同一页面多个磁贴'), field('effect', 'scrollx', PropTypes.string, false, '动画效果函数，可取 scrollx, fade'), field('dots', true, PropTypes.bool, false, '是否显示面板指示点'), field('arrows', false, PropTypes.bool, false, '是否显示面板左右箭头'), field('vertical', false, PropTypes.bool, false, '垂直显示'), field('autoplay', false, PropTypes.bool, false, '是否自动切换'), field('easing', 'linear', PropTypes.string, false, '动画效果'), field('beforeChange', null, PropTypes.func, false, '切换面板的回调'), field('afterChange', null, PropTypes.func, false, '切换面板的回调'), field('onClick', null, PropTypes.func, false, '点击磁贴的回调')]
};
var YYTiles = YYClass.create({
    uiMeta: uiMeta,
    getDefaultProps: function getDefaultProps() {
        return {
            id: 'yyui-tiles'
        };
    },
    getInitialState: function getInitialState() {
        return {
            width: 0
        };
    },

    _onClick: function _onClick(e) {
        e.stopPropagation();
        if (this.props.onClick && typeof this.props.onClick === 'function') {
            var target = e.target;
            var targetId = target.dataset.tileid;
            var parentId = target.parentElement.dataset.tileid;
            var targetTile = targetId ? targetId : parentId ? parentId : null;
            if (targetTile) {
                this.props.onClick(targetTile);
            }
        }
    },
    _getChildren: function _getChildren() {
        var children = this.props.children;
        var innerSlider = null;
        var containerWidth = this.state.width;
        if (children && containerWidth && containerWidth > 0) {
            innerSlider = [];
            if (children.length > 0) {
                for (var i = 0; i < children.length; i++) {
                    children[i].props.width = containerWidth;
                    innerSlider.push(React.createElement(
                        'div',
                        null,
                        ' ',
                        children[i],
                        ' '
                    ));
                }
            } else {
                innerSlider.push(React.createElement(
                    'div',
                    null,
                    children
                ));
            }
        }
        return React.createElement(
            YYCarousel,
            _extends({}, this.props, { draggable: false }),
            innerSlider
        );
    },
    componentDidMount: function componentDidMount() {
        var node = _reactDom2.default.findDOMNode(this);
        this.setState({ width: node.offsetWidth });
    },
    render: function render() {
        var that = this;
        var style = this.props.arrows === true ? { marginLeft: 30, marginRight: 30 } : null;
        return React.createElement(
            'div',
            { id: that.props.id, className: this.className(), style: style, onClick: that._onClick },
            that._getChildren()
        );
    }
});

module.exports = YYTiles;