'use strict';

/**
 * Json编辑器组件
 */
var React = require('react');
var ReactDOM = require('react-dom');
var YYClass = require('../base/YYClass');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
var JSONEditor = window.JSONEditor || null;
//定义META
var uiMeta = {
    name: 'jsontextarea',
    fields: [field('json', undefined, PropTypes.object, true, 'json数据对象'), field('mode', 'code', PropTypes.oneOf(['tree', 'view', 'form', 'code', 'text']), false, '编辑模式：tree-树结构编辑|code-代码方式编辑|view-只读模式|form-数据结构只读，值可编辑|text-纯文本编辑'), field('modeList', undefined, PropTypes.array, false, '可进行切换模式的下拉列表项，项目的值必须同mode值保持一致'), field('history', true, PropTypes.bool, false, '是否启用历史操作(撤销|重做)，当mode=tree|form时才有效'), field('search', false, PropTypes.bool, false, '是否启用搜索，当mode=tree|form|view时才生效'), field('indentation', 2, PropTypes.number, false, '缩进间距，默认：2，当mode=code|text时才生效'), field('onChange', undefined, PropTypes.func, false, '当编辑内容时，触发此回调')]
};

var YYJsonTextarea = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        var _props = this.props,
            json = _props.json,
            mode = _props.mode;

        return {
            json: json,
            mode: mode
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('json' in nextProps) {
            this.setState({
                json: nextProps.json
            });
        }
        if ('mode' in nextProps) {
            this.setState({
                mode: nextProps.mode
            });
        }
        this.editor.set(nextProps.json);
    },
    //获取当前的JSON对象
    getJson: function getJson() {
        return this.editor ? this.editor.get() : this.state.json;
    },
    //获取当前的JSON文本
    getJsonText: function getJsonText() {
        return this.editor ? this.editor.getText() : JSON.stringify(this.state.json, null, 2);
    },
    _initJsonEditor: function _initJsonEditor() {
        var container = ReactDOM.findDOMNode(this);
        var _state = this.state,
            json = _state.json,
            mode = _state.mode;

        var options = {
            onModeChange: this.onModeChange
        };
        if (mode) options.mode = mode; //编辑模式
        if (this.props.indentation) options.indentation = this.props.indentation; //缩进间距
        if (this.props.history) options.history = this.props.history; //是否启用历史操作
        if (this.props.search) options.search = this.props.search; //是否启用搜索
        if (this.props.modeList) options.modes = this.props.modeList; //切换模式的下拉列表
        if (this.props.onChange) options.onChange = this.props.onChange; //内容变更时的回调
        this.editor = new JSONEditor(container, options);
        this.editor.set(json);
    },
    //移除 code == 'mode'时的powerBy标识
    removeDom: function removeDom() {
        var uselessWord = ReactDOM.findDOMNode(this).querySelector('.jsoneditor-poweredBy');
        if (uselessWord) {
            var parentNode = uselessWord.parentNode;
            parentNode.removeChild(uselessWord);
        }
    },
    onModeChange: function onModeChange(newMode, oldMode) {
        if (newMode == 'code') {
            this.removeDom();
        }
    },
    componentDidMount: function componentDidMount() {
        this._initJsonEditor();
        if (this.state.mode == 'code') {
            this.removeDom();
        }
    },
    componentWillUnmount: function componentWillUnmount() {
        this.editor.destroy();
    },

    render: function render() {
        if (JSONEditor) {
            return React.createElement('div', { className: this.className(), style: this.props.style });
        } else {
            console.error('YYJsonTextarea缺少相关依赖');
            console.error('请在index.html中引入以下两行代码：');
            console.error('<link href="//cdn.bootcss.com/jsoneditor/5.5.10/jsoneditor.min.css" rel="stylesheet"/>');
            console.error('<script src="//cdn.bootcss.com/jsoneditor/5.5.10/jsoneditor.min.js"></script>');
            return null;
        }
    }
});
module.exports = YYJsonTextarea;