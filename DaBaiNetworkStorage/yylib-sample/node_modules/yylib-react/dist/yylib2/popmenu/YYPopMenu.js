'use strict';

var React = require('react');
var _ = require('lodash');

var _require = require('react-dom'),
    findDOMNode = _require.findDOMNode;

var YYClass = require('../base/YYClass');
var YYMenu = require('../menu/YYMenu');
var YYMenuItem = require('../menu/YYMenuItem');
var YYIcon = require('../icon/YYIcon');
var PropTypes = YYClass.PropTypes;
var field = YYClass.field;
require('./style/index.less');

//定义META
var uiMeta = {
    name: 'popmenu',
    fields: [
    // field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('menuClass', null, PropTypes.string, false, '自定义弹出菜单样式名'), field('items', null, PropTypes.array, true, '右键弹出菜单项数据，例如:[{key:"save",text:"保存"},{key:"delete",text:"删除"}]'), field('onMenuClick', null, PropTypes.func, true, '弹出的菜单项被点击时的回调,传递参数:event-事件对象、activeKey-当前作用的目标对象')]
};

var YYPopMenu = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            visible: false, //是否显示
            activeKey: null, //作用的目标对象
            position: null //当前位置
        };
    },
    componentDidMount: function componentDidMount() {
        document.addEventListener('click', this._onDocumentClick);
    },
    componentWillUnmount: function componentWillUnmount() {
        document.removeEventListener('click', this._onDocumentClick);
    }
    //判断n是否在root内
    , _contains: function _contains(root, n) {
        var node = n;
        while (node) {
            if (node === root) return true;
            node = node.parentNode;
        }
        return false;
    }
    //点击contextmenu以外的地方将其关闭
    , _onDocumentClick: function _onDocumentClick(event) {
        var target = event.target;
        var contextDom = findDOMNode(this);
        if (!this._contains(contextDom, target)) {
            this.hide();
        }
    }
    //API-显示弹出菜单
    , show: function show(event, activeKey, showX, showY) {
        var position = { left: showX !== undefined ? showX : event.clientX, top: showY !== undefined ? showY : event.clientY };
        this.setState({ visible: true, position: position, activeKey: activeKey });
    }
    //API-隐藏弹出菜单
    , hide: function hide() {
        this.setState({ visible: false });
    }
    //菜单项被点击时触发外部回调
    , _handleMenuClick: function _handleMenuClick(event) {
        this.setState({ visible: false }); //关闭菜单
        if (this.props.onMenuClick) {
            this.props.onMenuClick(event, this.state.activeKey);
        }
    }
    //依据items构建右键弹出的菜单列表
    , _renderMenus: function _renderMenus() {
        var items = this.props.items;

        var menus = [];
        if (items && items.length > 0) {
            _.forEach(items, function (item, idx) {
                if (item) {
                    var menuProps = _.assign({}, item);
                    menus.push(React.createElement(
                        YYMenuItem,
                        menuProps,
                        item.icon ? [React.createElement(YYIcon, { type: item.icon }), item.text] : item.text
                    ));
                }
            });
            return React.createElement(
                YYMenu,
                { className: this.props.menuClass, onClick: this._handleMenuClick },
                menus
            );
        } else {
            return null;
        }
    },
    render: function render() {
        return this.state.visible ? React.createElement(
            'div',
            { style: this.state.position, className: this.className() },
            this._renderMenus()
        ) : null;
    }
});
module.exports = YYPopMenu;