'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Created by Liyongfen on 2016/7/4.
 */
var React = require('react');
var YYClass = require('../base/YYClass');
var field = YYClass.field;
var PropTypes = YYClass.PropTypes;
var YYTransferList = require('./YYTransferList');
var YYTransferOperation = require('./YYTransferOperation');
var _ = require('lodash');
require('./style/index.less');

var uiMeta = {
    name: 'transfer',
    fields: [
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('titleLeft', '左列表', PropTypes.string, false, '左边列表标题文本'), field('titleRight', '右列表', PropTypes.string, false, '右边列表标题文本'), field('btnDownTextLeft', '下移', PropTypes.string, false, '左侧列表下移操作按钮的文本'), field('btnUpTextLeft', '上移', PropTypes.string, false, '左侧列表上移操作按钮的文本'), field('btnDownTextRight', '下移', PropTypes.string, false, '右侧列表下移操作按钮的文本'), field('btnUpTextRight', '上移', PropTypes.string, false, '右侧列表上移操作按钮的文本'), field('btnLeftText', '左移', PropTypes.string, false, '往左侧列表传输操作按钮的文本'), field('btnRightText', '右移', PropTypes.string, false, '往右侧列表传输操作i按钮的文本'), field('isSearchDisabled', false, PropTypes.bool, false, '是否禁用搜索查找'), field('leftBtnUpVisible', true, PropTypes.bool, false, '左侧上移按钮是否显示'), field('leftBtnDownVisible', true, PropTypes.bool, false, '左侧下移按钮是否显示'), field('rightBtnUpVisible', true, PropTypes.bool, false, '右侧上移按钮是否显示'), field('rightBtnDownVisible', true, PropTypes.bool, false, '右侧下移按钮是否显示'), field('isMultipleCheckLeft', false, PropTypes.bool, false, '左侧是否支持多选'), field('isMultipleCheckRight', false, PropTypes.bool, false, '右侧是否支持多选'), field('leftData', [], PropTypes.array, false, '初始化左侧列表数组'), field('rightData', [], PropTypes.array, false, '初始化右侧列表数组'), field('onChange', null, PropTypes.func, false, '当上下左右移动时，值发生变更的回调函数，传递参数：rightOptios-右侧列表项，leftOptios-左侧列表项，type-移动方式'), field('leftWidth', null, PropTypes.number, false, '左列表宽度'), field('rightWidth', null, PropTypes.number, false, '左列表宽度'), field('isBtnMoveDisableLeft', null, PropTypes.Bool, false, '左侧移动按钮是否禁用'), field('isBtnMovelDisableRight', null, PropTypes.Bool, false, '右侧移动按钮是否禁用')]
};

var YYTransfer = YYClass.create({
    uiMeta: uiMeta,
    getInitialState: function getInitialState() {
        return {
            selectArrayLeft: [], //左边栏--当前列举项中被选中的value集合
            selectArrayRight: [],
            isBtnMoveDisableLeft: true, //左边栏--是否禁用变灰
            isBtnMovelDisableRight: true, //
            optionsLeft: this.props.leftData, //左边栏--当前列举项
            optionsRight: this.props.rightData,
            isAllCheckedLeft: false, //左边栏--全选按钮
            isAllCheckedRight: false, //
            isAllDisabledLeft: false, //左边栏--不使能全选按钮
            isAllDisabledRight: false //
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if (nextProps.leftData) {
            this.setState({ optionsLeft: nextProps.leftData });
        }
        if (nextProps.rightData) {
            this.setState({ optionsRight: nextProps.rightData });
        }
    },
    handleCheck: function handleCheck(checkedOption, flag, optionIndex, e) {
        var _setState;

        var _state = this.state,
            selectArrayLeft = _state.selectArrayLeft,
            selectArrayRight = _state.selectArrayRight;
        // 是否单选模式

        var isMultipleCheck = flag === 'left' ? this.props.isMultipleCheckLeft : this.props.isMultipleCheckRight;
        // 已选择的项
        var holder = flag === 'left' ? selectArrayLeft : selectArrayRight;
        var index;
        // 删除已存在的项
        holder.forEach(function (item, i) {
            if (item.value === checkedOption.value) {
                index = i;
            }
        });
        if (index > -1) {
            holder.splice(index, 1);
        }

        // 单选模式
        if (!isMultipleCheck) {
            holder = [];
            holder.push(checkedOption);
        }
        // 多选模式
        else if (e.target.checked) {
                // 插入时为每项添加orderIndex (多选上下移动需要选择的项的顺序)
                checkedOption._orderIndex = optionIndex;
                if (_.isEmpty(holder)) {
                    holder.push(checkedOption);
                } else {
                    var isPush = false;
                    holder.some(function (checkItem, i) {
                        if (optionIndex < checkItem._orderIndex) {
                            holder.splice(i, 0, checkedOption);
                            isPush = true;
                            return isPush;
                        }
                    });
                    // holder中不存在更小orderIndex的项
                    if (!isPush) {
                        holder.push(checkedOption); // 在末尾添加
                    }
                }
                delete checkedOption._orderIndex;
            }

        var _state2 = this.state,
            optionsLeft = _state2.optionsLeft,
            optionsRight = _state2.optionsRight;

        var optionsHolder = flag === 'left' ? optionsLeft : optionsRight;

        //控制全选状态
        var isAllChecked = false;
        if (optionsHolder.length == holder.length) isAllChecked = true;
        this.setState((_setState = {}, _defineProperty(_setState, flag === 'left' ? 'selectArrayLeft' : 'selectArrayRight', holder), _defineProperty(_setState, flag === 'left' ? 'isAllCheckedLeft' : 'isAllCheckedRight', isAllChecked), _defineProperty(_setState, flag === 'left' ? 'isBtnMovelDisableRight' : 'isBtnMoveDisableLeft', _.isEmpty(holder)), _setState));
    },
    handleSelectAll: function handleSelectAll(e, flag) {
        var _setState2;

        var options = flag == 'left' ? this.state.optionsLeft : this.state.optionsRight;
        var selectArray = [];
        if (e.target.checked) {
            options.forEach(function (option, i) {
                selectArray.push(option);
            });
        }

        this.setState((_setState2 = {}, _defineProperty(_setState2, flag === 'left' ? 'selectArrayLeft' : 'selectArrayRight', selectArray), _defineProperty(_setState2, flag === 'left' ? 'isAllCheckedLeft' : 'isAllCheckedRight', e.target.checked), _defineProperty(_setState2, flag === 'left' ? 'isBtnMovelDisableRight' : 'isBtnMoveDisableLeft', _.isEmpty(selectArray)), _setState2));
    },
    callbackOnChange: function callbackOnChange(type) {
        if (typeof this.props.onChange !== 'function') return;
        this.props.onChange(this.state.optionsRight, this.state.optionsLeft, type);
    },
    handleDownMove: function handleDownMove(flag) {
        var _setState3,
            _this = this;

        var pos = 1;
        var selectItems = flag === 'right' ? this.state.selectArrayRight : this.state.selectArrayLeft;
        var options = flag === 'right' ? this.state.optionsRight : this.state.optionsLeft;

        for (var index = selectItems.length, posIndex = 0; index > 0; index--, posIndex++) {
            var selectItem = selectItems[index - 1];
            var selectIndex = 0;
            options.some(function (option, optionIndex) {
                if (option.value == selectItem.value) {
                    selectIndex = optionIndex;
                    return true;
                }
            });

            var targetPos = selectIndex + pos; // 目标位置索引
            var count = options.length; // 总数

            if (selectIndex > count) {
                selectIndex = count; //最后一行
            } else if (selectIndex < 0) {
                selectIndex = 0;
            }

            if (targetPos > count) {
                targetPos = count; //最后一行
            } else if (targetPos < 0) {
                targetPos = 0;
            }

            // 获取可向下移动的位数
            var moveCount = options.length - selectIndex - posIndex - 1;
            if (moveCount == 0) {
                continue;
            }
            options.splice(selectIndex, 1); // 删除当前选中元素
            options.splice(targetPos, 0, selectItem); //

            // console.log('selectItem' , selectItem);
        };
        this.setState((_setState3 = {}, _defineProperty(_setState3, flag == 'left' ? 'optionsLeft' : 'optionsRight', options), _defineProperty(_setState3, flag == 'left' ? 'selectArrayLeft' : 'selectArrayRight', selectItems), _setState3), function () {
            return _this.callbackOnChange(flag + "Down");
        });
    },
    handleUpMove: function handleUpMove(flag) {
        var _setState4,
            _this2 = this;

        var pos = -1;
        var selectItems = flag === 'right' ? this.state.selectArrayRight : this.state.selectArrayLeft;
        var options = flag === 'right' ? this.state.optionsRight : this.state.optionsLeft;
        // selectItems.forEach(function (selectItem, index) {
        for (var index = 0, posIndex = 0; index < selectItems.length; index++, posIndex++) {
            // self.handleMoveVertical(selectItem, options, pos, flag);
            var selectItem = selectItems[index];
            var selectIndex = 0;
            options.some(function (option, optionIndex) {
                if (option.value == selectItem.value) {
                    selectIndex = optionIndex;
                    return true;
                }
            });

            var targetPos = selectIndex + pos; // 目标位置索引
            var count = options.length; // 总数

            if (selectIndex > count) {
                selectIndex = count; //最后一行
            } else if (selectIndex < 0) {
                selectIndex = 0;
            }

            if (targetPos > count) {
                targetPos = count; //最后一行
            } else if (targetPos < 0) {
                targetPos = 0;
            }

            // 获取可向上移动的位数
            var moveCount = selectIndex - posIndex;
            // console.log('selectItem' , selectItem);

            if (moveCount > 0) {
                options.splice(selectIndex, 1); // 删除当前选中元素
                options.splice(targetPos, 0, selectItem); //
            }
        };
        this.setState((_setState4 = {}, _defineProperty(_setState4, flag == 'left' ? 'optionsLeft' : 'optionsRight', options), _defineProperty(_setState4, flag == 'left' ? 'selectArrayLeft' : 'selectArrayRight', selectItems), _setState4), function () {
            return _this2.callbackOnChange(flag + "Up");
        });
    },
    onHandleMove: function onHandleMove(flag) {
        var _setState5,
            _this3 = this;

        var selectArray = flag == 'right' ? this.state.selectArrayLeft : this.state.selectArrayRight;
        var optionsTarget = flag == 'right' ? this.state.optionsRight : this.state.optionsLeft;
        var optionsSource = flag == 'right' ? this.state.optionsLeft : this.state.optionsRight;

        selectArray.map(function (selectItem) {
            optionsSource = optionsSource.filter(function (optionSource) {
                return selectItem.value != optionSource.value;
            });
        });
        var target = optionsTarget.concat(selectArray);
        this.setState((_setState5 = {}, _defineProperty(_setState5, flag == 'left' ? 'optionsLeft' : 'optionsRight', target), _defineProperty(_setState5, flag == 'right' ? 'optionsLeft' : 'optionsRight', optionsSource), _defineProperty(_setState5, flag == 'right' ? 'selectArrayLeft' : 'selectArrayRight', []), _defineProperty(_setState5, flag === 'right' ? 'isBtnMovelDisableRight' : 'isBtnMoveDisableLeft', true), _defineProperty(_setState5, flag === 'right' ? 'isAllCheckedLeft' : 'isAllCheckedRight', false), _setState5), function () {
            return _this3.callbackOnChange(flag + "Move");
        });
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: this.className(), style: this.props.style },
            React.createElement(YYTransferList, { title: this.props.titleLeft,
                btnDownText: this.props.btnDownTextLeft,
                btnUpText: this.props.btnUpTextLeft,
                isBtnDownVisible: this.props.leftBtnDownVisible,
                isBtnUpVisible: this.props.leftBtnUpVisible,
                flag: 'left' //代表左边列
                , searchPlaceholder: '\u8BF7\u8F93\u5165\u67E5\u627E\u5185\u5BB9',
                options: this.state.optionsLeft,
                selectArray: this.state.selectArrayLeft,
                isAllChecked: this.state.isAllCheckedLeft,
                isAllDisabled: this.state.isAllDisabledLeft,
                onSelectAll: this.handleSelectAll,
                onCheck: this.handleCheck,
                onUpMove: this.handleUpMove,
                onDownMove: this.handleDownMove,
                isSearchDisabled: this.props.isSearchDisabled,
                isMultipleCheck: this.props.isMultipleCheckLeft,
                width: this.props.leftWidth }),
            React.createElement(
                'div',
                { className: 'yyui-transfer-btn' },
                React.createElement(YYTransferOperation, { key: 'right_btn',
                    flag: 'right' //代表移动方向
                    , text: this.props.btnRightText,
                    onHandleMove: this.onHandleMove,
                    disabled: this.props.isBtnMoveDisableRight ? this.props.isBtnMoveDisableRight : this.state.isBtnMovelDisableRight }),
                React.createElement(YYTransferOperation, { key: 'left_btn',
                    flag: 'left',
                    text: this.props.btnLeftText,
                    onHandleMove: this.onHandleMove,
                    disabled: this.props.isBtnMoveDisableLeft ? this.props.isBtnMoveDisableLeft : this.state.isBtnMoveDisableLeft })
            ),
            React.createElement(YYTransferList, { title: this.props.titleRight,
                btnDownText: this.props.btnDownTextRight,
                btnUpText: this.props.btnUpTextRight,
                isBtnDownVisible: this.props.rightBtnDownVisible,
                isBtnUpVisible: this.props.rightBtnUpVisible,
                flag: 'right',
                searchPlaceholder: '\u8BF7\u8F93\u5165\u67E5\u627E\u5185\u5BB9',
                options: this.state.optionsRight,
                selectArray: this.state.selectArrayRight,
                isAllChecked: this.state.isAllCheckedRight,
                isAllDisabled: this.state.isAllDisabledRight,
                onSelectAll: this.handleSelectAll,
                onCheck: this.handleCheck,
                onUpMove: this.handleUpMove,
                onDownMove: this.handleDownMove,
                isSearchDisabled: this.props.isSearchDisabled,
                isMultipleCheck: this.props.isMultipleCheckRight,
                width: this.props.rightWidth })
        );
    }
});
module.exports = YYTransfer;