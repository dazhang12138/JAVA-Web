'use strict';

/**
 * Created by wuhao on 16/7/18.
 */

var React = require('react');
var YYClass = require('../base/YYClass');
var YYTransferSearch = require('./YYTransferSearch');
var YYButton = require('../button/YYButton');
var YYCheckbox = require('../formcontrols/checkbox/YYCheckbox');
var _ = require('lodash');
require('./style/index.less');

var noop = function noop() {};

var YYTransferList;
YYTransferList = YYClass.create({
    getDefaultProps: function getDefaultProps() {
        return {
            title: '',
            btnUpText: '上移',
            btnDownText: '下移',
            isBtnUpVisible: true, // 『上移』按钮是否显示
            isBtnDownVisible: true, // 『下移』按钮是否显示
            searchPlaceholder: '', // 搜索框placeholder
            selectArray: [], // 选择的项
            options: [], // 列表项
            isMutipleCheck: false, // 是否启用多选
            isAllChecked: false, // 是否全选
            isAllDisabled: false, // 是否全部禁用
            isSearchDisabled: true, // 是否禁用搜索
            width: null
        };
    },
    getInitialState: function getInitialState() {
        return {
            findIndex: -1, //当前查找项的值
            optionsSearch: [], // 筛选后列表
            highlight: {}, // 查找高亮样式
            searchText: '', // 搜索框内容
            onSelectAll: noop, // 全选
            onCheck: noop,
            onDownMove: noop, // 下移
            onUpMove: noop, // 移动
            onClear: noop
        };
    },
    handleSelectAll: function handleSelectAll(e) {
        if (_.isFunction(this.props.onSelectAll)) {
            this.props.onSelectAll(e, this.props.flag);
        }
    },
    handleCheck: function handleCheck(checkedOption, index, e) {
        if (_.isFunction(this.props.onCheck)) {
            this.props.onCheck(checkedOption, this.props.flag, index, e);
        }
    },
    handleDownMove: function handleDownMove() {
        if (_.isFunction(this.props.onDownMove)) {
            this.props.onDownMove(this.props.flag);
        }
    },
    handleUpMove: function handleUpMove() {
        if (_.isFunction(this.props.onUpMove)) {
            this.props.onUpMove(this.props.flag);
        }
    },
    matchFilter: function matchFilter(text, filterText) {
        var regex = new RegExp(filterText);
        return !!text.label.match(regex);
    },
    handleOnInputChange: function handleOnInputChange(e) {
        var filter = e.target.value;
        if (_.isEmpty(filter)) {
            this.handleClear(e);
        } else {
            var self = this;
            var optionsSearch = this.props.options.filter(function (optionSearch) {
                return self.matchFilter(optionSearch, filter);
            });
            this.setState({ optionsSearch: optionsSearch, searchText: e.target.value });
        }
    },
    handleFindNext: function handleFindNext() {
        // console.log('筛选index', this.state.findIndex);
        // 第一个
        if (this.state.findIndex == -1) {
            this.setState({ findIndex: 0 });
        } else if (this.state.optionsSearch.length - 1 > this.state.findIndex) {
            var findIndex = this.state.findIndex;
            this.setState({ findIndex: findIndex + 1 });
        }
    },
    handleClear: function handleClear(e) {
        this.setState({ optionsSearch: [], searchText: '', findIndex: -1 });
    },
    handleFindPrevious: function handleFindPrevious() {
        // console.log('筛选', this.state.optionsSearch);
        // 第一个
        if (this.state.findIndex == -1) {
            this.setState({ findIndex: this.state.optionsSearch.length - 1 });
        } else if (this.state.findIndex > 0) {
            var findIndex = this.state.findIndex;
            this.setState({ findIndex: findIndex - 1 });
        }
    },
    renderListHeader: function renderListHeader() {
        var _props = this.props,
            isMultipleCheck = _props.isMultipleCheck,
            isAllChecked = _props.isAllChecked,
            isAllDisabled = _props.isAllDisabled,
            selectArray = _props.selectArray,
            options = _props.options,
            title = _props.title;

        var len = selectArray.length;
        var count = options.length;
        //全选
        return React.createElement(
            'div',
            { className: 'yyui-transfer-list-header' },
            isMultipleCheck ? React.createElement(YYCheckbox, { onChange: this.handleSelectAll,
                checked: isAllChecked,
                disabled: isAllDisabled }) : null,
            React.createElement(
                'span',
                { className: 'yyui-transfer-list-header-clauses' },
                (isMultipleCheck ? len + "/" + count : "共" + count) + "条"
            ),
            React.createElement(
                'span',
                { className: 'yyui-transfer-list-header-label' },
                title
            )
        );
    },
    renderListFooter: function renderListFooter() {
        var _props2 = this.props,
            isBtnUpVisible = _props2.isBtnUpVisible,
            isBtnDownVisible = _props2.isBtnDownVisible,
            btnDownText = _props2.btnDownText,
            btnUpText = _props2.btnUpText;

        if (isBtnUpVisible || isBtnDownVisible) {
            return React.createElement(
                'div',
                { className: 'yyui-transfer-list-footer' },
                React.createElement(
                    YYButton,
                    { type: 'primary', size: 'small', onClick: this.handleDownMove, visible: isBtnDownVisible },
                    btnDownText
                ),
                React.createElement(
                    YYButton,
                    { type: 'primary', size: 'small', onClick: this.handleUpMove, visible: isBtnUpVisible },
                    btnUpText
                )
            );
        } else {
            return null;
        }
    },
    renderListContent: function renderListContent() {
        var _props3 = this.props,
            options = _props3.options,
            selectArray = _props3.selectArray,
            isMultipleCheck = _props3.isMultipleCheck;
        //列表内容

        var listContent = [];
        // 查找高亮
        var self = this;
        var optionSeachCurrent;
        if (options && options.length > 0) {
            options.map(function (option, index) {
                var isMatched = false; //搜索匹配
                if (!_.isEmpty(self.state.optionsSearch) && self.state.findIndex != -1) {
                    optionSeachCurrent = self.state.optionsSearch[self.state.findIndex];
                    if (optionSeachCurrent && optionSeachCurrent.value == option.value) {
                        isMatched = true;
                    }
                }
                if (isMultipleCheck) {
                    listContent.push(React.createElement(
                        YYCheckbox,
                        {
                            className: "yyui-transfer-list-item" + (isMatched ? ' match' : ''),
                            onChange: self.handleCheck.bind(this, option, index),
                            checked: selectArray.some(function (key) {
                                return key.value === option.value;
                            }) },
                        option == undefined ? '' : option.label
                    ));
                } else {
                    var isSelected = false; //选中激活
                    var selectItem = selectArray.length == 1 ? selectArray[0] : {};
                    if (selectItem.value == option.value) isSelected = true;
                    listContent.push(React.createElement(
                        'div',
                        { className: "yyui-transfer-list-item" + (isSelected ? ' selected' : '') + (isMatched ? ' match' : ''), title: option == undefined ? '' : option.label,
                            onClick: self.handleCheck.bind(this, option) },
                        option == undefined ? '' : option.label
                    ));
                }
            });
        }
        return React.createElement(
            'div',
            { className: 'yyui-transfer-list-content' },
            listContent
        );
    },
    render: function render() {
        var cls = 'yyui-transfer-list' + (this.props.className ? this.props.className : '');
        var style = {};
        if (this.props.width) {
            style = _.assign({}, style, { width: this.props.width });
        }
        return React.createElement(
            'div',
            { className: cls, style: style },
            this.renderListHeader(),
            !this.props.isSearchDisabled ? React.createElement(YYTransferSearch, { value: this.state.searchText,
                searchPlaceholder: this.props.searchPlaceholder,
                handleOnInputChange: this.handleOnInputChange,
                handleClear: this.handleClear,
                handleFindPrevious: this.handleFindPrevious,
                handleFindNext: this.handleFindNext }) : null,
            this.renderListContent(),
            this.renderListFooter()
        );
    }
});

module.exports = YYTransferList;