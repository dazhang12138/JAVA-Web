'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * Created by xg on 2017/11/23.
 *
 * 对YYCreatePage进行封装,满足单据模板按组织分配的需求
 */
var React = require('react');
var assign = require('lodash/assign');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass,
    YYMessage = _require.YYMessage;

var PropTypes = YYClass.PropTypes;
var field = YYClass.field;

var _require2 = require('yylib-business'),
    YYCreatePage = _require2.YYCreatePage;

var AuthToken = require("yylib-utils/AuthToken");
var DataUtil = require('yylib-utils/DataUtil');
var ListEventHandler = require('../handler/ListEventHandler');
var CardEventHandler = require('../handler/CardEventHandler');
var SupportUtils = require('../utils/SupportUtils');
var PubConstants = require('../resource/PubConstants');

//定义META
var uiMeta = {
    name: 'CPCreatePage',
    fields: [,
    //field参数列表：字段属性名|属性默认值|属性类型|是否必填|属性描述
    field('appCode', '', PropTypes.string, true, '托底应用编号'), field('pageCode', '', PropTypes.string, true, '托底页面编号'), field('uiParser', null, PropTypes.object, false, 'UI组件解析器'), field('uiEvent', null, PropTypes.object, false, 'UI事件处理器'), field('billType', '', PropTypes.string, true, '单据类型编码'), field('orgId', '', PropTypes.string, false, '组织ID'), field('uiType', '', PropTypes.string, true, '页面类型:列表(list) | 卡片(card)')]
};

var CPCreatePage = YYClass.create({
    uiMeta: uiMeta,

    getInitialState: function getInitialState() {
        return {
            appCode: null,
            pageCode: null,
            uiParser: this.props.uiParser,
            uiEvent: this.props.uiEvent,
            billType: this.props.billType,
            orgId: this.props.orgId,
            uiType: this.props.uiType
        };
    },

    componentDidMount: function componentDidMount() {
        this._getTemplate();
    },

    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        if ('uiParser' in nextProps) {
            this.setState({
                uiParser: nextProps.uiParser
            });
        }
        if ('uiEvent' in nextProps) {
            this.setState({
                uiEvent: nextProps.uiEvent
            });
        }
        if ('appCode' in nextProps && 'pageCode' in nextProps) {
            if (this.props.appCode !== nextProps.appCode || this.props.pageCode !== nextProps.pageCode) {
                this.setState({ appCode: nextProps.appCode, pageCode: nextProps.pageCode });
            }
        }
        if ('uiType' in nextProps || 'orgId' in nextProps || 'billType' in nextProps) {
            if (this.props.uiType !== nextProps.uiType || this.props.orgId !== nextProps.orgId || this.props.billType !== nextProps.billType) {
                this.setState({
                    uiType: nextProps.uiType,
                    orgId: nextProps.orgId,
                    billType: nextProps.billType
                }, this._getTemplate());
            }
        }
    },


    /**
     * 查询单据模板
     * @private
     */
    _getTemplate: function _getTemplate() {
        var billType = this.state.billType;
        var orgId = this.state.orgId;
        var uiType = this.state.uiType;
        if (!billType || !uiType) {
            return;
        }
        if (!orgId) {
            orgId = AuthToken.getOrgaId();
        }
        if (!this._checkUIType(uiType)) {
            YYMessage.error("查询页面模板失败: 未知的uiType");
            return;
        }
        var options = {
            orgId: orgId,
            billType: billType,
            uiType: uiType
        };
        // 从缓存读取
        var cachedPageInfo = DataUtil.localRead(billType + "_" + uiType + "_" + orgId);
        if (cachedPageInfo) {
            cachedPageInfo = JSON.parse(cachedPageInfo);
            if (cachedPageInfo.appCode && cachedPageInfo.pageCode) {
                this.setState({
                    appCode: cachedPageInfo.appCode,
                    pageCode: cachedPageInfo.pageCode
                });
                return;
            }
        }
        var _this = this;
        SupportUtils.getBillTemplate(options, function (result) {
            if (result.success && result.backData && result.backData.length > 0) {
                _this.setState({
                    appCode: result.backData[0].appCode,
                    pageCode: result.backData[0].pageCode
                }, function () {
                    // 写入缓存
                    DataUtil.localSave(billType + "_" + uiType + "_" + orgId, {
                        appCode: _this.state.appCode,
                        pageCode: _this.state.pageCode
                    });
                });
            } else {
                if (_this.props.appCode && _this.props.pageCode) {
                    _this.setState({
                        appCode: _this.props.appCode,
                        pageCode: _this.props.pageCode
                    });
                } else {
                    YYMessage.error("初始化页面失败: 无法查找到页面模板!", PubConstants.MSG_TIME_OUT);
                }
            }
        }, function (state) {
            if (_this.props.appCode && _this.props.pageCode) {
                _this.setState({
                    appCode: _this.props.appCode,
                    pageCode: _this.props.pageCode
                });
            } else {
                YYMessage.error("查询页面模板失败:" + state.statusCode, PubConstants.MSG_TIME_OUT);
            }
        });
    },

    /**
     * 检查uiType是否规范
     * @param uiType
     * @returns {boolean}
     * @private
     */
    _checkUIType: function _checkUIType(uiType) {
        return uiType === PubConstants.UI_TYPE.LIST || uiType === PubConstants.UI_TYPE.CARD;
    },

    render: function render() {
        var _state = this.state,
            appCode = _state.appCode,
            pageCode = _state.pageCode;

        if (!appCode || !pageCode) {
            return null;
        }
        console.log("[CPCreatePage]当前加载页面", { appCode: appCode, pageCode: pageCode });
        var uiType = this.state.uiType;
        if (this._checkUIType(uiType)) {
            var uiEvent, uiParser;
            if (uiType === PubConstants.UI_TYPE.LIST) {
                uiEvent = assign({}, ListEventHandler.API, this.state.uiEvent);
                uiParser = assign({}, ListEventHandler.uiParser, this.state.uiParser);
            } else if (uiType === PubConstants.UI_TYPE.CARD) {
                uiEvent = assign({}, CardEventHandler.API, this.state.uiEvent);
                uiParser = assign({}, this.state.uiParser);
            }
            return React.createElement(YYCreatePage, _extends({}, this.props, { appCode: appCode, pageCode: pageCode,
                uiEvent: uiEvent, uiParser: uiParser }));
        }
        return null;
    }
});
module.exports = CPCreatePage;