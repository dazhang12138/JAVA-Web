'use strict';

/**
 * Created by xg on 2017/6/12.
 *
 * 建造模板单据-打印预览页面
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYClass = _require.YYClass;

var _require2 = require('../resource/BaseHost'),
    PRINT_PREVIEW_URL = _require2.PRINT_PREVIEW_URL;

var printData = {};

var PrintPreview = YYClass.create({

    getDefaultProps: function getDefaultProps() {
        return {
            tenantId: "yyjzcloud" // 默认的租户ID
        };
    },

    componentWillMount: function componentWillMount() {
        console.log("print frame start listen");
        if (window.addEventListener) {
            // all browsers except IE before version 9
            window.addEventListener('message', this.refMsg, false);
        } else if (window.attachEvent) {
            // IE before version 9
            window.attachEvent("onmessage", this.refMsg);
        } else {
            console.error("current browser could not support window.addEventListener or window.attachEvent");
        }
    },

    componentDidMount: function componentDidMount() {
        printData = window.printData;
        var templateCode = window.templateCode;
        var title = window.title;
        if (title) {
            window.document.title = title;
        }
        if (printData && templateCode) {
            var tenantId = this.props.tenantId;
            document.getElementById("previewFrame").src = PRINT_PREVIEW_URL + "?tenantId=" + tenantId + "&printcode=" + templateCode + "&datakey=myData";
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        if (window.addEventListener) {
            // all browsers except IE before version 9
            window.removeEventListener('message', this.refMsg, false);
        } else if (window.attachEvent) {
            // IE before version 9
            window.detachEvent("onmessage", this.refMsg);
        }
    },

    refMsg: function refMsg(ev) {
        var dataReceive = ev.data;
        if (dataReceive) {
            console.log("printData", printData);
            //发送请求数据
            var jsonObj = JSON.parse(dataReceive);
            if (jsonObj.type === "ok") {
                var msg = {};
                msg.type = "send";
                msg.data = printData;
                var str = JSON.stringify(msg);
                window.frames[0].postMessage(str, '*');
            }
        }
    },

    render: function render() {
        var height = document.body.offsetHeight - 20;
        return React.createElement('iframe', { id: 'previewFrame', style: { width: "100%", height: height }, src: '' });
    }
});

module.exports = PrintPreview;