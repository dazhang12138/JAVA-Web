'use strict';

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Created by xg on 2017/3/23.
 *
 * 建造单据模板列表默认事件处理Handler
 */
var React = require('react');
var _ = require('lodash');
var assign = require('lodash/assign');
var ajax = require('yylib-utils/ajax');

var _require = require('yylib-ui'),
    YYMessage = _require.YYMessage,
    YYModal = _require.YYModal,
    YYIcon = _require.YYIcon,
    YYDropdown = _require.YYDropdown,
    YYMenu = _require.YYMenu,
    YYMenuItem = _require.YYMenuItem,
    YYColumnConfig = _require.YYColumnConfig,
    YYClass = _require.YYClass;

var _require2 = require('yylib-business'),
    YYViewApprove = _require2.YYViewApprove,
    AttachMgrModal = _require2.AttachMgrModal;

var ExportExcelModal = require('../export/ExportExcelModal');
var AuthToken = require("yylib-utils/AuthToken");
var DataUtil = require('yylib-utils/DataUtil');
var PubConstants = require('../resource/PubConstants');
var BaseHost = require('../resource/BaseHost');
var SupportUtils = require('../utils/SupportUtils');
var DateFormatUtils = require('../utils/DateFormatUtils');
var AssignUtils = require('../utils/AssignUtils');

var _require3 = require('yylib-business/widgets'),
    FormItemType = _require3.FormItemType;

var ListEventHandler = {};

/**
 * 列表界面初始化
 * @param page
 * @param urls 列表页面操作的urls
 * @param autoRenderOperate 是否自动渲染行操作按钮(默认true)
 */
ListEventHandler.init = function (page, urls, autoRenderOperate) {
    if (!urls) {
        console.error("初始化列表界面失败:urls未定义");
        return;
    }
    this.urls = urls;
    var table = this.getDataTable(page);
    if (table) {
        table.deleteUrl = urls.DELETE;
        table.queryUrl = urls.QUERY_LIST;
        table.autoQuery = false; // 不自动查询数据
    }
    // 初始化按钮
    this.initButtons(page);
    // 初始化精度
    this.initPrecisionConfig(page);
    // 渲染审批流状态
    this.renderBillState(page);
    if (autoRenderOperate != false) {
        // 渲染行操作按钮组
        this.renderOperate(page);
    }
    page.refresh();
};

/**
 * 初始化工具栏按钮和行操作按钮
 * @param page
 */
ListEventHandler.initButtons = function (page) {
    var listPlugin = this.getListPlugin(page);
    var toolBar = this.getToolBar(page);
    if (!listPlugin || !toolBar) {
        return;
    }
    var buttons = toolBar.children || []; // 所有按钮
    var exportBtn, attachBtn, approveBtn;
    buttons.map(function (button) {
        switch (button.uikey) {
            case PubConstants.LIST_BUTTON_EXPORT:
                exportBtn = button;
                break;
            case PubConstants.LINE_BTN_ATTACH:
                attachBtn = button;
                break;
            case PubConstants.LINE_VIEW_APPROVE:
                approveBtn = button;
                break;
            default:
                break;
        }
    });
    var button;
    // 导出按钮
    if (listPlugin['' + PubConstants.PLUGIN_EXPORT_EXCEL] != false) {
        // 启用
        if (exportBtn) {
            exportBtn.visible = true;
        } else {
            button = this.newButton({
                key: PubConstants.LIST_BUTTON_EXPORT,
                title: "导出",
                type: "success",
                icon: "download"
            });
            buttons.push(button);
        }
    } else {
        // 不启用
        if (exportBtn) {
            exportBtn.visible = false;
        }
    }
    // 附件管理
    if (listPlugin['' + PubConstants.PLUGIN_ATTACH_MGR] != false) {
        if (!attachBtn) {
            button = this.newButton({
                key: PubConstants.LINE_BTN_ATTACH,
                title: "附件管理",
                icon: "file-text",
                lineBtn: true
            });
            buttons.push(button);
        }
    } else {
        if (attachBtn) {
            buttons = buttons.filter(function (button) {
                return button.uikey !== attachBtn.uikey;
            });
            toolBar.children = buttons;
        }
    }
    // 查看审批流
    if (listPlugin['' + PubConstants.PLUGIN_VIEW_APPROVE] != false) {
        if (!approveBtn) {
            button = this.newButton({
                key: PubConstants.LINE_VIEW_APPROVE,
                title: "查看审批流",
                icon: "eye",
                lineBtn: true
            });
            buttons.push(button);
        }
    } else {
        if (approveBtn) {
            buttons = buttons.filter(function (button) {
                return button.uikey !== approveBtn.uikey;
            });
            toolBar.children = buttons;
        }
    }
};

/**
 * 列表数据初始化
 * @param page
 * @param options
 *          onMetaSearchParam 查询参数回调(可以动态调整查询参数)
 *          noSchemeCallBack 未定义默认查询方案时的回调
 */
ListEventHandler.initData = function (page, options) {
    var _this = this;
    var table = this.getDataTable(page);
    var scheme = this.getQueryScheme(page);
    var searchBar = this.getSearchBar(page);
    var schemeGroup = this.getSchemeGroup(page);
    if (searchBar && scheme) {
        searchBar.activeTpl = scheme;
    }
    if (schemeGroup && scheme) {
        schemeGroup.activeTplId = scheme.tplId;
    }
    var billType = searchBar && searchBar.billType ? searchBar.billType : this.getBillType(page);
    if (table && table.api && scheme && scheme.billType === billType) {
        table.api.queryData();
        return;
    }
    var params = {};

    var _ref = options || {},
        onMetaSearchParam = _ref.onMetaSearchParam,
        noSchemeCallBack = _ref.noSchemeCallBack;

    params.billType = billType;
    params.userId = AuthToken.getUserId();
    params.orgId = AuthToken.getOrgaId();
    params.roleId = AuthToken.getCurrentRoleId();
    SupportUtils.getDefaultSearchTemplate(params, function (result) {
        if (result.success) {
            var template = result.backData;
            if (!template || _.isEmpty(template)) {
                console.warn("当前单据未配置默认搜索方案");
                if (noSchemeCallBack && _.isFunction(noSchemeCallBack)) {
                    noSchemeCallBack();
                }
            } else {
                _this.queryByScheme(page, { template: template, onMetaSearchParam: onMetaSearchParam });
            }
        } else {
            console.error(result.backMsg);
        }
    });
};

/**
 * 初始化精度参数设置
 * @param page
 */
ListEventHandler.initPrecisionConfig = function (page) {
    var data = this.getPrecisionConfig(page);
    setDecimal(page, data);
};

/**
 * 获取精度参数设置
 * @param page
 * @param type "weight"(重量), "money"(金额) "num"(数量) 精度类型(非必须,不传会返回所有精度参数)
 */
ListEventHandler.getPrecisionConfig = function (page, type) {
    window.EnvConfig = window.EnvConfig || {};
    var moduleCode = window.EnvConfig.MODULE_CODE;
    var orgId = AuthToken.getOrgaId();
    if (!moduleCode || !orgId) {
        return {};
    }
    var cachedData = DataUtil.localRead(moduleCode + '_' + orgId + PubConstants.PRECISION_SUFFIX);
    var retData;
    if (cachedData) {
        if (!(cachedData instanceof Object)) {
            cachedData = JSON.parse(cachedData);
        }
        switch (type) {
            case PubConstants.PRECISION_CONFIG.WEIGHT.TYPE:
                retData = cachedData['' + PubConstants.PRECISION_CONFIG.WEIGHT.PROPERTY];
                retData = retData ? parseInt(retData) : undefined;
                break;
            case PubConstants.PRECISION_CONFIG.MONEY.TYPE:
                retData = cachedData['' + PubConstants.PRECISION_CONFIG.MONEY.PROPERTY];
                retData = retData ? parseInt(retData) : undefined;
                break;
            case PubConstants.PRECISION_CONFIG.NUM.TYPE:
                retData = cachedData['' + PubConstants.PRECISION_CONFIG.NUM.PROPERTY];
                retData = retData ? parseInt(retData) : undefined;
                break;
            default:
                retData = cachedData;
                break;
        }
    }
    return retData;
};

/**
 * 设置精度
 * @param page
 * @param precisionConfig 精度参数
 */
function setDecimal(page, precisionConfig) {
    if (!precisionConfig) return;
    if (!(precisionConfig instanceof Object)) {
        precisionConfig = JSON.parse(precisionConfig);
    }
    var table = ListEventHandler.getDataTable(page);
    if (table && _.isArray(table.children)) {
        _.filter(table.children, function (child) {
            return child.fieldtype === PubConstants.PRECISION_ITEM_TYPE && child.isShow != false;
        }).forEach(function (column) {
            var configValue = undefined;
            switch (column.precisionConfig) {
                case PubConstants.PRECISION_CONFIG.NONE.VALUE:
                    break;
                case PubConstants.PRECISION_CONFIG.WEIGHT.VALUE:
                    configValue = precisionConfig['' + PubConstants.PRECISION_CONFIG.WEIGHT.PROPERTY];
                    break;
                case PubConstants.PRECISION_CONFIG.MONEY.VALUE:
                    configValue = precisionConfig['' + PubConstants.PRECISION_CONFIG.MONEY.PROPERTY];
                    break;
                case PubConstants.PRECISION_CONFIG.NUM.VALUE:
                    configValue = precisionConfig['' + PubConstants.PRECISION_CONFIG.NUM.PROPERTY];
                    break;
                default:
                    break;
            }
            if (configValue) {
                column.decimal = parseInt(configValue);
            }
        });
        page.refresh();
    }
}

/**
 * 设置列表页面加载中状态
 * @param page
 */
ListEventHandler.pageLoading = function (page) {
    var listPage = page.findUI(this.getListPageKey(page));
    if (listPage) {
        listPage.loading = true;
        page.refresh();
    }
};

/**
 * 取消列表页面加载中状态
 * @param page
 */
ListEventHandler.pageLoaded = function (page) {
    var listPage = page.findUI(this.getListPageKey(page));
    if (listPage) {
        setTimeout(function () {
            listPage.loading = false;
            page.refresh();
        }, PubConstants.LOADING_TIME_OUT);
    }
};

/**
 * 列表界面默认uiEvent
 */
ListEventHandler.API = {

    // 返回按钮
    "goBackBtn": {
        onClick: function onClick() {
            ListEventHandler.goBack(this);
        }
    },

    // 面包屑
    "breadcrumb": {
        onViewWillMount: function onViewWillMount(options) {
            if (options.item && _.isArray(options.item.children) && options.item.children.length > 0) {
                var homeItem = options.item.children[0];
                if (ListEventHandler.isLocalEnv()) {
                    // 本地环境
                    if (window.location.origin && window.location.pathname) {
                        homeItem.href = window.location.origin + window.location.pathname;
                    } else {
                        homeItem.href = window.location.href;
                    }
                } else {
                    // 线上环境
                    homeItem.href = BaseHost.URL_HOME_PORTAL;
                }
            }
        }
    },

    // 新增按钮
    "addBtn": {
        onClick: function onClick() {
            this.routeTo(ListEventHandler.urls.CARD_ROUTE);
        }
    },

    // 搜索方案
    "schemeGroup": {
        onViewWillMount: function onViewWillMount(options) {
            //自动配置单据类型
            if (options.item && options.uiMeta) {
                if (!options.item[PubConstants.BILL_TYPE_FIELD]) {
                    options.item[PubConstants.BILL_TYPE_FIELD] = options.uiMeta[PubConstants.BILL_TYPE_FIELD];
                    options.item[PubConstants.BILL_TYPE_NAME_FIELD] = options.uiMeta[PubConstants.BILL_TYPE_NAME_FIELD];
                }
            }
        },

        /**
         * 搜索方案切换事件
         * @param queryScheme 当前搜索方案
         * @param isActive 选中状态(true | false)
         */
        onSchemeClick: function onSchemeClick(queryScheme, isActive) {
            ListEventHandler.onSchemeClick(this, { queryScheme: queryScheme, isActive: isActive });
        }
    },

    // 搜索框
    "searchBar": {
        onViewDidMount: function onViewDidMount(options) {
            // 自动配置单据类型
            if (options.item && options.uiMeta) {
                if (!options.item[PubConstants.BILL_TYPE_FIELD]) {
                    options.item[PubConstants.BILL_TYPE_FIELD] = options.uiMeta[PubConstants.BILL_TYPE_FIELD];
                    options.item[PubConstants.BILL_TYPE_NAME_FIELD] = options.uiMeta[PubConstants.BILL_TYPE_NAME_FIELD];
                }
            }
        },

        /**
         * 搜索参数回调,可以在此回调方法中调整搜索参数
         * @param condition
         */
        onMetaSearchParam: function onMetaSearchParam(condition) {
            return condition;
        },

        /**
         * 搜索方案发生变化(增,删,改)时回调函数(更新搜索方案栏中的数据)
         * @param tplList 最新搜索方案集合
         */
        onSchemeChange: function onSchemeChange(tplList) {
            ListEventHandler.onSchemeChange(this, tplList);
        },

        /**
         * 执行搜索
         * @param queryScheme
         */
        onMetaSearch: function onMetaSearch(queryScheme) {
            ListEventHandler.onMetaSearch(this, queryScheme);
        }
    },

    // 删除按钮
    "delBtn": {
        onClick: function onClick() {
            ListEventHandler.delete(this);
        }
    },

    // 导出按钮
    "exportBtn": {
        onClick: function onClick() {
            ListEventHandler.export(this);
        }
    },

    // 打印按钮
    "printBtn": {
        onClick: function onClick() {
            ListEventHandler.print(this);
        }
    },

    // 数据表格
    "CPListTable": {
        /**
         * 删除列表数据时的回调
         * @param params
         */
        onDeleteParam: function onDeleteParam(params) {
            return ListEventHandler.onDeleteParam(this);
        },
        /**
         * 查询列表数据时的回调
         * @param params
         * @returns {*}
         */
        onQueryParam: function onQueryParam(params) {
            return ListEventHandler.onQueryParam(this, params);
        },
        /**
         * 查询成功后的回调函数
         * @param result
         */
        onQuerySuccess: function onQuerySuccess(result) {
            ListEventHandler.onQuerySuccess(this, result);
        }
    }
};

/**
 * 默认的uiParser
 * @type {{listAttachMgr: *, listViewApprove: *}}
 */
ListEventHandler.uiParser = {

    /*TODO 兼容老的模式,替换完后删除*/
    listAttachMgr: React.createClass({
        displayName: 'listAttachMgr',

        render: function render() {
            var _React$createElement;

            var comp = null;

            var _ref2 = this.props || {},
                attachMgr = _ref2.attachMgr,
                viewApprove = _ref2.viewApprove,
                exportExcel = _ref2.exportExcel,
                columnConfig = _ref2.columnConfig;

            switch (this.props.type) {
                case PubConstants.PLUGIN_ATTACH_MGR:
                    comp = attachMgr != false ? React.createElement(AttachMgrModal, (_React$createElement = { visible: this.props.visible,
                        serverUrl: BaseHost.ATTACH_SERVER_URL,
                        sourceId: this.props.sourceId,
                        billType: this.props.billType
                    }, _defineProperty(_React$createElement, 'visible', this.props.visible), _defineProperty(_React$createElement, 'showDelBtn', this.props.showDelBtn), _defineProperty(_React$createElement, 'showUploadBtn', this.props.showUploadBtn), _defineProperty(_React$createElement, 'onCancel', this.props.onCancel), _React$createElement)) : null;
                    break;
                case PubConstants.PLUGIN_VIEW_APPROVE:
                    comp = viewApprove != false && this.props.showViewApprove ? React.createElement(YYViewApprove, { showViewApprove: this.props.showViewApprove,
                        billId: this.props.billId,
                        userId: AuthToken.getUserId(),
                        serUrl: BaseHost.BPM_SERVER_URL,
                        closeMethod: this.props.onClose }) : null;
                    break;
                case PubConstants.PLUGIN_EXPORT_EXCEL:
                    comp = exportExcel != false ? React.createElement(ExportExcelModal, { visible: this.props.visible,
                        onExport: this.props.onExport,
                        onCancel: this.props.onCancel }) : null;
                    break;
                default:
                    break;
            }
            return comp;
        }
    }),

    CPPluginMgr: React.createClass({
        displayName: 'CPPluginMgr',

        render: function render() {
            var _React$createElement2;

            var comp = null;

            var _ref3 = this.props || {},
                attachMgr = _ref3.attachMgr,
                viewApprove = _ref3.viewApprove,
                exportExcel = _ref3.exportExcel,
                columnConfig = _ref3.columnConfig;

            switch (this.props.type) {
                case PubConstants.PLUGIN_ATTACH_MGR:
                    comp = attachMgr != false ? React.createElement(AttachMgrModal, (_React$createElement2 = { visible: this.props.visible,
                        serverUrl: BaseHost.ATTACH_SERVER_URL,
                        sourceId: this.props.sourceId,
                        billType: this.props.billType
                    }, _defineProperty(_React$createElement2, 'visible', this.props.visible), _defineProperty(_React$createElement2, 'showDelBtn', this.props.showDelBtn), _defineProperty(_React$createElement2, 'showUploadBtn', this.props.showUploadBtn), _defineProperty(_React$createElement2, 'onCancel', this.props.onCancel), _React$createElement2)) : null;
                    break;
                case PubConstants.PLUGIN_VIEW_APPROVE:
                    comp = viewApprove != false && this.props.showViewApprove ? React.createElement(YYViewApprove, { showViewApprove: this.props.showViewApprove,
                        billId: this.props.billId,
                        userId: AuthToken.getUserId(),
                        serUrl: BaseHost.BPM_SERVER_URL,
                        closeMethod: this.props.onClose }) : null;
                    break;
                case PubConstants.PLUGIN_EXPORT_EXCEL:
                    comp = exportExcel != false ? React.createElement(ExportExcelModal, { visible: this.props.visible,
                        onExport: this.props.onExport,
                        onCancel: this.props.onCancel }) : null;
                    break;
                default:
                    break;
            }
            return comp;
        }
    })
};

/**
 * 列表界面返回按钮点击事件处理
 * @param page
 */
ListEventHandler.goBack = function (page) {
    this.queryScheme = null; // 清空缓存的查询方案
    if (this.isLocalEnv()) {
        page.routeTo('');
    } else {
        top.location.href = BaseHost.URL_HOME_PORTAL;
    }
};

/**
 * 判断当前运行环境是否本地环境
 */
ListEventHandler.isLocalEnv = function () {
    return !window.top.getAuthorityButtons || !_.isFunction(window.top.getAuthorityButtons);
};

/**
 * 对搜索方案的变更(增,删,改)会触发该回调,同步更新方案栏中的方案数据
 * @param page
 * @param tplList 最新的方案列表
 */
ListEventHandler.onSchemeChange = function (page, tplList) {
    var schemeGroup = this.getSchemeGroup(page);
    if (schemeGroup) {
        schemeGroup.templates = tplList;
        page.refresh();
    }
};

/**
 * 构造一个空内容的简单搜索项(需要动态增加搜索项时使用)
 * @param field 搜索项字段名
 * @param compare 比较符 {'eq':'等于' | 'ne':'不等于' | 'lt':'小于' | 'le':'小于等于' | 'gt':'大于' | 'ge':'大于等于'
 *                        | 'bw':'开始于' | 'in':'属于' | 'ni':'不属于' | 'cn':'包含' | 'bt':'介于'}
 * @param data 值
 * @returns {*}
 */
ListEventHandler.newSearchItem = function (field, compare, data) {
    var searchItem = {
        logic: 'and',
        left: false,
        field: field,
        inputtype: 'input',
        compare: compare ? compare : 'eq',
        data: data,
        right: false
    };
    return _.clone(searchItem);
};

/**
 * 构造一个简单的排序项
 * @param filed 排序字段名
 * @param sort  升序(asc) | 降序(desc)
 */
ListEventHandler.newSortItem = function (filed, sort) {
    var sortItem = {
        field: filed,
        sort: sort
    };
    return _.clone(sortItem);
};

/**
 * 构造一个按钮
 * @param options
 *          key 按钮键值(PropTypes.string)
 *          title 显示名称(PropTypes.string)
 *          icon 图标(PropTypes.string)
 *          type 风格(PropTypes.string)
 *          ghost 是否透明(PropTypes.bool)
 *          lineBtn 是否行操作按钮(PropTypes.bool)
 */
ListEventHandler.newButton = function (options) {
    var _ref4 = options || {},
        key = _ref4.key,
        title = _ref4.title,
        icon = _ref4.icon,
        type = _ref4.type,
        ghost = _ref4.ghost,
        lineBtn = _ref4.lineBtn;

    if (!key) {
        console.error("调用newButton失败:按钮键值[key]不能为空");
        return null;
    }
    lineBtn = lineBtn == undefined ? false : _.isBoolean(lineBtn) ? lineBtn : false;
    var button = {
        uikey: key,
        uitype: "YYButton",
        uititle: title ? title : key,
        children: title ? title : key,
        icon: icon ? icon : "info-circle-o",
        type: type ? type : "success",
        ghost: _.isBoolean(ghost) ? ghost : false,
        visible: true
    };
    if (lineBtn) {
        button.specialTag = { code: '' + PubConstants.LINE_BTN_IDENTIFY };
        button.visible = false;
    }
    return _.cloneDeep(button);
};

/**
 * 构造一个查询方案
 * @param page
 * @param condition 搜索条件集合(Array)
 * @param sort 排序条件集合(Array)
 */
ListEventHandler.newQueryScheme = function (page, condition, sort) {
    var scheme = {};
    if (!_.isArray(condition) || !_.isArray(sort)) {
        return scheme;
    }
    scheme.condition = condition;
    scheme.sort = sort;
    var searchBar = this.getSearchBar(page);
    if (searchBar) {
        var billType = searchBar.billType;
        if (!billType) {
            billType = this.getBillType(page);
        }
        scheme.billType = billType;
        scheme.entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
    }
    return _.cloneDeep(scheme);
};

/**
 * 根据搜索方案查询数据
 * @param page
 * @param options
 *          template 查询后台返回的搜索模板
 *          onMetaSearchParam 搜索参数回调,可以动态调整搜索参数
 */
ListEventHandler.queryByScheme = function (page, options) {
    var _ref5 = options || {},
        template = _ref5.template,
        onMetaSearchParam = _ref5.onMetaSearchParam;

    if (!template) {
        return;
    }
    if (template) {
        var tplId = template.id;
        var searchBar = this.getSearchBar(page);
        var schemeGroup = this.getSchemeGroup(page);
        if (schemeGroup) {
            schemeGroup.activeTplId = tplId;
        }
        var condition = JSON.parse(template.filter);
        if (onMetaSearchParam && _.isFunction(onMetaSearchParam)) {
            condition = onMetaSearchParam(condition);
        }
        var scheme = {};
        scheme.tplId = tplId;
        if (_.isArray(condition) && condition.length > 0) {
            scheme.condition = condition;
            scheme.sort = JSON.parse(template.sort);
            if (searchBar) {
                var billType = searchBar.billType;
                if (!billType) {
                    billType = this.getBillType(page);
                }
                scheme.billType = billType;
                scheme.entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
            }
            if (searchBar) {
                searchBar.activeTpl = scheme;
            }
            this.setQueryScheme(scheme);
            var table = this.getDataTable(page);
            if (table && table.api) {
                table.api.queryData();
            }
        } else {
            this.setQueryScheme(null);
        }
    } else {
        this.setQueryScheme(null);
    }
};

/**
 * 搜索栏执行搜索
 * @param page
 * @param queryScheme 搜索方案
 */
ListEventHandler.onMetaSearch = function (page, queryScheme) {
    if (!queryScheme || _.isEmpty(queryScheme)) {
        return;
    }
    var table = this.getDataTable(page);
    if (table) {
        if (table.pagination != false) {
            table.pagination = {
                current: 1,
                pageNumber: 0,
                pageSize: 10
            };
        }
        var _this = this;
        page.refresh(function () {
            var table = _this.getDataTable(page);
            var searchBar = _this.getSearchBar(page);
            if (searchBar) {
                var billType = searchBar.billType;
                if (!billType) {
                    billType = _this.getBillType(page);
                }
                queryScheme.tplId = searchBar.activeTpl ? searchBar.activeTpl.tplId : null;
                queryScheme.billType = billType;
                queryScheme.entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
            }
            _this.setQueryScheme(queryScheme);
            if (table && table.api) {
                table.api.queryData();
            }
        });
    }
};

/**
 * 搜索方案栏点击事件
 * @param page
 * @param options
 *          queryScheme 搜索方案
 *          isActive 搜索方案选中状态(true | false)
 *          inactiveCallBack 搜索方案未选中时回调
 *          onMetaSearchParam 搜索参数回调函数(可以动态调整搜索参数)
 */
ListEventHandler.onSchemeClick = function (page, options) {
    var table = this.getDataTable(page);
    if (!table) {
        return;
    }

    var _ref6 = options || {},
        queryScheme = _ref6.queryScheme,
        isActive = _ref6.isActive,
        inactiveCallBack = _ref6.inactiveCallBack,
        onMetaSearchParam = _ref6.onMetaSearchParam;

    var scheme = {};
    scheme.tplId = queryScheme.tplId;
    var condition = JSON.parse(queryScheme.filter);
    condition.map(function (cond) {
        delete cond.inputprops;
    });
    if (onMetaSearchParam && _.isFunction(onMetaSearchParam)) {
        condition = onMetaSearchParam(condition);
    }
    var searchBar = this.getSearchBar(page);
    if (_.isArray(condition) && condition.length > 0) {
        scheme.condition = condition;
        scheme.sort = JSON.parse(queryScheme.sort);
        if (searchBar) {
            var billType = searchBar.billType;
            if (!billType) {
                billType = this.getBillType(page);
            }
            scheme.billType = billType;
            scheme.entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
        }
    }
    if (isActive == false) {
        searchBar.activeTpl = null;
        if (inactiveCallBack && _.isFunction(inactiveCallBack)) {
            inactiveCallBack(scheme);
        } else {
            this.setQueryScheme(null);
            table.dataSource = [];
            page.refresh();
        }
    } else {
        var _this = this;
        if (table.pagination != false) {
            table.pagination = {
                current: 1,
                pageNumber: 0,
                pageSize: 10
            };
        }
        // 方案栏切换时,联动搜索组件,切换到当前方案
        if (searchBar) {
            searchBar.activeTpl = scheme;
        }
        page.refresh(function () {
            var table = _this.getDataTable(page);
            _this.setQueryScheme(scheme);
            if (table && table.api) {
                table.api.queryData();
            }
        });
    }
};

/**
 * 渲染行操作按钮
 * @param page
 * @param options
 *          renderBefore render前事件处理,可以自定义每行的操作按钮属性
 *          onColumnConfigClick 配置表格列点击事件回调
 *          width 宽度(默认100,可自定义)
 */
ListEventHandler.renderOperate = function (page, options) {
    var _ref7 = options || {},
        renderBefore = _ref7.renderBefore,
        onColumnConfigClick = _ref7.onColumnConfigClick,
        width = _ref7.width;

    var lineButtons = this.getAvailableLineButtons(page);
    if (!lineButtons || lineButtons.length === 0) {
        return;
    }
    var dataTable = this.getDataTable(page);
    if (!dataTable) {
        return;
    }
    var columns = dataTable.children;
    if (!columns || columns.length === 0) return;
    // 判断是否已经包含了操作列
    var operateCols = _.filter(columns, function (column) {
        return column.dataIndex === PubConstants.LIST_OPERATE_KEY;
    }) || [];
    if (operateCols && operateCols.length > 0) {
        return;
    }
    var operateCol = {};
    operateCol.uikey = PubConstants.LIST_OPERATE_KEY;
    operateCol.key = PubConstants.LIST_OPERATE_KEY;
    operateCol.dataIndex = PubConstants.LIST_OPERATE_KEY;
    operateCol.uitype = PubConstants.COMP_DATA_TABLE_COL;
    operateCol.titleAlign = "center";
    operateCol.align = "center";
    for (var index = columns.length - 1; index >= 0; index--) {
        if (columns[index].isShow != false) {
            operateCol.fixed = columns[index].fixed;
            break;
        }
    }
    operateCol.title = React.createElement(YYIcon, { type: 'setting', style: { padding: 0 } });
    operateCol.isShow = true;
    operateCol.width = width ? parseInt(width) : 100;
    operateCol.render = function (value, record, rowIndex) {
        var menuItems = [];
        var billState = record['' + PubConstants.BILL_STATE_FIELD] || PubConstants.BILL_STATE.FREE;
        // 每行的行操作按钮可能不同,先克隆, 保证每行的初始行操作按钮是一致的
        var currLineButtons = _.cloneDeep(lineButtons);
        if (renderBefore && _.isFunction(renderBefore)) {
            currLineButtons = renderBefore(currLineButtons, record);
        }
        _.forEach(currLineButtons, function (lineButton) {
            switch (lineButton.uikey) {
                case PubConstants.LINE_BTN_EDIT:
                    if (billState !== PubConstants.BILL_STATE.FREE) {
                        lineButton.uititle = "查看";
                        lineButton.icon = "eye-o";
                    }
                    break;
                case PubConstants.LINE_BTN_DEL:
                    lineButton.disabled = _.isBoolean(lineButton.disabled) ? lineButton.disabled : billState !== PubConstants.BILL_STATE.FREE;
                    break;
                default:
                    lineButton.disabled = _.isBoolean(lineButton.disabled) ? lineButton.disabled : false;
                    break;
            }
            menuItems.push(React.createElement(
                YYMenuItem,
                { key: "rowBtn_" + rowIndex + "_" + lineButton.uikey },
                React.createElement(
                    'a',
                    { disabled: lineButton.disabled,
                        onClick: onLineButtonClick.bind(this, { page: page, record: record, btnKey: lineButton.uikey }) },
                    React.createElement(YYIcon, { type: lineButton.icon }),
                    React.createElement(
                        'span',
                        { style: { marginLeft: 8 } },
                        lineButton.uititle
                    )
                )
            ));
        });
        var menus = React.createElement(
            YYMenu,
            null,
            menuItems
        );
        return React.createElement(
            YYDropdown,
            {
                overlay: menus },
            React.createElement(
                'span',
                { style: { color: "#1A94E6" } },
                '\u64CD\u4F5C'
            )
        );
    };
    columns.push(operateCol);
};

/**
 * 行操作按钮点击事件处理
 * @param options
 *          page
 *          record 行数据
 *          btnKey 行操作按钮键值
 */
function onLineButtonClick(options) {
    var _ref8 = options || {},
        page = _ref8.page,
        record = _ref8.record,
        btnKey = _ref8.btnKey;
    // 1.优先调用按钮onClick事件


    var button = page.findUI(btnKey);
    if (button && button.api && button.api.props && _.isFunction(button.api.props.onClick)) {
        button.api.props.onClick.call(this, record);
    } else {
        // 2.预置按钮的默认处理
        switch (btnKey) {
            case PubConstants.LINE_BTN_EDIT:
                ListEventHandler.editRow(page, record);
                break;
            case PubConstants.LINE_BTN_DEL:
                ListEventHandler.deleteRow(page, record);
                break;
            case PubConstants.LINE_BTN_ATTACH:
                ListEventHandler.showAttachModal(page, record);
                break;
            case PubConstants.LINE_VIEW_APPROVE:
                ListEventHandler.showViewApprove(page, record);
                break;
            default:
                console.error('' + button.uititle + "[" + ('' + button.uikey) + "]按钮未定义onClick事件");
                break;
        }
    }
}

/**
 * 显示附件管理
 * @param page
 * @param record
 */
ListEventHandler.showAttachModal = function (page, record) {
    var primaryField = this.getPrimaryField(page);
    var listPlugin = this.getListPlugin(page);
    if (!listPlugin) {
        console.warn("当前单据列表插件组件未定义");
        return;
    }
    if (listPlugin['' + PubConstants.PLUGIN_ATTACH_MGR] == false) {
        console.warn("当前单据未启用附件管理功能");
        return;
    }
    listPlugin.type = PubConstants.PLUGIN_ATTACH_MGR;
    var billState = record[PubConstants.BILL_STATE_FIELD] || PubConstants.BILL_STATE.FREE;
    listPlugin.showDelBtn = billState === PubConstants.BILL_STATE.FREE;
    listPlugin.showUploadBtn = billState === PubConstants.BILL_STATE.FREE;
    listPlugin.sourceId = record[primaryField];
    listPlugin.visible = true;
    listPlugin.billType = this.getBillType(page);
    listPlugin.onCancel = function () {
        listPlugin.type = PubConstants.PLUGIN_ATTACH_MGR;
        listPlugin.sourceId = '';
        listPlugin.visible = false;
        page.refresh();
    };
    page.refresh();
};

/**
 * 查看审批流信息
 * @param page
 * @param record
 */
ListEventHandler.showViewApprove = function (page, record) {
    var primaryField = this.getPrimaryField(page);
    var billId = record[primaryField];
    var listPlugin = this.getListPlugin(page);
    if (!listPlugin) {
        console.warn("当前单据列表插件组件未定义");
        return;
    }
    if (listPlugin['' + PubConstants.PLUGIN_VIEW_APPROVE] == false) {
        console.warn("当前单据未启用查看审批历史功能");
        return;
    }
    listPlugin.type = PubConstants.PLUGIN_VIEW_APPROVE;
    listPlugin.showViewApprove = true;
    listPlugin.billId = billId;
    listPlugin.onClose = function () {
        listPlugin.type = PubConstants.PLUGIN_VIEW_APPROVE;
        listPlugin.billId = '';
        listPlugin.showViewApprove = false;
        page.refresh();
    };
    page.refresh();
};

/**
 * 渲染审批流状态
 * @param page
 */
ListEventHandler.renderBillState = function (page) {
    var dataTable = this.getDataTable(page);
    if (!dataTable) {
        return;
    }
    _.forEach(dataTable.children, function (column) {
        if (column.uikey === PubConstants.BILL_STATE_FIELD) {
            column.render = function (value, record, rowIndex) {
                var billStateName = '';
                var color = 'black';
                switch (value) {
                    case PubConstants.BILL_STATE.FREE:
                        billStateName = '自由态';
                        color = 'green';
                        break;
                    case PubConstants.BILL_STATE.COMMIT:
                        billStateName = '已提交';
                        color = 'green';
                        break;
                    case PubConstants.BILL_STATE.APPROVING:
                        billStateName = '审批中';
                        color = 'orange';
                        break;
                    case PubConstants.BILL_STATE.APPROVED:
                        billStateName = '审批通过';
                        color = 'green';
                        break;
                    case PubConstants.BILL_STATE.UNAPPROVED:
                        billStateName = '审批不通过';
                        color = 'red';
                        break;
                    case PubConstants.BILL_STATE.APPROVED2:
                        billStateName = '已审批';
                        color = 'green';
                        break;
                    default:
                        break;
                }
                return React.createElement(
                    'span',
                    { style: { color: color } },
                    billStateName
                );
            };
        }
    });
};

/**
 * 列表界面执行查询时回调事件处理(可以动态调整查询条件参数)
 * @param page
 * @param params
 * @returns {*}
 */
ListEventHandler.onQueryParam = function (page, params) {
    var queryScheme = this.queryScheme;
    if (queryScheme && !_.isEmpty(queryScheme)) {
        var table = this.getDataTable(page);
        // 将分页信息合并到查询方案
        var pagination = {
            pageNumber: params ? params.pageNumber : 0,
            pageSize: params ? params.pageSize : 10
        };
        queryScheme = assign({}, queryScheme, pagination);
        queryScheme.pagination = table.pagination != false;
        return queryScheme;
    }
    return params;
};

/**
 * 列表加载数据成功
 * @param page
 * @param result
 * @param callback 回调函数
 */
ListEventHandler.onQuerySuccess = function (page, result, callback) {
    if (!result || !result.success || !result.backData) {
        return;
    }
    var table = this.getDataTable(page);
    if (!table) {
        return;
    }
    var dataSource = result.backData ? result.backData.content : [];
    this.formatDataSource(page, dataSource);
    table.dataSource = dataSource;
    if (table.pagination != false) {
        table.pagination = {
            current: result.backData.number ? result.backData.number + 1 : 1,
            total: result.backData.totalElements ? result.backData.totalElements : dataSource.length,
            pageSize: result.backData.size ? result.backData.size : 10
        };
    }
    if (callback && _.isFunction(callback)) {
        page.refresh(callback);
    } else {
        page.refresh();
    }
};
/**
 * 格式化数据源
 * @param page
 * @param dataSource
 */
ListEventHandler.formatDataSource = function (page, dataSource) {
    if (!_.isArray(dataSource) || _.isEmpty(dataSource)) {
        return;
    }
    var table = this.getDataTable(page);
    if (!table) {
        return;
    }
    // 行
    _.forEach(dataSource, function (rowData) {
        // 列
        _.forEach(table.children, function (column) {
            // 1.对参照和档案枚举做转换
            if ((column.uisubtype === FormItemType.inputrefer || column.uisubtype === FormItemType.enumselect) && column.isShow != false) {
                // 历史原因, 可能设计器中键值配置的是xxx.name, 做特殊处理
                var uikey = column.uikey ? column.uikey.split(".")[0] : undefined;
                if (!uikey) {
                    // 没有键值
                    return false;
                }
                var values = rowData[uikey];
                if (values) {
                    if (_.isArray(values)) {
                        // 是数组(多选模式)
                        var names = "";
                        _.forEach(values, function (value) {
                            names = names + value['' + PubConstants.REFER.NAME_FIELD] + ",";
                        });
                        rowData['' + column.uikey] = names.substr(0, names.length - 1);
                    } else if (_.isPlainObject(values)) {
                        // 是对象(单选模式)
                        rowData['' + column.uikey] = values['' + PubConstants.REFER.NAME_FIELD];
                    }
                }
            }
        });
    });
};

/**
 * NOTE:数据表格默认是根据ID删除数据,而为了控制并发,需要将id和ts绑定传后台删除数据,
 *      需要覆盖数据表格删除数据的params, 详情参考API {TableWidget.deleteData()}
 * @param page
 */
ListEventHandler.onDeleteParam = function (page) {
    var table = this.getDataTable(page);
    var deleteParam = [];
    if (table && table.api) {
        var selectRowData = table.api.getSelectedRowData();
        var pkField = this.getPrimaryField(page);
        _.forEach(selectRowData, function (rowData) {
            var data = {};
            data[pkField] = rowData[pkField];
            data[PubConstants.TS_FIELD] = rowData[PubConstants.TS_FIELD];
            deleteParam.push(data);
        });
    }
    return deleteParam;
};

/**
 * 批量删除
 * @param validate 校验函数,用于自定义校验数据是否可删除(PropTypes.func) 返回true | false
 * @param page
 */
ListEventHandler.delete = function (page, validate) {
    // 校验待删除的数据是否包含非自由态的数据
    var table = this.getDataTable(page);
    if (table && table.api) {
        var data = table.api.getSelectedRowData();
        data = data.filter(function (obj) {
            var billState = obj[PubConstants.BILL_STATE_FIELD] || PubConstants.BILL_STATE.FREE;
            return billState !== PubConstants.BILL_STATE.FREE;
        });
        if (data && data.length > 0) {
            YYMessage.error("不能删除非自由态的单据!");
            return;
        }
        if (validate && _.isFunction(validate)) {
            if (validate(data)) {
                // 校验通过
                table.api.deleteData();
            }
        } else {
            table.api.deleteData();
        }
    }
};

/**
 * 导出按钮点击事件
 * @param page
 * @param options
 *          useTemplate 是否使用自定义模板进行导出, 默认不使用
 *          fileName excel文件名
 *          showTitle 是否显示标题行, 默认显示
 *          title 标题
 *          autoLoadData 导出完成之后是否重新加载列表数据
 */
ListEventHandler.export = function (page, options) {
    var table = this.getDataTable(page);
    if (!table || !table.api) {
        return;
    }
    var dataSource = table.api.getDataSource();
    if (!dataSource || dataSource.length === 0) {
        YYMessage.error("界面无数据");
        return;
    }
    var listPlugin = this.getListPlugin(page);
    if (!listPlugin) {
        console.warn("当前单据列表插件组件未定义");
        return;
    }
    if (listPlugin['' + PubConstants.PLUGIN_EXPORT_EXCEL] == false) {
        console.warn("当前单据未启用导出excel功能");
        return;
    }
    listPlugin.type = PubConstants.PLUGIN_EXPORT_EXCEL;
    listPlugin.visible = true;
    listPlugin.onExport = exportExcel.bind(null, page, options);
    listPlugin.onCancel = hiddenExportModal.bind(null, page);
    page.refresh();
};

/**
 * 导出Excel具体实现
 * @param page
 * @param options
 *          useTemplate 是否使用自定义模板进行导出, 默认不使用
 *          fileName excel文件名
 *          showTitle 是否显示标题行, 默认显示
 *          title 标题
 *          autoLoadData 导出完成之后是否重新加载列表数据
 * @param scope 导出数据范围 "line" 选中行数据 | "page" 当前页面数据 | "all" 所有数据
 */
function exportExcel(page, options, scope) {
    var table = ListEventHandler.getDataTable(page);
    if (!table || !table.api) {
        return;
    }
    ListEventHandler.pageLoading(page);

    var _ref9 = options || {},
        useTemplate = _ref9.useTemplate,
        fileName = _ref9.fileName,
        showTitle = _ref9.showTitle,
        title = _ref9.title,
        autoLoadData = _ref9.autoLoadData;

    var billTypeName = ListEventHandler.getBillTypeName(page);
    fileName = fileName ? fileName : billTypeName + "_" + DateFormatUtils.formatDate(new Date(), PubConstants.EXPORT.DATE_FORMAT) + PubConstants.EXPORT.SUFFIX;
    title = title ? title : billTypeName;
    var body = {};
    body.fileName = fileName;
    if (showTitle != false) {
        body.title = title;
    }
    body.useTemplate = useTemplate;
    switch (scope) {
        case PubConstants.EXPORT.SCOPE.LINE:
            body.scope = PubConstants.EXPORT.SCOPE.LINE;
            body.data = table.api.getSelectedRowData();
            break;
        case PubConstants.EXPORT.SCOPE.PAGE:
            body.scope = PubConstants.EXPORT.SCOPE.PAGE;
            body.data = table.api.getDataSource();
            break;
        case PubConstants.EXPORT.SCOPE.ALL:
            body.scope = PubConstants.EXPORT.SCOPE.ALL;
            body.queryScheme = ListEventHandler.getQueryScheme(page);
            break;
    }
    fetch(ListEventHandler.urls.EXPORT, {
        headers: {
            'Content-Type': 'application/json',
            'authority': AuthToken.getAuthenticationStr(),
            'icop-token': AuthToken.getToken()
        },
        method: 'POST',
        body: JSON.stringify(body)
    }).then(function (response) {
        if (response && response.ok) {
            return response.blob();
        } else if (response.status === PubConstants.EXPORT.BUSINESS_EXCEPTION_CODE) {
            // 后端业务异常
            return Promise.reject("导出Excel失败:" + PubConstants.EXPORT.BUSINESS_EXCEPTION_MSG);
        } else {
            // 其他异常(404,500等)
            return Promise.reject("导出Excel失败:" + response.status);
        }
    }).then(function (myBlob) {
        if (myBlob && myBlob.type === "application/octet-stream") {
            var objectUrl = URL.createObjectURL(myBlob);
            var a = document.createElement('a');
            document.body.appendChild(a);
            a.setAttribute('style', 'display:none');
            a.setAttribute('href', objectUrl);
            a.setAttribute('download', fileName);
            a.click();
            URL.revokeObjectURL(objectUrl);
        } else {
            YYMessage.error("导出Excel失败:未知异常");
        }
        if (autoLoadData == true) {
            var table = ListEventHandler.getDataTable(page);
            if (table && table.api) {
                table.api.queryData();
            }
        }
        ListEventHandler.pageLoaded(page);
    }).catch(function (error) {
        YYMessage.error(error);
        ListEventHandler.pageLoaded(page);
    });
    hiddenExportModal(page);
}

/**
 * 取消导出
 * @param page
 */
function hiddenExportModal(page) {
    var listPlugin = ListEventHandler.getListPlugin(page);
    if (listPlugin) {
        listPlugin.type = PubConstants.PLUGIN_EXPORT_EXCEL;
        listPlugin.visible = false;
        page.refresh();
    }
}

/**
 * 打印
 * @param page
 */
ListEventHandler.print = function (page) {
    // TODO 打印
};

/**
 * 行编辑
 * @param page
 * @param rowData 行数据
 */
ListEventHandler.editRow = function (page, rowData) {
    var primaryField = this.getPrimaryField(page);
    var pk = rowData[primaryField];
    var cardRoute = this.urls.CARD_ROUTE;
    if (cardRoute) {
        var params = {};
        params['' + primaryField] = pk;
        page.routeTo(cardRoute, params, params);
    }
};

/**
 * 行删除
 * @param page
 * @param rowData 行数据
 * @param callback ajax请求成功后的回调函数
 * @param error ajax请求失败的回调函数
 */
ListEventHandler.deleteRow = function (page, rowData, callback, error) {
    var table = this.getDataTable(page);
    var billState = rowData[PubConstants.BILL_STATE_FIELD] || PubConstants.BILL_STATE.FREE;
    if (billState && billState !== PubConstants.BILL_STATE.FREE) {
        YYMessage.error("不能删除非自由态的单据!");
        return;
    }
    var primaryField = this.getPrimaryField(page);
    var pk = rowData[primaryField];
    var ts = rowData[PubConstants.TS_FIELD];
    if (!pk || !ts) {
        console.log("调用deleteRow失败,数据表格未定义主键或ts字段");
        return;
    }
    var _this = this;
    YYModal.confirm({
        title: "删除确认",
        content: "您是否确认要删除该条数据?",
        onOk: function onOk() {
            var data = {};
            data[primaryField] = pk;
            data[PubConstants.TS_FIELD] = ts;
            var deleteData = [];
            deleteData.push(data);
            ajax.postJSON(_this.urls.DELETE, deleteData, function (result) {
                if (callback && _.isFunction(callback)) {
                    callback(result);
                } else {
                    if (result.success) {
                        page.refresh(function () {
                            var table = _this.getDataTable(page);
                            if (table && table.api) {
                                table.api.queryData();
                            }
                        });
                    } else {
                        YYMessage.error(result.backMsg, PubConstants.MSG_TIME_OUT);
                    }
                }
            }, error);
        },
        onCancel: function onCancel() {
            page.refresh();
        }
    });
};

/**
 * 获取数据表格的主键字段
 * @param page
 */
ListEventHandler.getPrimaryField = function (page) {
    return this.getDataTable(page).rowKey || PubConstants.DEFAULT_PK_FIELD_VALUE;
};

/**
 * 获取单据类型code
 * @param page
 */
ListEventHandler.getBillType = function (page) {
    var comp = page.findUIByType(PubConstants.COMP_LIST_PAGE);
    var billType = comp && comp.length === 1 ? comp[0][PubConstants.BILL_TYPE_FIELD] : '';
    if (!billType) {
        console.warn("获取单据类型编码失败,单据类型未定义");
    }
    return billType;
};

/**
 * 获取单据类型name
 * @param page
 */
ListEventHandler.getBillTypeName = function (page) {
    var comp = page.findUIByType(PubConstants.COMP_LIST_PAGE);
    var billTypeName = comp && comp.length === 1 ? comp[0][PubConstants.BILL_TYPE_NAME_FIELD] : '';
    if (!billTypeName) {
        console.warn("获取单据类型名称失败,单据类型未定义");
    }
    return billTypeName;
};

/**
 * 获取数据表格
 * @param page
 */
ListEventHandler.getDataTable = function (page) {
    var dataTableKey = this.getDataTableKey(page);
    return page.findUI(dataTableKey);
};

/**
 * 获取数据表格的键值
 * @param page
 */
ListEventHandler.getDataTableKey = function (page) {
    var comp = page.findUIByType(PubConstants.COMP_DATA_TABLE);
    if (!comp || comp.length === 0) {
        comp = page.findUIByType(PubConstants.COMP_DATA_TABLE2);
        if (!comp || comp.length === 0) {
            console.error("未定义数据表格组件");
            return null;
        }
    }
    return comp[0].uikey;
};

/**
 * 获取特定页签下的数据表格
 * @param page
 * @param tabKey
 */
ListEventHandler.getDataTableByTabKey = function (page, tabKey) {
    if (!tabKey) {
        return null;
    }
    var activeTab = page.findUI(tabKey);
    if (activeTab) {
        var tables = _.filter(activeTab.children, function (child) {
            return child.uitype === PubConstants.COMP_DATA_TABLE || child.uitype === PubConstants.COMP_DATA_TABLE2;
        });
        if (tables && tables.length === 1) {
            return tables[0];
        }
    }
    return null;
};

/**
 * 设置查询方案
 * @param queryScheme
 */
ListEventHandler.setQueryScheme = function (queryScheme) {
    this.queryScheme = queryScheme;
};

/**
 * 获取查询方案
 * @param page
 * @returns {*}
 */
ListEventHandler.getQueryScheme = function (page) {
    var searchBar = this.getSearchBar(page);
    var billType = searchBar && searchBar.billType ? searchBar.billType : this.getBillType(page);
    if (this.queryScheme && this.queryScheme.billType === billType) {
        return this.queryScheme;
    }
    return null;
};

/**
 * 获取搜索栏组件
 * @param page
 */
ListEventHandler.getSearchBar = function (page) {
    var comp = page.findUIByType(PubConstants.COMP_SEARCH_BAR);
    if (!comp || comp.length === 0) {
        console.warn("未定义搜索栏组件");
        return null;
    }
    return comp[0];
};

/**
 * 获取搜索方案栏组件
 * @param page
 */
ListEventHandler.getSchemeGroup = function (page) {
    var comp = page.findUIByType(PubConstants.COMP_SCHEME_GROUP);
    if (!comp || comp.length === 0) {
        console.warn("未定义搜索方案栏组件");
        return null;
    }
    return comp[0];
};

/**
 *  获取列表页面的所有按钮
 * @param page
 */
ListEventHandler.getButtons = function (page) {
    var toolBar = this.getUniqueComponent(page, PubConstants.COMP_LIST_TOOLBAR);
    var buttons = [];
    if (toolBar) {
        // 1. 从工具栏中获取(首选方式)
        _.forEach(toolBar.children, function (item) {
            if (item.uitype === PubConstants.COMP_NORMAL_BTN) {
                // 显示的按钮
                buttons.push(item);
            }
        });
    } else {
        // 2. 获取页面所有的YYButton组件
        buttons = this.getComponents(page, PubConstants.COMP_NORMAL_BTN) || [];
    }
    return buttons;
};

/**
 * 获取当前页面权限按钮组
 * @param page
 * @returns {Array}
 */
ListEventHandler.getAuthorityButtons = function (page) {
    var authButtons = [];
    if (window.top.getAuthorityButtons && _.isFunction(window.top.getAuthorityButtons)) {
        authButtons = window.top.getAuthorityButtons(page.getAppCode(), page.getPageCode());
    } else {
        console.warn("调用getAuthorityButtons失败:未能获取到权限按钮组!");
    }
    return authButtons;
};

/**
 * 获取列表页面的行操作按钮组(设计器中配置的行操作按钮集合)
 * @param page
 * @returns {*}
 */
ListEventHandler.getLineButtons = function (page) {
    var buttons = this.getButtons(page) || [];
    buttons = buttons.filter(function (button) {
        var specialTag = button['' + PubConstants.COMP_SPECIAL_TAG];
        if (!specialTag) {
            return false;
        } else if (_.isPlainObject(specialTag)) {
            // 是对象(设计器中特殊标识参照单选)
            return specialTag.code === PubConstants.LINE_BTN_IDENTIFY;
        } else if (_.isArray(specialTag)) {
            // 是数组(设计器中特殊标识参照多选)
            var tags = specialTag.filter(function (tag) {
                return tag.code === PubConstants.LINE_BTN_IDENTIFY;
            });
            return tags && tags.length > 0;
        }
    });
    return buttons;
};

/**
 * 获取当前页面可用的行操作按钮组(已授权)
 * @param page
 */
ListEventHandler.getAvailableLineButtons = function (page) {
    // 1.从设计器中获取当前页面的行操作按钮组
    var lineButtons = this.getLineButtons(page);
    console.log("lineButtons", lineButtons);
    if (!lineButtons || lineButtons.length === 0) {
        return [];
    }
    // 2.获取当前页面注册过的按钮组
    var authButtons = this.getAuthorityButtons(page) || [];
    console.log("authButtons", authButtons);
    if (!authButtons || _.isEmpty(authButtons) || authButtons.length === 0) {
        return lineButtons;
    }
    // 3.过滤出注册过的行操作按钮
    var registerLineButtons = [];
    _.forEach(lineButtons, function (button) {
        _.forEach(authButtons, function (authButton) {
            if (button.uikey === authButton['' + PubConstants.REGISTER_BTN_PROP.BTN_CODE] && authButton['' + PubConstants.REGISTER_BTN_PROP.ENABLE] != false) {
                registerLineButtons.push(button);
            }
        });
    });
    return registerLineButtons;
};

/**
 * 获取卡片页面容器组件键值
 * @param page
 */
ListEventHandler.getListPageKey = function (page) {
    var comp = this.getUniqueComponent(page, PubConstants.COMP_LIST_PAGE);
    if (comp && comp.uikey) {
        return comp.uikey;
    }
    return null;
};

/**
 * 获取列表插件组件
 * @param page
 * @returns {*}
 */
ListEventHandler.getListPlugin = function (page) {
    var listPlugin = this.getUniqueComponent(page, PubConstants.COMP_PLUGIN);
    if (!listPlugin) {
        //TODO 兼容老的模式(等调整完之后删掉这段)
        listPlugin = page.findUI(PubConstants.LIST_ATTACH_MGR);
    }
    return listPlugin;
};

/**
 * 获取列表工具栏
 * @param page
 */
ListEventHandler.getToolBar = function (page) {
    return this.getUniqueComponent(page, PubConstants.COMP_LIST_TOOLBAR);
};

/**
 * 根据组件名称获取组件(适合设计器中只有唯一实例的组件)
 * @param page
 * @param compName
 */
ListEventHandler.getUniqueComponent = function (page, compName) {
    var comp = this.getComponents(page, compName);
    if (comp && comp.length === 1) {
        return comp[0];
    }
    return null;
};

/**
 * 根据组件名称获取组件(适合设计器中有多个实例的组件)
 * @param page
 * @param compName
 */
ListEventHandler.getComponents = function (page, compName) {
    var comp = page.findUIByType(compName);
    return comp || [];
};

/**
 * 卡片页面获取指定参数值
 * @param page
 * @param options
 *          billType 单据类型编号(非必须)
 *          regCode 参数编码(必须)
 *          orgId 组织ID(非必须,默认当前登录组织)
 *  @returns
 */
ListEventHandler.getRegConfigValue = function (page, options) {
    var _ref10 = options || {},
        billType = _ref10.billType,
        regCode = _ref10.regCode,
        orgId = _ref10.orgId;

    if (!regCode) {
        console.warn("调用getRegConfigValue失败,参数编码未定义");
        return null;
    }
    if (!billType) {
        billType = this.getBillType(page);
    }
    return SupportUtils.getRegConfigValue({ billType: billType, regCode: regCode, orgId: orgId });
};

/**
 * 将用户自定义的uiEvent与模板代码uiEvent进行合并
 * @param vendor
 * @return
 */
ListEventHandler.assignUiEvent = function (vendor) {
    if (!vendor) {
        vendor = {};
    }
    return AssignUtils.assignObject(this.API, vendor);
};

/**
 * 将用户自定义的uiParser与模板代码uiParser进行合并
 * @param vendor
 * @return
 */
ListEventHandler.assignUIParser = function (vendor) {
    if (!vendor) {
        vendor = {};
    }
    return AssignUtils.assignObject(this.uiParser, vendor);
};

module.exports = ListEventHandler;