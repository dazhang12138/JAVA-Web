'use strict';

/**
 * Created by xg on 2017/6/1.
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYMessage = _require.YYMessage;

var EnvUtils = require('yylib-utils/EnvUtils').default;
var ajax = require('yylib-utils/ajax');

var _require2 = require('../../resource/BaseHost'),
    URL_HOME_PORTAL = _require2.URL_HOME_PORTAL;

var SupportUtils = require('../../utils/SupportUtils');
var _ = require('lodash');

var SearchHandler = {};

var listPage; // 列表页面句柄
var scheme; // 缓存的搜索方案

// 公共常量
var PubConst = {
    SEARCH_PAGE_KEY: "searchPage", // 搜索页面键值
    SEARCH_BAR_KEY: "searchBar", // 搜索组件键值
    SCHEME_GROUP_KEY: "schemeGroup" // 方案栏组件键值
};

/**
 * 页面初始化
 * @param listPage (列表页面)
 */
SearchHandler.init = function (listPage) {
    this.listPage = listPage;
};

/**
 * 初始化,根据默认方案加载列表数据
 *
 * @param page (搜索页面)
 */
SearchHandler.initData = function (page) {
    var searchBar = page.findUI(PubConst.SEARCH_BAR_KEY);
    var searchPage = page.findUI(PubConst.SEARCH_PAGE_KEY);
    var schemeGroup = page.findUI(PubConst.SCHEME_GROUP_KEY);
    if (schemeGroup && this.scheme) {
        schemeGroup.activeTplId = this.scheme.tplId;
        page.refresh();
    }
    var billType = searchBar && searchBar.billType ? searchBar.billType : searchPage.billType;
    if (this.scheme && this.scheme.billType === billType) {
        this.loadList(this.scheme);
        return;
    }
    var entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
    if (!billType) {
        console.error("初始化失败:单据类型未定义");
        return;
    }
    var _this = this;
    var options = {};
    options.billType = billType;
    options.userId = EnvUtils.getValue(EnvUtils.Keys.USER_ID);
    options.orgId = EnvUtils.getValue(EnvUtils.Keys.ORGA_ID);
    SupportUtils.getDefaultSearchTemplate(options, function (result) {
        if (result.success) {
            var template = result.backData;
            if (!template || _.isEmpty(template)) {
                console.warn("当前单据未配置默认搜索方案");
                return false;
            }
            schemeGroup = page.findUI(PubConst.SCHEME_GROUP_KEY);
            if (schemeGroup) {
                schemeGroup.activeTplId = template.id;
                page.refresh();
            }
            var scheme = {};
            scheme.condition = JSON.parse(template.filter);
            scheme.sort = JSON.parse(template.sort);
            scheme.billType = billType;
            scheme.entityName = entityName;
            _this.loadList(scheme);
        } else {
            YYMessage.error(result.backMsg);
        }
    });
};

/**
 * 根据搜索方案查询列表数据
 * @param queryScheme 搜索方案
 */
SearchHandler.loadList = function (queryScheme) {
    var model = this.listPage.state.model;
    if (!model) {
        console.error("未获取到列表页面model");
        return;
    }
    var pageInfo = model.getValue("pageInfo");
    if (pageInfo && !_.isEmpty(pageInfo)) {
        queryScheme = _.assign({}, queryScheme, pageInfo);
    }
    this.setScheme(queryScheme);
    var _this = this;
    ajax.postJSON(_this.listPage.state.model.urls.listUrl, queryScheme, function (result) {
        if (result.success) {
            model.setValue('list', result);
            model.dispatchEvent("load_page");
        } else {
            YYMessage.error(result.backMsg);
        }
        _this.listPage.setState({ loading: false });
    });
};

SearchHandler.setScheme = function (scheme) {
    this.scheme = scheme;
};

SearchHandler.getQueryScheme = function () {
    return this.scheme;
};

SearchHandler.API = {
    // 返回按钮
    "goBackBtn": {
        onClick: function onClick() {
            if (process.env.YYLIB_ENV === 'prod' || process.env.YYLIB_ENV === 'outer' || process.env.YYLIB_ENV === 'test' || process.env.YYLIB_ENV === 'dev' || process.env.YYLIB_ENV === 'testcscec3b') {
                //线上环境
                top.location.href = URL_HOME_PORTAL;
            } else {
                // 本地环境
                this.routeTo('');
            }
        }
    },
    // 搜索方案
    "schemeGroup": {
        onSchemeClick: function onSchemeClick(queryScheme) {
            if (!queryScheme || !queryScheme.filter) {
                var model = SearchHandler.listPage.state.model;
                model.setValue('list', []);
                model.dispatchEvent("load_page");
                return;
            }
            SearchHandler.listPage.setState({ loading: true });
            var scheme = {};
            var condition = JSON.parse(queryScheme.filter);
            if (_.isArray(condition) && condition.length > 0) {
                scheme.condition = condition;
                scheme.sort = JSON.parse(queryScheme.sort);
                var searchBar = this.findUI('searchBar');
                if (searchBar) {
                    scheme.billType = searchBar.billType;
                    scheme.entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
                }
                // 执行查询
                SearchHandler.loadList(scheme);
            }
        }
    },

    // 搜索框
    "searchBar": {

        /**
         * 搜索方案发生变化(增,删,改)时回调函数(更新搜索方案栏中的数据)
         * @param tplList 最新搜索方案集合
         */
        onSchemeChange: function onSchemeChange(tplList) {
            var schemeGroup = this.findUI('schemeGroup');
            if (schemeGroup) {
                schemeGroup.templates = tplList;
                this.refresh();
            }
        },

        /**
         * 执行搜索
         * @param queryScheme
         */
        onMetaSearch: function onMetaSearch(queryScheme) {
            // 按回车搜索(根据默认方案查询)
            SearchHandler.listPage.setState({ loading: true });
            if ("searchText" in queryScheme && !queryScheme.searchText) {
                SearchHandler.initData(this);
            } else {
                var searchBar = this.findUI('searchBar');
                if (searchBar) {
                    queryScheme.billType = searchBar.billType;
                    queryScheme.entityName = searchBar.dataprops && searchBar.dataprops.entity ? searchBar.dataprops.entity.entityFullName : null;
                }
                //查询数据
                SearchHandler.loadList(queryScheme);
            }
        }
    },

    // 搜索页面
    "searchPage": {
        onViewWillMount: function onViewWillMount(options) {},
        onViewDidMount: function onViewDidMount(options) {
            SearchHandler.initData(this);
        },
        onViewWillUpdate: function onViewWillUpdate(options) {},
        onViewDidUpdate: function onViewDidUpdate(options) {}
    }
};

module.exports = SearchHandler;