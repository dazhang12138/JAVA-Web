'use strict';

/**
 * Created by xg on 2017/3/23.
 *
 * 建造单据模板卡片默认事件处理Handler
 */
var React = require('react');

var _require = require('yylib-ui'),
    YYMessage = _require.YYMessage,
    YYModal = _require.YYModal,
    YYDropdown = _require.YYDropdown,
    YYMenu = _require.YYMenu,
    YYMenuItem = _require.YYMenuItem,
    YYIcon = _require.YYIcon;

var _ = require('lodash');
var assign = require('lodash/assign');
var ajax = require('yylib-utils/ajax');
var AuthToken = require("yylib-utils/AuthToken");
var DataUtil = require('yylib-utils/DataUtil');

var _require2 = require('yylib-business/widgets'),
    FormItemType = _require2.FormItemType;

var PubConstants = require('../resource/PubConstants');
var BaseHost = require('../resource/BaseHost');
var DateFormatUtils = require('../utils/DateFormatUtils');
var SupportUtils = require('../utils/SupportUtils');
var AssignUtils = require('../utils/AssignUtils');
var CardEventHandler = {};

/**
 * 卡片页面初始化
 * @param page
 * @param urls
 * @param options
 *          autoLoadData 是否自动加载数据
 *          autoRenderOperate 是否自动渲染编辑表格的行操作按钮
 *          setDefaultData 设置默认值的回调
 *          callback 加载数据之后的回调函数
 *          clearAttachIds 是否清空附件id(bool类型,默认true)
 */
CardEventHandler.init = function (page, urls, options) {
    if (!urls) {
        console.error("卡片界面初始化失败,urls未定义");
        return;
    }

    var _ref = options || {},
        autoLoadData = _ref.autoLoadData,
        autoRenderOperate = _ref.autoRenderOperate,
        setDefaultData = _ref.setDefaultData,
        clearAttachIds = _ref.clearAttachIds,
        callback = _ref.callback;

    this.urls = urls;
    this.setDefaultData = setDefaultData;
    this.clearAttachIds = clearAttachIds;
    // 缓存设计器中禁用项表单附件字段
    cacheFormDisabledAttachItems(page);
    if (autoRenderOperate != false) {
        this.initLineButtons(page);
    }
    this.initPrecisionConfig(page);
    if (autoLoadData != false) {
        // 两种获取路由参数的方式, 一是URL携带参数, 二是路由携带参数
        var routeParams = page.getRouteQuery() || page.getRouteParams();
        if (routeParams && !_.isEmpty(routeParams)) {
            var primaryField = this.getPrimaryField(page);
            if (routeParams[primaryField]) {
                var params = {};
                params[primaryField] = routeParams[primaryField];
                this.queryDetail(page, { params: params, callback: callback });
            } else {
                this.refresh(page, setDefaultData);
            }
        } else {
            this.refresh(page, setDefaultData);
        }
    } else {
        this.refresh(page, setDefaultData);
    }
};

// 缓存设计器中配置为禁用的附件类型字段(在单据状态发生变化时会主动禁用/启用)
function cacheFormDisabledAttachItems(page) {
    var formKeys = CardEventHandler.getFormKeys(page, true);
    var itemKeys = [];
    _.forEach(formKeys, function (formKey) {
        var form = page.findUI(formKey);
        if (form && form.api) {
            var formItems = form.children || [];
            _.forEach(formItems, function (formItem) {
                if ((PubConstants.IMAGE_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_MGR_ITEM_TYPE === formItem.uisubtype) && formItem.visible != false && formItem.disabled == true) {
                    itemKeys.push(formItem.uikey);
                }
            });
        }
    });
    CardEventHandler.cachedAttachKeys = itemKeys;
}

/**
 * 初始化编辑表格行操作按钮
 * @param page
 */
CardEventHandler.initLineButtons = function (page) {
    var _this = this;
    var authButtons = this.getAuthorityButtons(page);
    // 从设计器卡片页面中获取所有的子卡片页面
    window.EnvConfig = window.EnvConfig || {};
    var moduleEnableBtnPermission = window.EnvConfig.ENABLE_BTN_PERMISSION === undefined ? PubConstants.ENABLE_BTN_PERMISSION : window.EnvConfig.ENABLE_BTN_PERMISSION;
    var accordions = this.getComponents(page, PubConstants.COMP_ACCORDION);
    _.forEach(accordions, function (accordion) {
        var toolBar = getToolBar(accordion);
        var table = getTable(accordion);
        // 同时存在工具栏和表格的子卡片
        if (toolBar && table) {
            var columns = table.children;
            // 获取当前子卡片页面中的行操作按钮
            var registerLineButtons = [];
            var lineButtons = _this.getToolBarButtons(page, toolBar.uikey, 'line');
            // if (_this.isLocalEnv()) {
            //     registerLineButtons = lineButtons;
            // }
            if (!moduleEnableBtnPermission) {
                registerLineButtons = lineButtons;
            } else {
                _.forEach(lineButtons, function (button) {
                    _.forEach(authButtons, function (authButton) {
                        if (button.uikey === authButton['' + PubConstants.REGISTER_BTN_PROP.BTN_CODE] && authButton['' + PubConstants.REGISTER_BTN_PROP.ENABLE] != false) {
                            registerLineButtons.push(button);
                        }
                    });
                });
            }
            if (!registerLineButtons || registerLineButtons.length === 0) {
                return true;
            }
            if (_.isArray(columns) && columns.length > 0) {
                var preColumn = columns[columns.length - 1];
                var operateCol = {};
                operateCol.uikey = "operate";
                operateCol.key = "operate";
                operateCol.dataIndex = "operate";
                operateCol.uitype = table.uitype === PubConstants.COMP_EDIT_TABLE ? PubConstants.COMP_EDIT_ITEM : PubConstants.COMP_DATA_TABLE_COL;
                operateCol.titleAlign = "center";
                operateCol.align = "center";
                operateCol.fixed = preColumn.fixed;
                operateCol.title = React.createElement(YYIcon, { type: 'setting', style: { padding: 0 } });
                operateCol.isShow = true;
                operateCol.width = 100;
                operateCol.render = function (value, record, rowIndex) {
                    var menuItems = [];
                    _.forEach(registerLineButtons, function (lineButton) {
                        menuItems.push(React.createElement(
                            YYMenuItem,
                            { key: lineButton.uikey },
                            React.createElement(
                                'a',
                                { onClick: onLineButtonClick.bind(this, { page: page, tableKey: table.uikey, record: record, btnKey: lineButton.uikey }) },
                                React.createElement(YYIcon, { type: lineButton.icon }),
                                React.createElement(
                                    'span',
                                    { style: { marginLeft: 8 } },
                                    lineButton.uititle
                                )
                            )
                        ));
                    });
                    var menus = React.createElement(
                        YYMenu,
                        null,
                        menuItems
                    );
                    return React.createElement(
                        YYDropdown,
                        {
                            overlay: menus },
                        React.createElement(
                            'span',
                            { style: { color: "#1A94E6" } },
                            '\u64CD\u4F5C'
                        )
                    );
                };
                columns.push(operateCol);
            }
        }
    });
};

/**
 * 行操作按钮点击事件处理
 * @param options
 *          page
 *          tableKey 表格键值
 *          record 行数据
 *          btnKey 行操作按钮键值
 */
function onLineButtonClick(options) {
    var _ref2 = options || {},
        page = _ref2.page,
        tableKey = _ref2.tableKey,
        record = _ref2.record,
        btnKey = _ref2.btnKey;
    // 调用按钮onClick事件


    var button = page.findUI(btnKey);
    if (button && button.api && button.api.props && _.isFunction(button.api.props.onClick)) {
        button.api.props.onClick.call(this, { tableKey: tableKey, record: record });
    } else {
        console.error('' + button.uititle + "[" + ('' + button.uikey) + "]按钮未定义onClick事件");
    }
}

/**
 * 获取子卡片页面工具栏
 * @param accordion
 */
function getToolBar(accordion) {
    if (!accordion) return;
    var comps = accordion.children.filter(function (child) {
        return child.uitype === PubConstants.COMP_NORMAL_TOOLBAR;
    });
    return comps && comps.length > 0 ? comps[0] : undefined;
}

/**
 * 获取子卡片页面表格(包括编辑表格和数据表格)
 * @param accordion
 */
function getTable(accordion) {
    if (!accordion) return;
    var comps = accordion.children.filter(function (child) {
        return child.uitype === PubConstants.COMP_EDIT_TABLE || child.uitype === PubConstants.COMP_DATA_TABLE2;
    });
    return comps && comps.length > 0 ? comps[0] : undefined;
}

/**
 * 获取工具栏上的按钮
 * @param page
 * @param toolBarKey 工具栏键值
 * @param type normal 普通按钮(非行操作按钮) | line 行操作按钮
 */
CardEventHandler.getToolBarButtons = function (page, toolBarKey, type) {
    var toolBarComp = page.findUI(toolBarKey);
    if (toolBarComp) {
        return toolBarComp.children.filter(function (child) {
            var specialTag = child['' + PubConstants.COMP_SPECIAL_TAG];
            var lineBtnTag = false;
            if (_.isPlainObject(specialTag)) {
                // 是对象(设计器中特殊标识参照单选)
                lineBtnTag = specialTag.code === PubConstants.LINE_BTN_IDENTIFY;
            } else if (_.isArray(specialTag)) {
                // 是数组(设计器中特殊标识参照多选)
                var tags = specialTag.filter(function (tag) {
                    return tag.code === PubConstants.LINE_BTN_IDENTIFY;
                });
                lineBtnTag = tags && tags.length > 0;
            }
            if (type === 'normal') {
                return child.uitype === PubConstants.COMP_NORMAL_BTN && !lineBtnTag;
            } else if (type === 'line') {
                return child.uitype === PubConstants.COMP_NORMAL_BTN && lineBtnTag;
            } else {
                return child.uitype === PubConstants.COMP_NORMAL_BTN;
            }
        });
    }
    return [];
};

/**
 * 获取当前页面权限按钮组
 * @param page
 * @returns {Array}
 */
CardEventHandler.getAuthorityButtons = function (page) {
    var authButtons = [];
    if (window.top.getAuthorityButtons && _.isFunction(window.top.getAuthorityButtons)) {
        authButtons = window.top.getAuthorityButtons(page.getAppCode(), page.getPageCode());
    } else {
        console.warn("调用getAuthorityButtons失败:未能获取到权限按钮组!");
    }
    return authButtons;
};

/**
 * 判断当前运行环境是否本地环境
 */
CardEventHandler.isLocalEnv = function () {
    return !window.top.getAuthorityButtons || !_.isFunction(window.top.getAuthorityButtons);
};

/**
 * 初始化精度参数设置
 * @param page
 */
CardEventHandler.initPrecisionConfig = function (page) {
    var data = this.getPrecisionConfig(page);
    setDecimal(page, data);
};

/**
 * 获取精度参数设置
 * @param page
 * @param type "weight"(重量), "money"(金额) "num"(数量) 精度类型(非必须,不传会返回所有精度参数)
 */
CardEventHandler.getPrecisionConfig = function (page, type) {
    window.EnvConfig = window.EnvConfig || {};
    var moduleCode = window.EnvConfig.MODULE_CODE;
    var orgId = AuthToken.getOrgaId();
    if (!moduleCode || !orgId) {
        return {};
    }
    var cachedData = DataUtil.localRead(moduleCode + '_' + orgId + PubConstants.PRECISION_SUFFIX);
    var retData;
    if (cachedData) {
        if (!(cachedData instanceof Object)) {
            cachedData = JSON.parse(cachedData);
        }
        switch (type) {
            case PubConstants.PRECISION_CONFIG.WEIGHT.TYPE:
                retData = cachedData['' + PubConstants.PRECISION_CONFIG.WEIGHT.PROPERTY];
                retData = retData ? parseInt(retData) : undefined;
                break;
            case PubConstants.PRECISION_CONFIG.MONEY.TYPE:
                retData = cachedData['' + PubConstants.PRECISION_CONFIG.MONEY.PROPERTY];
                retData = retData ? parseInt(retData) : undefined;
                break;
            case PubConstants.PRECISION_CONFIG.NUM.TYPE:
                retData = cachedData['' + PubConstants.PRECISION_CONFIG.NUM.PROPERTY];
                retData = retData ? parseInt(retData) : undefined;
                break;
            default:
                retData = cachedData;
                break;
        }
    }
    return retData;
};

/**
 * 初始化某个特定表格的精度
 * @param page
 * @param tableKey 表格键值
 * @param callback 回调函数
 */
CardEventHandler.initTablePrecision = function (page, tableKey, callback) {
    if (!page || !tableKey) {
        return;
    }
    var table = page.findUI('' + tableKey);
    if (!table) {
        return;
    }
    var data = this.getPrecisionConfig(page);
    if (!data || _.isEmpty(data)) {
        return;
    }
    _.filter(table.children, function (child) {
        // 判断table的类型
        if (PubConstants.COMP_BASIC_TABLE === table.uitype || PubConstants.COMP_DATA_TABLE2 === table.uitype) {
            // 基础表格和数据表格
            return PubConstants.PRECISION_ITEM_TYPE === child.fieldtype && child.isShow != false;
        } else if (PubConstants.COMP_EDIT_TABLE === table.uitype) {
            // 编辑表格
            return PubConstants.PRECISION_ITEM_TYPE === child.uisubtype && child.isShow != false;
        }
    }).forEach(function (column) {
        var configValue = undefined;
        switch (column.precisionConfig) {
            case PubConstants.PRECISION_CONFIG.NONE.VALUE:
                break;
            case PubConstants.PRECISION_CONFIG.WEIGHT.VALUE:
                configValue = data['' + PubConstants.PRECISION_CONFIG.WEIGHT.PROPERTY];
                break;
            case PubConstants.PRECISION_CONFIG.MONEY.VALUE:
                configValue = data['' + PubConstants.PRECISION_CONFIG.MONEY.PROPERTY];
                break;
            case PubConstants.PRECISION_CONFIG.NUM.VALUE:
                configValue = data['' + PubConstants.PRECISION_CONFIG.NUM.PROPERTY];
                break;
            default:
                break;
        }
        if (configValue) {
            column.decimal = parseInt(configValue);
        }
    });
    if (callback && _.isFunction(callback)) {
        callback();
    } else {
        page.refresh();
    }
};

// 判断数组是否包含元素
function contains(arr, obj) {
    if (!arr || !_.isArray(arr) || arr.length === 0) return false;
    var i = arr.length;
    while (i--) {
        if (arr[i] === obj) {
            return true;
        }
    }
    return false;
}

/**
 * 设置精度
 * @param page
 * @param precisionConfig 精度参数
 */
function setDecimal(page, precisionConfig) {
    if (!precisionConfig) return;
    if (!(precisionConfig instanceof Object)) {
        precisionConfig = JSON.parse(precisionConfig);
    }
    // 表单中的所有数值类型字段
    var formNumberItems = CardEventHandler.getFormItemsByType(page, {
        type: PubConstants.PRECISION_ITEM_TYPE
    });
    // (编辑表格&数据表格)中的所有数值类型字段
    var tableNumberItems = CardEventHandler.getTableItemsByType(page, {
        type: PubConstants.PRECISION_ITEM_TYPE
    });
    _.forEach(formNumberItems.concat(tableNumberItems), function (item) {
        var configValue = undefined;
        switch (item.precisionConfig) {
            case PubConstants.PRECISION_CONFIG.NONE.VALUE:
                break;
            case PubConstants.PRECISION_CONFIG.WEIGHT.VALUE:
                configValue = precisionConfig['' + PubConstants.PRECISION_CONFIG.WEIGHT.PROPERTY];
                break;
            case PubConstants.PRECISION_CONFIG.MONEY.VALUE:
                configValue = precisionConfig['' + PubConstants.PRECISION_CONFIG.MONEY.PROPERTY];
                break;
            case PubConstants.PRECISION_CONFIG.NUM.VALUE:
                configValue = precisionConfig['' + PubConstants.PRECISION_CONFIG.NUM.PROPERTY];
                break;
            default:
                break;
        }
        if (configValue) {
            item.decimal = parseInt(configValue);
        }
    });
    page.refresh();
}

/**
 * 设置卡片页面加载中状态
 * @param page
 */
CardEventHandler.pageLoading = function (page) {
    var cardPage = page.findUI(this.getCardPageKey(page));
    if (cardPage) {
        cardPage.loading = true;
        page.refresh();
    }
};

/**
 * 取消卡片页面加载中状态
 * @param page
 */
CardEventHandler.pageLoaded = function (page) {
    var cardPage = page.findUI(this.getCardPageKey(page));
    if (cardPage) {
        setTimeout(function () {
            console.log("pageLoaded");
            cardPage.loading = false;
            page.refresh();
        }, PubConstants.LOADING_TIME_OUT);
    }
};

/**
 * 卡片界面默认uiEvent
 */
CardEventHandler.API = {

    // 顶部返回按钮
    "goBackBtn": {
        onClick: function onClick() {
            var primaryKey = CardEventHandler.getPrimaryKey(this);
            var _this = this;
            if (!primaryKey) {
                YYModal.confirm({
                    title: "确认",
                    content: "当前界面数据未保存,是否确定返回?",
                    onOk: function onOk() {
                        CardEventHandler.goBack(_this);
                    }
                });
            } else {
                CardEventHandler.goBack(this);
            }
        }
    },

    // 添加
    "plusBtn": {
        onClick: function onClick() {
            CardEventHandler.resetPage(this, CardEventHandler.setDefaultData);
        }
    },

    // 复制
    "copyBtn": {
        onClick: function onClick() {
            CardEventHandler.copyData(this, CardEventHandler.setDefaultData);
        }
    },

    // 刷新
    "reloadBtn": {
        onClick: function onClick() {
            CardEventHandler.reloadData(this);
            YYMessage.success("刷新成功");
        }
    },

    // 删除
    "removeBtn": {
        onClick: function onClick() {
            CardEventHandler.deleteData(this);
        }
    },

    // 保存
    "saveBtn": {
        onClick: function onClick(btnKey) {
            // 加loading状态判断是为了解决连续点击保存按钮导致数据重复保存的bug
            var cardPageKey = CardEventHandler.getCardPageKey(this);
            var isLoading = this.findUI('' + cardPageKey).loading;
            if (!isLoading) {
                CardEventHandler.saveData(this, { "btnKey": btnKey });
            }
        }
    },

    /**
     * 审批流提交组件(CPBpmSubmit.js)
     */
    "bpmSubmit": {

        onViewWillUpdate: function onViewWillUpdate(options) {
            // 判断loading状态是为了在页面数据初始化完成之后再更新提交组件
            if (options && options.uiMeta) {
                if (options.uiMeta.loading != true) {
                    CardEventHandler.configBpmSubmit(this);
                }
            }
        },

        // 提交按钮点击前事件处理(可自定义校验)
        onClickBefore: function onClickBefore() {
            return CardEventHandler.onSubmitBefore(this);
        },

        // 提交按钮点击事件
        onSubmitClick: function onSubmitClick(_callback) {
            CardEventHandler.saveData(this, {
                callback: function callback(result) {
                    _callback(result.success);
                }
            });
        },

        // 关闭窗口回调
        onClose: function onClose(result) {
            CardEventHandler.reloadData(this);
        },
        // 收回
        onRecoverDone: function onRecoverDone(result) {
            if (result.success) {
                YYMessage.success("收回成功");
                CardEventHandler.reloadData(this);
            } else {
                YYMessage.error(result.msg);
            }
        }
    },

    /**
     * 审批流审批组件(CPBpmApprove.js)
     */
    "bpmApprove": {

        onViewWillUpdate: function onViewWillUpdate(options) {
            // 判断loading状态是为了在页面数据初始化完成之后再更新审批组件
            if (options && options.uiMeta) {
                if (options.uiMeta.loading != true) {
                    CardEventHandler.configBpmApprove(this);
                }
            }
        },

        /**
         * 审批按钮点击前事件处理(可自定义校验)
         * @param key approve(执行审批) | unapprove(执行弃审) | viewApprove(查看审批历史)
         * @returns {boolean}
         */
        onClickBefore: function onClickBefore(key) {
            return true;
        },
        // 关闭审批窗口回调
        onApproveClose: function onApproveClose() {
            CardEventHandler.reloadData(this);
        },
        // 关闭审批历史窗口回调
        onHistoryClose: function onHistoryClose() {}
    },

    /**
     * 打印组件
     */
    "printBtn": {
        /**
         * 打印菜单点击事件
         * @param templateCode 打印模板code
         */
        onClickMenu: function onClickMenu(templateCode) {
            CardEventHandler.print(this, { templateCode: templateCode });
        }
    },

    /**
     * 附件管理(CPAttachMgr.js)
     */
    "attachMgr": {
        // 附件管理按钮点击前事件(附件管理组件支持动态改变属性,提交和审批挂件不支持,所以两种方式实现)
        onClickBefore: function onClickBefore() {
            var tables = CardEventHandler.getEditTables(this);
            tables.forEach(function (table) {
                if (table && table.api) {
                    // 避免弹窗时dataSource未保存,造成数据丢失
                    table.dataSource = table.api.getDataSource();
                }
            });
            CardEventHandler.configAttachment(this);
            return true;
        },
        onChange: function onChange(value) {
            CardEventHandler.attachChange(this, value);
        }
    },

    // 编辑表格添加按钮
    "addRowBtn": {
        onClick: function onClick() {
            CardEventHandler.addRow(this);
        }
    },

    // 编辑表格删除按钮
    "delRowBtn": {
        onClick: function onClick() {
            CardEventHandler.delRow(this);
        }
    }
};

/**
 * 卡片界面打印
 * @param page
 * @param options
 *          url 打印的后端服务地址
 *          templateCode 打印模板Code
 *          id 单据主键
 *          title 打印页面标题
 */
CardEventHandler.print = function (page, options) {
    var _ref3 = options || {},
        url = _ref3.url,
        templateCode = _ref3.templateCode,
        id = _ref3.id,
        title = _ref3.title;

    var printUrl = url ? url : this.urls.PRINT;
    if (!printUrl) {
        console.error("打印失败:打印服务未定义");
        return;
    }
    if (!templateCode) {
        console.error("打印失败:打印模板编号未定义");
        return;
    }
    var pk = id ? id : this.getPrimaryKey(page);
    if (!pk) {
        YYMessage.error("打印失败:未获取到单据主键!");
        return;
    }
    this.pageLoading(page);
    var _this = this;
    var winTitle = title ? title : this.getCardTitle(page) + "打印页面";
    ajax.getJSON(printUrl, { id: pk }, function (result) {
        if (result && result.success) {
            var newWin = window.open("#/print");
            newWin.templateCode = templateCode;
            newWin.printData = result.backData;
            newWin.title = winTitle;
        } else {
            YYMessage.error(result.backMsg);
        }
        _this.pageLoaded(page);
    });
};

/**
 * 标准单据卡片界面返回列表界面
 * 卡片界面返回的特殊性: 要考虑点击磁贴"添加", 从portal主页直接跳转到卡片界面时的情况,此时需要返回列表界面,而不是portal主页
 * @param page
 */
CardEventHandler.goBack = function (page) {
    window.EnvConfig = window.EnvConfig || null;
    // 有自定义的卡片界面返回路由路径
    if (this.urls && this.urls.CARD_GO_BACK) {
        page.routeTo('' + this.urls.CARD_GO_BACK);
    } else if (this.isLocalEnv()) {
        // 本地环境
        page.goBack();
    } else {
        // 线上环境
        var routePath = page.props.location.pathname;
        var listRoute = '';
        if (routePath) {
            var routes = routePath.split('/');
            if (_.isArray(routes) && routes.length > 1) {
                listRoute = routes[0] ? routes[0] : routes[1];
            }
        }
        if (listRoute) {
            page.routeTo(listRoute);
        } else {
            page.goBack();
        }
    }
};

/**
 * 刷新界面
 * @param page
 * @param callback 刷新完毕后的回调函数
 */
CardEventHandler.refresh = function (page, callback) {
    // 1.重置界面状态
    var submitKey = this.getBpmSubmitKey(page);
    var approveKey = this.getBpmApproveKey(page);

    var pk = this.getPrimaryKey(page);
    var reloadBtn = page.findUI(PubConstants.RELOAD_BTN_KEY); // 刷新按钮
    var copyBtn = page.findUI(PubConstants.COPY_BTN_KEY); // 复制按钮
    var deleteBtn = page.findUI(PubConstants.DELETE_BTN_KEY); // 删除按钮
    var saveBtn = page.findUI(PubConstants.SAVE_BTN_KEY); // 保存按钮组
    var submitBtn = submitKey ? page.findUI(submitKey) : undefined; // 提交按钮组
    var approveBtn = approveKey ? page.findUI(approveKey) : undefined; // 审批按钮组
    var printComp = this.getPrintComp(page); // 打印按钮组
    if (pk) {
        if (reloadBtn) {
            reloadBtn.disabled = false;
        }
        if (copyBtn) {
            copyBtn.disabled = false;
        }
        if (printComp) {
            printComp.disabled = false;
        }
        // 判断单据状态
        var billState = this.getBillState(page);
        switch (billState) {
            case PubConstants.BILL_STATE.FREE:
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.disableSubmit = false;
                    submitBtn.disableRecover = true;
                }
                if (approveBtn) {
                    approveBtn.disabled = false;
                    approveBtn.disableApprove = true;
                    approveBtn.disableUnapprove = true;
                    approveBtn.disableViewApprove = false;
                }
                if (deleteBtn) {
                    deleteBtn.disabled = false;
                }
                if (saveBtn) {
                    saveBtn.disabled = false;
                }
                this.enablePage(page);
                break;
            case PubConstants.BILL_STATE.COMMIT:
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.disableSubmit = true;
                    submitBtn.disableRecover = false;
                }
                if (approveBtn) {
                    approveBtn.disabled = false;
                    approveBtn.disableApprove = false;
                    approveBtn.disableUnapprove = true;
                    approveBtn.disableViewApprove = false;
                }
                if (deleteBtn) {
                    deleteBtn.disabled = true;
                }
                if (saveBtn) {
                    saveBtn.disabled = true;
                }
                this.disablePage(page);
                break;
            case PubConstants.BILL_STATE.APPROVING:
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.disableSubmit = true;
                    submitBtn.disableRecover = true;
                }
                if (approveBtn) {
                    approveBtn.disabled = false;
                    approveBtn.disableApprove = false;
                    approveBtn.disableUnapprove = false;
                    approveBtn.disableViewApprove = false;
                }
                if (deleteBtn) {
                    deleteBtn.disabled = true;
                }
                if (saveBtn) {
                    saveBtn.disabled = true;
                }
                this.disablePage(page);
                break;
            case PubConstants.BILL_STATE.APPROVED:
            case PubConstants.BILL_STATE.UNAPPROVED:
                if (submitBtn) {
                    submitBtn.disabled = true;
                    submitBtn.disableSubmit = true;
                    submitBtn.disableRecover = true;
                }
                if (approveBtn) {
                    approveBtn.disabled = false;
                    approveBtn.disableApprove = true;
                    approveBtn.disableUnapprove = true;
                    approveBtn.disableViewApprove = false;
                }
                if (deleteBtn) {
                    deleteBtn.disabled = true;
                }
                if (saveBtn) {
                    saveBtn.disabled = true;
                }
                this.disablePage(page);
                break;
            default:
                break;
        }
    } else {
        if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.disableSubmit = true;
            submitBtn.disableRecover = true;
        }
        if (approveBtn) {
            approveBtn.disabled = false;
            approveBtn.disableApprove = true;
            approveBtn.disableUnapprove = true;
            approveBtn.disableViewApprove = false;
        }
        if (deleteBtn) {
            deleteBtn.disabled = true;
        }
        if (reloadBtn) {
            reloadBtn.disabled = true;
        }
        if (copyBtn) {
            copyBtn.disabled = true;
        }
        if (saveBtn) {
            saveBtn.disabled = false;
        }
        if (printComp) {
            printComp.disabled = true;
        }
        this.enablePage(page);
    }
    // 取消卡片界面加载中状态
    this.pageLoaded(page);
    if (callback && _.isFunction(callback)) {
        page.refresh(callback);
    } else {
        page.refresh();
    }
};

/**
 * 界面切换为非编辑态
 * @param page
 */
CardEventHandler.disablePage = function (page) {
    var forms = this.getForms(page, true);
    _.forEach(forms, function (form) {
        form.disabled = true;
    });
    var tables = this.getEditTables(page);
    _.forEach(tables, function (table) {
        table.enableRowClickEdit = false;
    });
    var editTableBtns = this.getComponents(page, PubConstants.COMP_NORMAL_BTN);
    _.forEach(editTableBtns, function (btn) {
        btn.disabled = true;
    });
};

/**
 * 界面切换为编辑态(排除界面设计器默认非编辑态的字段)
 * @param page
 */
CardEventHandler.enablePage = function (page) {
    var forms = this.getForms(page, true);
    _.forEach(forms, function (form) {
        form.disabled = false;
    });
    var tables = this.getEditTables(page);
    _.forEach(tables, function (table) {
        table.enableRowClickEdit = true;
    });
    var editTableBtns = this.getComponents(page, PubConstants.COMP_NORMAL_BTN);
    _.forEach(editTableBtns, function (btn) {
        btn.disabled = false;
    });
};

/**
 * 复制
 * @param page
 * @param callback 回调函数
 */
CardEventHandler.copyData = function (page, callback) {
    // 1.清空审计信息
    var auditForm = this.getAuditInfoForm(page);
    if (auditForm && auditForm.api) {
        auditForm.api.resetFields();
    }
    // 2.重置表单相关信息
    var billType = this.getBillType(page);
    var pkFiled = this.getPrimaryField(page);
    var normalForms = this.getForms(page, true);
    _.forEach(normalForms, function (form) {
        var values = {};
        values['' + pkFiled] = null;
        values['' + PubConstants.TS_FIELD] = null;
        values['' + PubConstants.ATTACH_UPLOAD_FIELD] = null;
        _.forEach(form.children, function (formItem) {
            if ((PubConstants.IMAGE_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_MGR_ITEM_TYPE === formItem.uisubtype) && formItem.visible != false) {
                // 清空附件上传和图片上传绑定的原单据信息
                if (!formItem.billType) {
                    formItem.billType = billType;
                }
                values[formItem.uikey] = null;
                formItem.sourceId = null;
                formItem.sourceType = formItem.sourceType ? formItem.sourceType : formItem.uikey;
            }
        });
        if (form.api) {
            // 复制时清空每个表单的id和ts, 避免在设计器中重复配置导致bug
            form.api.setFieldsValue(values);
        }
    });
    // 3.清空行附件,行状态改变为add
    var editTables = this.getEditTables(page);
    _.forEach(editTables, function (table) {
        _.forEach(table.children, function (editTableItem) {
            if ((PubConstants.IMAGE_ITEM_TYPE === editTableItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === editTableItem.uisubtype) && editTableItem.visible != false) {
                // 清空附件上传和图片上传绑定的原单据信息
                editTableItem.renderBefore = function (options) {
                    var props = options.props;
                    if (!props.billType) {
                        props.billType = billType;
                    }
                    props.disabled = undefined;
                    props.sourceId = null;
                    return options;
                };
                if (table.api) {
                    var dataSource = table.api.getDataSource() || [];
                    _.forEach(dataSource, function (row) {
                        row['' + PubConstants.ATTACH_UPLOAD_FIELD] = null;
                        row[editTableItem.uikey] = null;
                    });
                }
            }
        });
        if (table.api) {
            var allRows = table.api.getRowData({ rowState: "all", clearIsEdit: false, clearNewId: false });
            _.forEach(allRows, function (row) {
                row.rowState = "add";
            });
            table.dataSource = allRows;
        }
    });
    this.refresh(page, callback);
    YYMessage.success('复制成功', PubConstants.MSG_TIME_OUT);
};

/**
 * 判断当前页面是否可编辑
 * @param page
 * @returns {boolean}
 */
CardEventHandler.isEdit = function (page) {
    var billState = this.getBillState(page) || PubConstants.BILL_STATE.FREE;
    var pk = this.getPrimaryKey(page);
    return !pk && billState === PubConstants.BILL_STATE.FREE;
};

/**
 * 重新加载界面数据
 * @param page
 * @param callback 回调函数
 */
CardEventHandler.reloadData = function (page, callback) {
    this.pageLoading(page);
    var primaryField = this.getPrimaryField(page);
    var primaryKey = this.getPrimaryKey(page);
    if (primaryKey) {
        var params = {};
        params[primaryField] = primaryKey;
        this.queryDetail(page, { params: params, callback: callback });
    } else {
        this.pageLoaded(page);
    }
};

/**
 * 重置界面
 * @param page
 * @param callback 回调函数
 */
CardEventHandler.resetPage = function (page, callback) {
    var formKeys = this.getFormKeys(page);
    _.forEach(formKeys, function (key) {
        var form = page.findUI(key);
        if (form && form.api) {
            var values = {};
            values['' + PubConstants.ATTACH_UPLOAD_FIELD] = null;
            form.api.setFieldsValue(values);
            _.forEach(form.children, function (formItem) {
                if ((PubConstants.IMAGE_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_MGR_ITEM_TYPE === formItem.uisubtype) && formItem.visible != false) {
                    // 清空附件上传和图片上传绑定的原单据信息
                    if (!formItem.billType) {
                        formItem.billType = billType;
                    }
                    formItem.sourceId = null;
                    formItem.sourceType = formItem.sourceType ? formItem.sourceType : formItem.uikey;
                }
            });
            form.api.resetFields();
        }
    });
    var tableKeys = this.getEditTableKeys(page);
    _.forEach(tableKeys, function (key) {
        var table = page.findUI(key);
        if (table) {
            table.dataSource = [];
        }
    });
    this.refresh(page, callback);
};

/**
 * 设值到界面显示
 * @param page
 * @param data
 */
CardEventHandler.setData = function (page, data) {
    if (!data || _.isEmpty(data)) {
        return;
    }
    var forms = this.getForms(page);
    var editTables = this.getEditTables(page);
    var primaryField = this.getPrimaryField(page);
    var billType = this.getBillType(page);
    var billState = data['' + PubConstants.BILL_STATE_FIELD] ? data['' + PubConstants.BILL_STATE_FIELD] : PubConstants.BILL_STATE.FREE;
    var primaryKey = data['' + primaryField];
    var _this = this;
    // 处理表单
    _.forEach(forms, function (form) {
        _.forEach(form.children, function (formItem) {
            if (PubConstants.DATE_ITEM_TYPE === formItem.uisubtype) {
                // 日期类型
                data['' + formItem.uikey] = DateFormatUtils.parseAntDate(data['' + formItem.uikey], formItem.format);
            } else if ((PubConstants.IMAGE_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_MGR_ITEM_TYPE === formItem.uisubtype) && formItem.visible != false) {
                // 附件上传和图片上传
                if (!formItem.billType) {
                    formItem.billType = billType;
                }
                if (billState !== PubConstants.BILL_STATE.FREE) {
                    formItem.disabled = true;
                    formItem.showUploadBtn = false;
                    formItem.showDelBtn = false;
                } else if (_.indexOf(_this.cachedAttachKeys, formItem.uikey) === -1) {
                    formItem.disabled = false;
                    formItem.showUploadBtn = true;
                    formItem.showDelBtn = true;
                }
                formItem.sourceId = primaryKey;
                formItem.sourceType = formItem.sourceType ? formItem.sourceType : formItem.uikey;
                if (_this.clearAttachIds != false) {
                    data[formItem.uikey] = primaryKey;
                }
            } else if (FormItemType.enumselect === formItem.uisubtype) {
                // 档案枚举
                var values = data[formItem.uikey];
                var multiple = formItem.multiple === undefined ? false : formItem.multiple;
                if (_.isPlainObject(values)) {
                    // 单选
                    var cvalue = _.cloneDeep(values);
                    if ("object" === formItem.valueType) {
                        // 值类型为对象
                        if (PubConstants.REFER.ID_FIELD !== formItem.valueKey) {
                            // 取code
                            delete cvalue['' + PubConstants.REFER.ID_FIELD];
                            data[formItem.uikey] = cvalue;
                        }
                    } else {
                        // 值类型为字符串
                        if (PubConstants.REFER.ID_FIELD === formItem.valueKey) {
                            // 取id
                            data[formItem.uikey] = values['' + PubConstants.REFER.ID_FIELD];
                        } else {
                            // 取code
                            data[formItem.uikey] = values['' + PubConstants.REFER.CODE_FIELD];
                        }
                    }
                    if (multiple) {
                        // 值与配置不一致
                        data[formItem.uikey] = _.castArray(data[formItem.uikey]);
                    }
                } else if (_.isArray(values)) {
                    // 多选
                    var cvalue = _.cloneDeep(values);
                    if ("object" === formItem.valueType) {
                        // 值类型为对象
                        if (PubConstants.REFER.ID_FIELD !== formItem.valueKey) {
                            // 取code
                            cvalue.map(function (value) {
                                delete value['' + PubConstants.REFER.ID_FIELD];
                            });
                            data[formItem.uikey] = cvalue;
                        }
                    } else {
                        // 值类型为字符串
                        data[formItem.uikey] = values.map(function (value) {
                            if (PubConstants.REFER.ID_FIELD === formItem.valueKey) {
                                // 取id
                                return value['' + PubConstants.REFER.ID_FIELD];
                            } else {
                                // 取code
                                return value['' + PubConstants.REFER.CODE_FIELD];
                            }
                        });
                    }
                    if (!multiple) {
                        // 值与配置不一致
                        data[formItem.uikey] = data[formItem.uikey][0];
                    }
                }
            }
        });
        if (form.api) {
            form.api.setFieldsValue(data);
        }
    });
    // 处理表格
    _.forEach(editTables, function (table) {
        var dataSource = data['' + table.uikey] || [];
        if (dataSource && dataSource.length > 0) {
            var subPrimaryFiled = table.rowKey;
            _.forEach(table.children, function (editTableItem) {
                if ((PubConstants.IMAGE_ITEM_TYPE === editTableItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === editTableItem.uisubtype) && editTableItem.visible != false) {
                    // 附件上传和图片上传
                    if (editTableItem.hasOwnRenderBefore != false && editTableItem.renderBefore) {
                        editTableItem.hasOwnRenderBefore = true;
                    }
                    if (editTableItem.hasOwnRenderBefore != true) {
                        editTableItem.hasOwnRenderBefore = false;
                        editTableItem.renderBefore = function (options) {
                            var rowData = options.rowData;
                            var subPrimaryKey = rowData['' + subPrimaryFiled];
                            if (subPrimaryKey) {
                                // sourceId = 主表ID; sourceType = 行Id + 设计器中配置的类型标识
                                var props = options.props;
                                if (!props.billType) {
                                    props.billType = billType;
                                }
                                if (props.disabled === undefined || props.disabled == false) {
                                    props.disabled = undefined;
                                } else {
                                    props.disabled = billState !== PubConstants.BILL_STATE.FREE;
                                }
                                props.sourceId = primaryKey;
                                props.sourceType = subPrimaryKey + "_" + (editTableItem.sourceType ? editTableItem.sourceType : editTableItem.uikey);
                            }
                            return options;
                        };
                    }
                } else if (FormItemType.enumselect === editTableItem.uisubtype) {
                    // 档案枚举
                    _.forEach(dataSource, function (rowData) {
                        var values = rowData[editTableItem.uikey];
                        if (values) {
                            if (_.isPlainObject(values)) {
                                // 单选
                                if ("object" === editTableItem.valueType) {
                                    // 值类型为对象
                                    if (PubConstants.REFER.ID_FIELD !== editTableItem.valueKey) {
                                        // 取code
                                        var cvalue = _.cloneDeep(values);
                                        delete cvalue['' + PubConstants.REFER.ID_FIELD];
                                        rowData[editTableItem.uikey] = cvalue;
                                    }
                                } else {
                                    // 值类型为字符串
                                    if ("id" === editTableItem.valueKey) {
                                        // 取id
                                        rowData[editTableItem.uikey] = values['' + PubConstants.REFER.ID_FIELD];
                                    } else {
                                        // 取code
                                        rowData[editTableItem.uikey] = values['' + PubConstants.REFER.CODE_FIELD];
                                    }
                                }
                            } else if (_.isArray(values)) {
                                // 多选
                                if ("object" === editTableItem.valueType) {
                                    // 值类型为对象
                                    if (PubConstants.REFER.ID_FIELD !== editTableItem.valueKey) {
                                        // 取code
                                        var cvalue = _.cloneDeep(values);
                                        cvalue.map(function (value) {
                                            delete value['' + PubConstants.REFER.ID_FIELD];
                                        });
                                        rowData[editTableItem.uikey] = cvalue;
                                    }
                                } else {
                                    // 值类型为字符串
                                    rowData[editTableItem.uikey] = values.map(function (value) {
                                        if ("id" === editTableItem.valueKey) {
                                            // 取id
                                            return value['' + PubConstants.REFER.ID_FIELD];
                                        } else {
                                            // 取code
                                            return value['' + PubConstants.REFER.CODE_FIELD];
                                        }
                                    });
                                }
                            }
                        }
                    });
                }
            });
        }
        table.dataSource = dataSource;
    });
};

/**
 * 根据id查询明细
 * @param page
 * @param options
 *          url ajax请求的url
 *          params 参数
 *          beforeAction 前事件,返回true继续,返回false终止
 *          callback 回调函数
 *          error ajax请求失败的回调函数
 */
CardEventHandler.queryDetail = function (page, options) {
    var _this = this;

    var _ref4 = options || {},
        url = _ref4.url,
        params = _ref4.params,
        beforeAction = _ref4.beforeAction,
        callback = _ref4.callback,
        error = _ref4.error;

    var result = true;
    if (beforeAction && _.isFunction(beforeAction)) {
        result = beforeAction();
    }
    if (!result) {
        this.pageLoaded(page);
        return;
    }
    ajax.getJSON(url ? url : this.urls.QUERY_DETAIL, params, function (result) {
        if (callback && _.isFunction(callback)) {
            callback(result);
        } else {
            if (result.success) {
                // 默认处理,设值到界面
                var data = result.backData;
                _this.setData(page, data);
                _this.refresh(page);
            } else {
                YYMessage.error(result.backMsg, PubConstants.MSG_TIME_OUT);
                _this.refresh(page);
            }
        }
    }, error);
};

/**
 * 多表单校验(递归方式)
 * @param page
 * @param options
 *          formKeys 待校验的表单键值
 *          success 校验成功之后的回调函数
 */
CardEventHandler.multiFormValid = function (page, options) {
    var _assign = assign({}, {
        formKeys: [],
        index: 0,
        formValues: {},
        formErrors: {},
        success: null
    }, options),
        formKeys = _assign.formKeys,
        index = _assign.index,
        formValues = _assign.formValues,
        formErrors = _assign.formErrors,
        success = _assign.success;

    if (formKeys && _.isArray(formKeys) && formKeys.length > 0) {
        var formKey = formKeys[index];
        var form = page.findUI(formKey);
        if (form && form.api) {
            form.api.validateFieldsAndScroll(function (errors, values) {
                if (!!errors) {
                    return false;
                } else {
                    formErrors[formKey] = errors;
                    formValues[formKey] = values;
                    if (formKeys.length === index + 1) {
                        if (_.isFunction(success)) {
                            success(formErrors, formValues);
                        }
                    } else {
                        CardEventHandler.multiFormValid(page, assign({}, options, {
                            formValues: formValues,
                            formErrors: formErrors,
                            index: index + 1
                        }));
                    }
                }
            });
        }
    } else {
        console.warn("待校验的表单为空!");
        success();
    }
};

/**
 * 保存数据
 * @param page
 * @param options
 *          url ajax请求的url
 *          btnKey 保存按钮的键值(保存并新增|保存并复制)
 *          excludeKeys 不进行校验和保存的表单和编辑表格键值集合(String or Array)
 *          beforeAction 前事件(主要在保存前做自定义校验),返回true继续,返回false终止
 *          prepareDataCallback 合并数据后的回调(此时能够对要保存的数据进行处理)
 *          callback 保存后的回调函数
 *          error ajax请求失败的回调函数
 */
CardEventHandler.saveData = function (page, options) {
    // 1.表单校验
    var _ref5 = options || {},
        excludeKeys = _ref5.excludeKeys;

    var formKeys = this.getFormKeys(page);
    var validFormKeys = this.getFormKeys(page, true);
    if (excludeKeys) {
        validFormKeys = validFormKeys.filter(function (formKey) {
            if (_.isArray(excludeKeys)) {
                return !contains(excludeKeys, formKey);
            } else {
                return excludeKeys !== formKey;
            }
        });
    }
    var _this = this;
    this.multiFormValid(page, {
        formKeys: validFormKeys,
        success: function success(formErrors, formValues, formKey, index) {
            // 编辑表格校验
            var tableKeys = _this.getEditTableKeys(page);
            var success = true;
            _.forEach(tableKeys, function (tableKey) {
                var table = page.findUI(tableKey);
                if (table && table.api && _.isFunction(table.api.validate)) {
                    var result = table.api.validate();
                    success = success && result == true;
                }
            });
            if (!success) {
                return;
            }
            _this.pageLoading(page);

            var _ref6 = options || {},
                url = _ref6.url,
                btnKey = _ref6.btnKey,
                beforeAction = _ref6.beforeAction,
                excludeKeys = _ref6.excludeKeys,
                prepareDataCallback = _ref6.prepareDataCallback,
                callback = _ref6.callback,
                error = _ref6.error;

            var result = true;
            if (beforeAction && _.isFunction(beforeAction)) {
                result = beforeAction();
            }
            if (!result) {
                _this.pageLoaded(page);
                return;
            }
            // 2.合并数据
            var saveData = {};
            _.forEach(formKeys, function (formKey) {
                var formData = {};
                var form = page.findUI(formKey);
                if (form && form.api) {
                    if (excludeKeys) {
                        if (_.isArray(excludeKeys)) {
                            // 是数组
                            if (!contains(excludeKeys, formKey)) {
                                formData = form.api.getFieldsValue();
                            }
                        } else {
                            // 单个字符串
                            if (excludeKeys !== formKey) {
                                formData = form.api.getFieldsValue();
                            }
                        }
                    } else {
                        formData = form.api.getFieldsValue();
                    }
                }

                if (!_.isEmpty(formData)) {
                    var attachObjs = [];
                    _.forEach(form.children, function (formItem) {
                        var values = formData['' + formItem.uikey];
                        if (values) {
                            if (PubConstants.DATE_ITEM_TYPE === formItem.uisubtype) {
                                // 日期
                                formData['' + formItem.uikey] = DateFormatUtils.formatDate(formData['' + formItem.uikey], PubConstants.DEFAULT_DATE_FORMAT);
                            } else if ((PubConstants.IMAGE_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_ITEM_TYPE === formItem.uisubtype || PubConstants.ATTACH_MGR_ITEM_TYPE === formItem.uisubtype) && formItem.visible != false) {
                                // 附件上传和图片上传
                                var attachObj = {
                                    attachMgr: values,
                                    sourceType: formItem.sourceType ? formItem.sourceType : formItem.uikey
                                };
                                attachObjs.push(attachObj);
                                if (_this.clearAttachIds != false) {
                                    formData[formItem.uikey] = null;
                                }
                            }
                        }
                    });
                    saveData = assign(formData, saveData);
                    var existAttachs = saveData['' + PubConstants.ATTACH_UPLOAD_FIELD];
                    if (existAttachs && _.isArray(existAttachs)) {
                        saveData['' + PubConstants.ATTACH_UPLOAD_FIELD] = existAttachs.concat(attachObjs);
                    } else {
                        saveData['' + PubConstants.ATTACH_UPLOAD_FIELD] = attachObjs;
                    }
                }
            });
            var pk = _this.getPrimaryKey(page);
            var saveUrl = pk ? _this.urls.UPDATE : _this.urls.INSERT;
            // 编辑表格数据处理
            _.forEach(tableKeys, function (key) {
                var tableData = [];
                var table = page.findUI(key);
                if (table && table.api) {
                    if (pk) {
                        // 修改
                        tableData = table.api.getRowData({
                            rowState: "all",
                            clearIsEdit: false,
                            clearNewId: false
                        });
                    } else {
                        // 新增
                        tableData = table.api.getRowData({
                            rowState: "add",
                            clearIsEdit: false,
                            clearNewId: true
                        });
                    }
                    // 编辑表格的特殊字段类型处理(上传附件,图片上传等)
                    if (tableData && tableData.length > 0) {
                        var children = table.children;
                        var attachItems = [];
                        if (_.isArray(children) && children.length > 0) {
                            _.forEach(children, function (child) {
                                if ((PubConstants.IMAGE_ITEM_TYPE === child.uisubtype || PubConstants.ATTACH_ITEM_TYPE === child.uisubtype) && child.visible != false) {
                                    attachItems.push(child);
                                }
                            });
                        }
                        if (attachItems.length > 0) {
                            // 行
                            _.forEach(tableData, function (row) {
                                var attachObjs = [];
                                // 列
                                _.forEach(attachItems, function (item) {
                                    // values = [{附件Id, 设计器中配置的类型标识}]
                                    var values = row[item.uikey] ? row[item.uikey].split(",") : [];
                                    if (values && values.length > 0) {
                                        _.forEach(values, function (value) {
                                            var AttachObj = {
                                                attachMgr: value,
                                                sourceType: item.sourceType ? item.sourceType : item.uikey
                                            };
                                            attachObjs.push(AttachObj);
                                        });
                                        if (_this.clearAttachIds != false) {
                                            row[item.uikey] = null;
                                        }
                                    }
                                });
                                row['' + PubConstants.ATTACH_UPLOAD_FIELD] = attachObjs;
                            });
                        }
                    }
                }
                saveData[key] = tableData;
            });
            // 对待保存数据进行处理
            if (prepareDataCallback && _.isFunction(prepareDataCallback)) {
                var customSaveData = prepareDataCallback(_.cloneDeep(saveData));
                if (customSaveData && _.isPlainObject(customSaveData)) {
                    saveData = customSaveData;
                }
            }
            // 将单据的附件管理与表单中的附件管理合并
            var attachMgr = saveData['' + PubConstants.ATTACH_MGR_FIELD];
            var attachObjs = saveData['' + PubConstants.ATTACH_UPLOAD_FIELD];
            if (attachMgr) {
                attachObjs.push({
                    attachMgr: attachMgr,
                    sourceType: PubConstants.DEFAULT_FILE_SOURCE_TYPE
                });
            }
            // 3.执行保存
            ajax.postJSON(url ? url : saveUrl, saveData, function (result) {
                if (callback && _.isFunction(callback)) {
                    callback(result);
                } else {
                    if (result.success) {
                        // 默认处理,设值到界面
                        var data = result.backData;
                        _this.setData(page, data);
                        _this.refresh(page, function () {
                            if (btnKey === PubConstants.SAVE_ADD_BTN_KEY) {
                                // 保存并新增
                                _this.resetPage(page, _this.setDefaultData);
                            } else if (btnKey === PubConstants.SAVE_COPY_BTN_KEY) {
                                // 保存并复制
                                _this.copyData(page, _this.setDefaultData);
                            }
                            YYMessage.success('保存成功', PubConstants.MSG_TIME_OUT);
                        });
                    } else {
                        YYMessage.error(result.backMsg, PubConstants.MSG_TIME_OUT);
                        _this.refresh(page);
                    }
                }
            }, error);
        }
    });
};

/**
 * 删除数据
 * @param page
 * @param options
 *          url ajax请求的url
 *          beforeAction 前事件,返回true继续,返回false终止
 *          callback 删除后的回调函数
 *          error ajax请求失败的回调函数
 */
CardEventHandler.deleteData = function (page, options) {
    var form = this.getAuditInfoForm(page);
    if (!form || !form.api) return;
    var primaryField = this.getPrimaryField(page);
    var pk = form.api.getFieldValue(primaryField);
    var ts = form.api.getFieldValue(PubConstants.TS_FIELD);
    if (!pk || !ts) {
        YYMessage.info("当前界面没有可删除数据", PubConstants.MSG_TIME_OUT);
        return;
    }
    var _this = this;
    YYModal.confirm({
        title: "删除确认",
        content: "您是否确认要删除该条数据?",
        onOk: function onOk() {
            _this.pageLoading(page);

            var _ref7 = options || {},
                url = _ref7.url,
                beforeAction = _ref7.beforeAction,
                callback = _ref7.callback,
                error = _ref7.error;

            var result = true;
            if (beforeAction && _.isFunction(beforeAction)) {
                result = beforeAction();
            }
            if (!result) {
                _this.pageLoaded(page);
                return;
            }
            var data = {};
            data[primaryField] = pk;
            data[PubConstants.TS_FIELD] = ts;
            var deleteData = [];
            deleteData.push(data);
            ajax.postJSON(url ? url : _this.urls.DELETE, deleteData, function (result) {
                if (callback && _.isFunction(callback)) {
                    callback(result);
                } else {
                    if (result.success) {
                        _this.resetPage(page, _this.setDefaultData);
                        YYMessage.success("删除成功", PubConstants.MSG_TIME_OUT);
                    } else {
                        YYMessage.error(result.backMsg, PubConstants.MSG_TIME_OUT);
                        _this.refresh(page);
                    }
                }
            }, error);
        },
        onCancel: function onCancel() {}
    });
};

/**
 * 编辑表格增行
 * @param page
 * @param tableKey 编辑表格键值(卡片页面有多个编辑表格时需要传此参数)
 */
CardEventHandler.addRow = function (page, tableKey) {
    var table;
    if (tableKey) {
        table = page.findUI(tableKey);
    } else {
        var tableKeys = this.getEditTableKeys(page);
        if (tableKeys && tableKeys.length > 0) {
            table = page.findUI(tableKeys[0]);
        }
    }
    if (table && table.api) {
        table.api.addRow();
    }
};

/**
 * 编辑表格删行
 * @param page
 * @param tableKey 编辑表格键值(卡片页面有多个编辑表格时需要传此参数)
 */
CardEventHandler.delRow = function (page, tableKey) {
    var table;
    if (tableKey) {
        table = page.findUI(tableKey);
    } else {
        var tableKeys = this.getEditTableKeys(page);
        if (tableKeys && tableKeys.length > 0) {
            table = page.findUI(tableKeys[0]);
        }
    }
    if (table && table.api) {
        var rowKeys = table.api.getSelectedRowKeys();
        table.api.delRow(rowKeys);
    }
};

/**
 * 获取页面所有的表单
 * @param page
 * @param excludeAudit 是否排除审计信息Form
 * @returns
 */
CardEventHandler.getForms = function (page, excludeAudit) {
    var normalForms = page.findUIByType(PubConstants.COMP_FORM);
    var auditForm = this.getAuditInfoForm(page);
    if (auditForm && !excludeAudit) {
        return normalForms.concat(auditForm);
    }
    return normalForms;
};

/**
 * 获取页面所有表单键值
 * @param page
 * @param excludeAudit 是否排除审计信息Form
 * @returns
 */
CardEventHandler.getFormKeys = function (page, excludeAudit) {
    var forms = this.getForms(page, excludeAudit);
    var formKeys = [];
    if (forms && forms.length > 0) {
        _.forEach(forms, function (form) {
            if (form) {
                formKeys.push(form.uikey);
            }
        });
    }
    return formKeys;
};

/**
 * 获取页面所有的编辑表格
 * @param page
 * @returns
 */
CardEventHandler.getEditTables = function (page) {
    return page.findUIByType(PubConstants.COMP_EDIT_TABLE) || [];
};

/**
 * 获取页面所有的编辑表格键值
 * @param page
 * @param excludeKeys 排除的表格键值(String or Array)
 * @returns
 */
CardEventHandler.getEditTableKeys = function (page, excludeKeys) {
    var tables = this.getEditTables(page);
    var tableKeys = [];
    if (tables && tables.length > 0) {
        _.forEach(tables, function (table) {
            var tableKey = table.uikey;
            if (excludeKeys) {
                if (_.isArray(excludeKeys)) {
                    // 是数组
                    if (!contains(excludeKeys, tableKey)) {
                        tableKeys.push(tableKey);
                    }
                } else {
                    // 是字符串
                    if (excludeKeys !== tableKey) {
                        tableKeys.push(tableKey);
                    }
                }
            } else {
                tableKeys.push(tableKey);
            }
        });
    }
    return tableKeys;
};

/**
 * 提交前公共校验
 * @param page
 * @param callback 可以在回调中进行自定义校验(回调函数必须返回true|false)
 */
CardEventHandler.onSubmitBefore = function (page, callback) {
    // var billCompanyId = this.getBillCompanyId(page);
    // if (!billCompanyId) {
    //     YYMessage.error("提交失败:未获取到单据创建组织");
    //     return false;
    // }
    // var loginCompanyId = this.getLoginCompanyId();
    // if (billCompanyId !== loginCompanyId) {
    //     YYMessage.error("提交失败:当前登录组织非单据的创建组织");
    //     return false;
    // }
    if (callback && _.isFunction(callback)) {
        return callback();
    }
    return true;
};

/**
 * 获取审计信息表单
 * @param page
 */
CardEventHandler.getAuditInfoForm = function (page) {
    return this.getUniqueComponent(page, PubConstants.COMP_AUDIT_FORM);
};

/**
 * 从审计信息表单获取主键字段名称
 * @param page
 */
CardEventHandler.getPrimaryField = function (page) {
    var pk = this.getAuditInfoForm(page) ? this.getAuditInfoForm(page)[PubConstants.PK_FIELD] : undefined;
    if (!pk) {
        console.warn("调用getPrimaryField失败,主键字段未定义");
        return PubConstants.DEFAULT_PK_FIELD_VALUE;
    }
    return pk;
};

/**
 * 从审计信息表单获取主键值
 * @param page
 */
CardEventHandler.getPrimaryKey = function (page) {
    var form = this.getAuditInfoForm(page);
    if (form && form.api) {
        var pkField = this.getPrimaryField(page);
        if (pkField) {
            return form.api.getFieldValue(pkField);
        } else {
            console.error("调用getPrimaryKey失败,审计信息表单或主键字段未定义");
        }
    }
    return null;
};

/**
 * 从审计信息表单获取单据类型code
 * @param page
 */
CardEventHandler.getBillType = function (page) {
    var billType = this.getAuditInfoForm(page) ? this.getAuditInfoForm(page)[PubConstants.BILL_TYPE_FIELD] : undefined;
    if (!billType) {
        console.warn("调用getBillType失败,单据类型未定义");
    }
    return billType;
};

/**
 * 从审计信息表单获取单据类型name
 * @param page
 */
CardEventHandler.getBillTypeName = function (page) {
    var billTypeName = this.getAuditInfoForm(page) ? this.getAuditInfoForm(page)[PubConstants.BILL_TYPE_NAME_FIELD] : undefined;
    if (!billTypeName) {
        console.warn("调用getBillTypeName失败,单据类型未定义");
    }
    return billTypeName;
};

/**
 * 从审计信息表单获取单据编号
 * @param page
 */
CardEventHandler.getBillCode = function (page) {
    var billCode;
    var auditForm = this.getAuditInfoForm(page);
    if (auditForm && auditForm.api) {
        billCode = auditForm.api.getFieldValue(PubConstants.BILL_CODE_FIELD);
    }
    return billCode;
};

/**
 * 获取单据的创建组织
 * @param page
 */
CardEventHandler.getBillCompanyId = function (page) {
    var formKeys = this.getFormKeys(page);
    var companyId;
    _.forEach(formKeys, function (key) {
        var form = page.findUI(key);
        if (form && form.api) {
            companyId = form.api.getFieldValue(PubConstants.DEFAULT_ORG_FIELD);
            if (companyId) {
                // 命中则跳出循环
                return false;
            }
        }
    });
    // 参照字段, 要同时适配加参照注解和不加参照注解的情况
    return _.isPlainObject(companyId) ? companyId.id : companyId;
};

/**
 * 从上下文中获取当前登录组织
 */
CardEventHandler.getLoginCompanyId = function () {
    return AuthToken.getOrgaId();
};

/**
 * 从审计信息表单获取单据状态
 * @param page
 */
CardEventHandler.getBillState = function (page) {
    var billState;
    var auditForm = this.getAuditInfoForm(page);
    if (auditForm && auditForm.api) {
        billState = auditForm.api.getFieldValue(PubConstants.BILL_STATE_FIELD);
        if (!billState) {
            billState = PubConstants.BILL_STATE.FREE;
        }
    }
    return billState;
};

/**
 * 获取提交组件键值
 * @param page
 */
CardEventHandler.getBpmSubmitKey = function (page) {
    var comp = this.getUniqueComponent(page, PubConstants.COMP_BPM_SUBMIT);
    if (comp) {
        return comp.uikey;
    }
    return null;
};

/**
 * 获取审批组件键值
 * @param page
 */
CardEventHandler.getBpmApproveKey = function (page) {
    var comp = this.getUniqueComponent(page, PubConstants.COMP_BPM_APPROVE);
    if (comp) {
        return comp.uikey;
    }
    return null;
};

/**
 * 获取附件管理组件
 * @param page
 */
CardEventHandler.getAttachComp = function (page) {
    return this.getUniqueComponent(page, PubConstants.COMP_ATTACH);
};

/**
 * 获取打印组件
 * @param page
 */
CardEventHandler.getPrintComp = function (page) {
    return this.getUniqueComponent(page, PubConstants.COMP_PRINT);
};

/**
 * 根据组件名称获取组件(适合设计器中只有唯一实例的组件)
 * @param page
 * @param compName
 */
CardEventHandler.getUniqueComponent = function (page, compName) {
    var comp = this.getComponents(page, compName);
    if (comp && comp.length === 1) {
        return comp[0];
    }
    return null;
};

/**
 * 根据组件名称获取组件(适合设计器中有多个实例的组件)
 * @param page
 * @param compName
 */
CardEventHandler.getComponents = function (page, compName) {
    var comp = page.findUIByType(compName);
    return comp || [];
};

/**
 * 上传附件或删除附件时, 将附件的value保存到审计信息中,方便后台将单据与附件进行关联
 * @param page
 * @param value
 */
CardEventHandler.attachChange = function (page, value) {
    var auditForm = this.getAuditInfoForm(page);
    if (auditForm && auditForm.api) {
        var fieldValue = {};
        fieldValue[PubConstants.ATTACH_MGR_FIELD] = value;
        auditForm.api.setFieldsValue(fieldValue);
    }
};

/**
 * 审批流提交配置
 * @param page
 * @param options
 *          billId 单据id
 *          billCode 单据编号
 *          billTypeId 单据类型编号
 *          userId 用户ID(不启用当前用户时必须)
 *          orgId 组织ID(不启用当前组织时必须)
 *          formUrl 单据超链接地址
 *          procInstName 流程实例名
 */
CardEventHandler.configBpmSubmit = function (page, options) {
    var _ref8 = options || {},
        billId = _ref8.billId,
        billCode = _ref8.billCode,
        billTypeId = _ref8.billTypeId,
        userId = _ref8.userId,
        orgId = _ref8.orgId,
        formUrl = _ref8.formUrl,
        procInstName = _ref8.procInstName;

    var submitKey = this.getBpmSubmitKey(page);
    var comp = page.findUI(submitKey);
    if (comp) {
        var primaryKey = this.getPrimaryKey(page);
        var primaryField = this.getPrimaryField(page);
        comp.userId = userId;
        if (orgId) {
            comp.bill = {};
            comp.bill.companyId = orgId;
        }
        comp.billId = billId ? billId : primaryKey;
        comp.billCode = billCode ? billCode : this.getBillCode(page);
        if (billTypeId) {
            comp.billTypeId = billTypeId;
        } else if (!comp.billTypeId) {
            // 避免设计器中没有配置单据类型
            comp.billTypeId = this.getBillType(page);
        }
        comp.businessKey = billId ? billId : primaryKey;
        if (formUrl) {
            // 单据的超链接地址
            comp.formurl = formUrl;
        } else {
            // 先从页面url中读取前端工程名
            var frontendPrjName = this.urls ? this.urls.FRONTEND_ROOT_PATH : undefined;
            if (!frontendPrjName) {
                window.EnvConfig = window.EnvConfig || {};
                // 再从前端配置外部化中读取前端工程名
                frontendPrjName = window.EnvConfig.FRONTEND_ROOT_PATH;
            }
            if (frontendPrjName) {
                frontendPrjName = frontendPrjName.startsWith("/") ? frontendPrjName : "/" + frontendPrjName;
                var location = page.props.location;
                if (location.pathname) {
                    var condition = "";
                    var query = location.query;
                    if (query && !_.isEmpty(query)) {
                        // 超链接携带参数,注意:复制单据时超链接参数未变化,但是主键已发生变化,主键从审计信息中取值
                        for (var prop in query) {
                            if (prop === '' + primaryField) {
                                query[prop] = '' + primaryKey;
                            }
                            condition = condition + prop + "=" + query[prop] + "&";
                        }
                        condition = condition.substring(0, condition.lastIndexOf("&"));
                    } else {
                        // 路由未携带参数
                        condition = '' + primaryField + "=" + ('' + primaryKey);
                    }
                    comp.formurl = BaseHost.ADDR + frontendPrjName + "/#" + location.pathname + "?" + condition;
                }
            }
        }
        if (procInstName) {
            comp.procInstName = procInstName;
        } else {
            var billTypeName = comp['' + PubConstants.BILL_TYPE_NAME_FIELD] ? comp['' + PubConstants.BILL_TYPE_NAME_FIELD] : this.getBillTypeName(page);
            billCode = billCode ? billCode : this.getBillCode(page);
            if (billTypeName && billCode) {
                comp.procInstName = billTypeName + "_" + billCode;
            }
        }
    } else {
        console.warn("调用configBpmSubmit失败,提交组件未定义");
    }
    console.log("comp", comp);
};

/**
 * 审批流审批配置
 * @param page
 * @param options
 *          billId 单据id
 *          billTypeId 单据类型编号
 */
CardEventHandler.configBpmApprove = function (page, options) {
    var _ref9 = options || {},
        billId = _ref9.billId,
        billTypeId = _ref9.billTypeId;

    var approveKey = this.getBpmApproveKey(page);
    var comp = page.findUI(approveKey);
    if (comp) {
        comp.billId = billId ? billId : this.getPrimaryKey(page);
        if (billTypeId) {
            comp.billTypeId = billTypeId;
        } else if (!comp.billTypeId) {
            // 避免设计器中没有配置单据类型
            comp.billTypeId = this.getBillType(page);
        }
    } else {
        console.warn("调用configBpmApprove失败,审批组件未定义");
    }
};

/**
 * 附件管理配置
 * @param page
 */
CardEventHandler.configAttachment = function (page) {
    var pk = this.getPrimaryKey(page);
    var attachComp = this.getAttachComp(page);
    if (attachComp) {
        var billState = this.getBillState(page);
        attachComp.sourceId = pk;
        if (!attachComp.billType) {
            // 避免设计器中没有配置单据类型
            attachComp.billType = this.getBillType(page);
        }
        // 非自由态的单据不允许上传和删除附件
        if (billState && PubConstants.BILL_STATE.FREE !== billState) {
            attachComp.showUploadBtn = false;
            attachComp.showDelBtn = false;
        } else {
            attachComp.showUploadBtn = true;
            attachComp.showDelBtn = true;
        }
        page.refresh();
    } else {
        console.warn("调用configAttachment失败,附件管理组件未定义");
    }
};

/**
 * 获取卡片页面标题
 * @param page
 */
CardEventHandler.getCardTitle = function (page) {
    var comp = this.getUniqueComponent(page, PubConstants.COMP_CARD_TITLE).title;
    if (comp && comp.title) {
        return comp.title;
    }
    return '';
};

/**
 * 获取卡片页面容器组件键值
 * @param page
 */
CardEventHandler.getCardPageKey = function (page) {
    var comp = this.getUniqueComponent(page, PubConstants.COMP_CARD_PAGE);
    if (comp) {
        return comp.uikey;
    }
    return null;
};

/**
 * 获取表单所有的日期项
 * @param page
 * @param includeHidden 是否包含隐藏的字段
 */
CardEventHandler.getFormDateItems = function (page, includeHidden) {
    return this.getFormItemsByType(page, { type: PubConstants.DATE_ITEM_TYPE, includeHidden: includeHidden });
};

/**
 * 获取表单中的指定类型表单项(日期:date,金额:currency等)
 * @param page
 * @param options
 *          type 显示类型
 *          includeHidden 是否包含隐藏的字段(默认false)
 * @returns {Array}
 */
CardEventHandler.getFormItemsByType = function (page, options) {
    var _ref10 = options || {},
        type = _ref10.type,
        includeHidden = _ref10.includeHidden;

    if (!type) {
        console.warn("调用getFormItemsBySubType失败,类型未定义");
        return [];
    }
    var formItems = this.getComponents(page, PubConstants.COMP_FORM_ITEM);
    var retItems = formItems.filter(function (item) {
        return includeHidden == true ? item.uisubtype === type : item.uisubtype === type && item.visible != false;
    });
    return retItems || [];
};

/**
 * 获取表格所有的日期项
 * @param page
 * @param includeHidden 是否包含隐藏的字段
 */
CardEventHandler.getTableDateItems = function (page, includeHidden) {
    return this.getTableItemsByType(page, { type: PubConstants.DATE_ITEM_TYPE, includeHidden: includeHidden });
};

/**
 * 获取卡片界面所有编辑表格和数据表格中的指定类型表格项(日期:date,金额:currency等)
 * @param page
 * @param options
 *          type 设计器中的显示类型
 *          includeHidden 是否包含隐藏的字段(默认false)
 * @returns {Array}
 */
CardEventHandler.getTableItemsByType = function (page, options) {
    var _ref11 = options || {},
        type = _ref11.type,
        includeHidden = _ref11.includeHidden;

    if (!type) {
        console.warn("调用getTableItemsByType失败,类型未定义");
        return [];
    }
    var editTableItems = this.getComponents(page, PubConstants.COMP_EDIT_ITEM).filter(function (item) {
        return includeHidden == true ? item.uisubtype === type : item.uisubtype === type && item.visible != false;
    });
    var dataTableItems = this.getComponents(page, PubConstants.COMP_DATA_TABLE_COL).filter(function (item) {
        return includeHidden == true ? item.fieldtype === type : item.fieldtype === type && item.isShow != false;
    });
    return editTableItems.concat(dataTableItems);
};

/**
 * 卡片页面获取指定参数值
 * @param page
 * @param options
 *          billType 单据类型编号(非必须)
 *          regCode 参数编码(必须)
 *          orgId 组织ID(非必须,默认当前登录组织)
 *  @returns
 */
CardEventHandler.getRegConfigValue = function (page, options) {
    var _ref12 = options || {},
        billType = _ref12.billType,
        regCode = _ref12.regCode,
        orgId = _ref12.orgId;

    if (!regCode) {
        console.warn("调用getRegConfigValue失败,参数编码未定义");
        return null;
    }
    if (!billType) {
        billType = this.getBillType(page);
    }
    return SupportUtils.getRegConfigValue({ billType: billType, regCode: regCode, orgId: orgId });
};

/**
 * 将用户自定义的uiEvent与模板代码uiEvent进行合并
 * @param vendor
 * @return
 */
CardEventHandler.assignUiEvent = function (vendor) {
    if (!vendor) {
        vendor = {};
    }
    return AssignUtils.assignObject(this.API, vendor);
};

/**
 * 将用户自定义的uiParser与模板代码uiParser进行合并
 * @param vendor
 * @return
 */
CardEventHandler.assignUIParser = function (vendor) {
    if (!vendor) {
        vendor = {};
    }
    return AssignUtils.assignObject({}, vendor);
};

module.exports = CardEventHandler;