'use strict';

/**
 * Created by xg on 2017/5/2.
 * 共享业务中心和业务支撑组件模块公共utils
 */
var ajax = require('yylib-utils/ajax');
var _ = require('lodash');

var _require = require('./../resource/BaseHost'),
    SUPPORT_WEB_URL = _require.SUPPORT_WEB_URL,
    SHARE_WEB_URL = _require.SHARE_WEB_URL;

var AuthToken = require("yylib-utils/AuthToken");
var DataUtil = require('yylib-utils/DataUtil');
var PubConstants = require('../resource/PubConstants');
var SyncAjax = require('../utils/SyncAjax');

var SupportUtils = {

    /**
     * 初始化当前模块精度参数
     * @param success ajax请求成功之后的回调函数
     * @param error ajax请求失败的回调函数
     */
    initModulePrecisionConfigs: function initModulePrecisionConfigs(success, error) {
        window.EnvConfig = window.EnvConfig || {};
        var moduleCode = window.EnvConfig.MODULE_CODE;
        var orgId = AuthToken.getOrgaId();
        if (!moduleCode) {
            console.warn('未配置模块编号,默认不启用精度控制');
            return;
        } else if (!orgId) {
            console.error('调用initModulePrecisionConfigs失败,未从上下文中获取到登录组织');
            return;
        }
        // 从local storage中读取
        var cachedData = DataUtil.localRead(moduleCode + '_' + orgId + PubConstants.PRECISION_SUFFIX);
        if (cachedData && !_.isEmpty(cachedData)) {
            if (success && _.isFunction(success)) {
                success();
            }
            return;
        }
        var params = {};
        params.moduleCode = moduleCode;
        params.orgId = orgId;
        ajax.getJSON(SUPPORT_WEB_URL + "/reg/regconfig/getPrecisionConfigsByModuleCode", params, function (result) {
            if (result.success) {
                var data = result.backData || {};
                // 保存到local storage中
                DataUtil.localSave(moduleCode + '_' + orgId + PubConstants.PRECISION_SUFFIX, data);
                if (success && _.isFunction(success)) {
                    success();
                }
            } else {
                console.error(result.backMsg);
            }
        }, error);
    },

    /**
     * 获取系统参数设置
     * @param regCode 参数编码(必须)
     * @param orgId 组织ID(非必须,为空则查询平台参数)
     * @param success ajax请求成功回调函数(必须)
     * @param error ajax请求失败回调函数
     */
    getSysConfig: function getSysConfig(regCode, orgId, success, error) {
        if (!regCode || !_.isFunction(success)) {
            console.error('调用getSysConfig失败,缺少必要参数!');
            return;
        }
        var params = {};
        params.regCode = regCode;
        params.orgId = orgId;
        ajax.getJSON(SUPPORT_WEB_URL + "/reg/regconfig/getSysConfigByCode", params, function (result) {
            success(result);
        }, error);
    },

    /**
     * 根据所属地区末级ID查询所属地区全称
     * @param areaId 末级ID(必须)
     * @param success ajax请求成功的回调函数(必须)
     * @param error ajax请求失败的回调函数
     */
    getAreaFullName: function getAreaFullName(areaId, success, error) {
        if (!areaId || !_.isFunction(success)) {
            console.error('调用getAreaFullName失败,缺少必要参数!');
            return;
        }
        var params = {};
        params.areaId = areaId;
        ajax.getJSON(SHARE_WEB_URL + "/defdoc/manage/getAreaFullName", params, function (result) {
            success(result);
        }, error);
    },

    /**
     * 查询单据默认搜索方案(私有的默认方案优先于公有的默认方案)
     * @param options
     *          userId 用户ID(必须)
     *          orgId 组织ID(必须)
     *          roleId 角色ID(非必须)
     *          billType 单据类型(必须)
     * @param success ajax请求成功的回调函数(必须)
     * @param error ajax请求失败的回调函数
     */
    getDefaultSearchTemplate: function getDefaultSearchTemplate(options, success, error) {
        var _ref = options || {},
            userId = _ref.userId,
            orgId = _ref.orgId,
            roleId = _ref.roleId,
            billType = _ref.billType;

        if (!billType || !_.isFunction(success)) {
            console.error('调用getDefaultSearchTemplate失败,缺少必要参数!');
            return;
        }
        var params = {};
        params.billType = billType;
        params.orgId = orgId;
        params.userId = userId;
        params.roleId = roleId;
        ajax.getJSON(SUPPORT_WEB_URL + "/searchTemplate/getDefaultTemplate", params, function (result) {
            success(result);
        }, error);
    },

    /**
     * 查询单据公共的默认搜索方案
     * @param billType 单据类型(必须)
     * @param success ajax请求成功的回调函数(必须)
     * @param error ajax请求失败的回调函数
     */
    getPublicDefaultTemplate: function getPublicDefaultTemplate(billType, success, error) {
        if (!billType || !_.isFunction(success)) {
            console.error('调用getPublicDefaultTemplate失败,缺少必要参数!');
            return;
        }
        var params = {};
        params.billType = billType;
        ajax.getJSON(SUPPORT_WEB_URL + "/searchTemplate/getPublicDefaultTemplate", params, function (result) {
            success(result);
        }, error);
    },

    /**
     * 根据自定义档案列表编码查询自定义档案
     * @param options
     *          defdoclistCode 自定义档案列表编码(必须)
     *          orgId 组织ID(非必须)
     *          condition 自定义过滤条件(非必须)
     * @param success ajax请求成功的回调函数(必须)
     * @param error ajax请求失败的回调函数
     */
    getDefdocByListCode: function getDefdocByListCode(options, success, error) {
        var _ref2 = options || {},
            defdoclistCode = _ref2.defdoclistCode,
            orgId = _ref2.orgId,
            condition = _ref2.condition;

        if (!defdoclistCode || !_.isFunction(success)) {
            console.error('调用getDefdocByListCode失败,缺少必要参数!');
            return;
        }
        var params = {};
        params.defdoclistCode = defdoclistCode;
        params.orgId = orgId;
        params.condition = condition;
        ajax.getJSON(SHARE_WEB_URL + "/defdoc/manage/getbydefdoclistcode", params, function (result) {
            success(result);
        }, error);
    },

    /**
     * 查询参数值(同步方式)
     * @param options
     *          billType 单据类型编号 (必须)
     *          orgId 组织 (非必须,默认当前登录组织)
     *          regCode 参数编码 (必须)
     */
    getRegConfigValue: function getRegConfigValue(options) {
        var regValue = null;

        var _ref3 = options || {},
            billType = _ref3.billType,
            orgId = _ref3.orgId,
            regCode = _ref3.regCode;

        if (!billType || !regCode) {
            console.error('调用getRegConfigValue失败,缺少必要参数!');
            return regValue;
        }
        if (!orgId) {
            orgId = AuthToken.getOrgaId();
        }
        var params = {};
        params.billType = billType;
        params.regCode = regCode;
        params.orgId = orgId;
        var retData = SyncAjax.getJson(SUPPORT_WEB_URL + "/reg/regconfig/getRegConfigValue", params);
        if (retData.success) {
            regValue = retData.backData;
        }
        return regValue;
    },

    /**
     * 查询单据模板
     * @param options
     *          orgId 组织ID
     *          billType 单据类型编码(必须)
     *          uiType 页面类型(必须)"list" | "card"
     * @param success ajax请求成功的回调函数(必须)
     * @param error ajax请求失败的回调函数
     */
    getBillTemplate: function getBillTemplate(options, success, error) {
        var _ref4 = options || {},
            orgId = _ref4.orgId,
            billType = _ref4.billType,
            uiType = _ref4.uiType;

        if (!billType || !uiType || !_.isFunction(success)) {
            console.error('调用getBillTemplate失败,缺少必要参数!');
            return;
        }
        if (!orgId) {
            orgId = AuthToken.getOrgaId();
        }
        var params = {
            orgId: orgId,
            billType: billType,
            uiType: uiType
        };
        ajax.getJSON(SUPPORT_WEB_URL + "/assign/findByOrgBillType", params, function (result) {
            success(result);
        }, error);
    }
};
module.exports = SupportUtils;